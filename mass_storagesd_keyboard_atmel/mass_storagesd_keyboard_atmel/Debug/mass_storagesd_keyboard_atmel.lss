
mass_storagesd_keyboard_atmel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000154  00800100  000035a2  00003636  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000035a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000432  00800254  00800254  0000378a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000378a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000037e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000458  00000000  00000000  00003828  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00009782  00000000  00000000  00003c80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002b1a  00000000  00000000  0000d402  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000d294  00000000  00000000  0000ff1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000010c4  00000000  00000000  0001d1b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00018bfa  00000000  00000000  0001e274  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006a17  00000000  00000000  00036e6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000e78  00000000  00000000  0003d885  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00008b45  00000000  00000000  0003e6fd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	a2 c1       	rjmp	.+836    	; 0x346 <__ctors_end>
       2:	00 00       	nop
       4:	bf c1       	rjmp	.+894    	; 0x384 <__bad_interrupt>
       6:	00 00       	nop
       8:	bd c1       	rjmp	.+890    	; 0x384 <__bad_interrupt>
       a:	00 00       	nop
       c:	bb c1       	rjmp	.+886    	; 0x384 <__bad_interrupt>
       e:	00 00       	nop
      10:	b9 c1       	rjmp	.+882    	; 0x384 <__bad_interrupt>
      12:	00 00       	nop
      14:	b7 c1       	rjmp	.+878    	; 0x384 <__bad_interrupt>
      16:	00 00       	nop
      18:	b5 c1       	rjmp	.+874    	; 0x384 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	b3 c1       	rjmp	.+870    	; 0x384 <__bad_interrupt>
      1e:	00 00       	nop
      20:	b1 c1       	rjmp	.+866    	; 0x384 <__bad_interrupt>
      22:	00 00       	nop
      24:	af c1       	rjmp	.+862    	; 0x384 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 e9 14 	jmp	0x29d2	; 0x29d2 <__vector_10>
      2c:	0c 94 b5 15 	jmp	0x2b6a	; 0x2b6a <__vector_11>
      30:	a9 c1       	rjmp	.+850    	; 0x384 <__bad_interrupt>
      32:	00 00       	nop
      34:	a7 c1       	rjmp	.+846    	; 0x384 <__bad_interrupt>
      36:	00 00       	nop
      38:	a5 c1       	rjmp	.+842    	; 0x384 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	a3 c1       	rjmp	.+838    	; 0x384 <__bad_interrupt>
      3e:	00 00       	nop
      40:	a1 c1       	rjmp	.+834    	; 0x384 <__bad_interrupt>
      42:	00 00       	nop
      44:	0c 94 5c 0b 	jmp	0x16b8	; 0x16b8 <__vector_17>
      48:	9d c1       	rjmp	.+826    	; 0x384 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	9b c1       	rjmp	.+822    	; 0x384 <__bad_interrupt>
      4e:	00 00       	nop
      50:	99 c1       	rjmp	.+818    	; 0x384 <__bad_interrupt>
      52:	00 00       	nop
      54:	97 c1       	rjmp	.+814    	; 0x384 <__bad_interrupt>
      56:	00 00       	nop
      58:	95 c1       	rjmp	.+810    	; 0x384 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	93 c1       	rjmp	.+806    	; 0x384 <__bad_interrupt>
      5e:	00 00       	nop
      60:	91 c1       	rjmp	.+802    	; 0x384 <__bad_interrupt>
      62:	00 00       	nop
      64:	8f c1       	rjmp	.+798    	; 0x384 <__bad_interrupt>
      66:	00 00       	nop
      68:	8d c1       	rjmp	.+794    	; 0x384 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	8b c1       	rjmp	.+790    	; 0x384 <__bad_interrupt>
      6e:	00 00       	nop
      70:	89 c1       	rjmp	.+786    	; 0x384 <__bad_interrupt>
      72:	00 00       	nop
      74:	87 c1       	rjmp	.+782    	; 0x384 <__bad_interrupt>
      76:	00 00       	nop
      78:	85 c1       	rjmp	.+778    	; 0x384 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	83 c1       	rjmp	.+774    	; 0x384 <__bad_interrupt>
      7e:	00 00       	nop
      80:	81 c1       	rjmp	.+770    	; 0x384 <__bad_interrupt>
      82:	00 00       	nop
      84:	7f c1       	rjmp	.+766    	; 0x384 <__bad_interrupt>
      86:	00 00       	nop
      88:	7d c1       	rjmp	.+762    	; 0x384 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	7b c1       	rjmp	.+758    	; 0x384 <__bad_interrupt>
      8e:	00 00       	nop
      90:	79 c1       	rjmp	.+754    	; 0x384 <__bad_interrupt>
      92:	00 00       	nop
      94:	77 c1       	rjmp	.+750    	; 0x384 <__bad_interrupt>
	...

00000098 <ProductString>:
      98:	48 03 4c 00 55 00 46 00 41 00 20 00 4d 00 61 00     H.L.U.F.A. .M.a.
      a8:	73 00 73 00 20 00 53 00 74 00 6f 00 72 00 61 00     s.s. .S.t.o.r.a.
      b8:	67 00 65 00 20 00 61 00 6e 00 64 00 20 00 4b 00     g.e. .a.n.d. .K.
      c8:	65 00 79 00 62 00 6f 00 61 00 72 00 64 00 20 00     e.y.b.o.a.r.d. .
      d8:	44 00 65 00 6d 00 6f 00 00 00                       D.e.m.o...

000000e2 <ManufacturerString>:
      e2:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      f2:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000fc <LanguageString>:
      fc:	04 03 09 04                                         ....

00000100 <ConfigurationDescriptor>:
     100:	09 02 39 00 02 01 00 80 32 09 04 00 00 02 08 06     ..9.....2.......
     110:	50 00 07 05 83 02 40 00 05 07 05 04 02 40 00 05     P.....@......@..
     120:	09 04 01 00 01 03 01 01 00 09 21 11 01 00 01 22     ..........!...."
     130:	40 00 07 05 81 03 08 00 05                          @........

00000139 <DeviceDescriptor>:
     139:	12 01 10 01 00 00 00 08 eb 03 61 20 01 00 01 02     ..........a ....
     149:	dc 01                                               ..

0000014b <KeyboardReport>:
     14b:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     15b:	75 01 95 08 81 02 95 01 75 08 81 01 05 08 19 01     u.......u.......
     16b:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 15 00     )...u.....u.....
     17b:	26 ff 00 05 07 19 00 29 ff 95 06 75 08 81 00 c0     &......)...u....

0000018b <__c.4537>:
     18b:	52 20 25 6c 69 20 25 69 0d 0a 00                    R %li %i...

00000196 <__c.4517>:
     196:	57 20 25 6c 69 20 25 69 0d 0a 00                    W %li %i...

000001a1 <__c.4503>:
     1a1:	53 44 20 62 6c 6f 63 6b 73 3a 20 25 6c 69 0d 0a     SD blocks: %li..
	...

000001b2 <__c.4497>:
     1b2:	64 69 73 6b 5f 69 6e 69 74 69 61 6c 69 7a 65 20     disk_initialize 
     1c2:	73 75 63 63 65 73 73 0d 0a 00                       success...

000001cc <__c.4493>:
     1cc:	74 72 79 69 6e 67 20 2e 2e 2e 20 64 69 73 6b 5f     trying ... disk_
     1dc:	69 6e 69 74 69 61 6c 69 7a 65 0d 0a 00              initialize...

000001e9 <__c.4491>:
     1e9:	0d 0a 0d 0a 00                                      .....

000001ee <__c.4522>:
     1ee:	52 65 61 64 79 0d 0a 00                             Ready...

000001f6 <__c.4516>:
     1f6:	44 69 73 63 6f 6e 6e 65 63 74 0d 0a 00              Disconnect...

00000203 <__c.4511>:
     203:	43 6f 6e 6e 65 63 74 0d 0a 00                       Connect...

0000020d <__c.4506>:
     20d:	70 6f 72 74 65 64 20 66 72 6f 6d 20 4c 55 46 41     ported from LUFA
     21d:	5f 30 39 31 32 32 33 20 68 74 74 70 3a 2f 2f 77     _091223 http://w
     22d:	77 77 2e 66 6f 75 72 77 61 6c 6c 65 64 63 75 62     ww.fourwalledcub
     23d:	69 63 6c 65 2e 63 6f 6d 2f 4c 55 46 41 2e 70 68     icle.com/LUFA.ph
     24d:	70 20 2d 20 62 61 73 65 64 20 69 6e 20 4d 61 74     p - based in Mat
     25d:	68 69 65 75 20 53 6f 6e 65 74 20 6c 75 66 61 2d     hieu Sonet lufa-
     26d:	73 64 63 61 72 64 2d 6d 61 73 73 2d 73 74 6f 72     sdcard-mass-stor
     27d:	61 67 65 2d 64 65 6d 6f 20 66 6f 72 20 54 65 65     age-demo for Tee
     28d:	6e 73 79 32 20 41 54 4d 45 47 41 33 32 55 34 20     nsy2 ATMEGA32U4 
     29d:	68 74 74 70 73 3a 2f 2f 62 69 74 62 75 63 6b 65     https://bitbucke
     2ad:	74 2e 6f 72 67 2f 65 6c 61 73 74 69 63 73 68 65     t.org/elasticshe
     2bd:	65 70 2f 6c 75 66 61 2d 73 64 63 61 72 64 2d 6d     ep/lufa-sdcard-m
     2cd:	61 73 73 2d 73 74 6f 72 61 67 65 2d 64 65 6d 6f     ass-storage-demo
     2dd:	2f 73 72 63 2f 64 65 66 61 75 6c 74 2f 20 75 73     /src/default/ us
     2ed:	69 6e 67 20 68 74 74 70 3a 2f 2f 77 77 77 2e 72     ing http://www.r
     2fd:	6f 6c 61 6e 64 2d 72 69 65 67 65 6c 2e 64 65 2f     oland-riegel.de/
     30d:	73 64 2d 72 65 61 64 65 72 2f 69 6e 64 65 78 2e     sd-reader/index.
     31d:	68 74 6d 6c 20 4d 4d 43 2f 53 44 2f 53 44 48 43     html MMC/SD/SDHC
     32d:	20 63 61 72 64 20 72 65 61 64 65 72 20 6c 69 62      card reader lib
     33d:	72 61 72 79 0d 0a 0d 0a 00                          rary.....

00000346 <__ctors_end>:
     346:	11 24       	eor	r1, r1
     348:	1f be       	out	0x3f, r1	; 63
     34a:	cf ef       	ldi	r28, 0xFF	; 255
     34c:	d0 e2       	ldi	r29, 0x20	; 32
     34e:	de bf       	out	0x3e, r29	; 62
     350:	cd bf       	out	0x3d, r28	; 61

00000352 <__do_copy_data>:
     352:	12 e0       	ldi	r17, 0x02	; 2
     354:	a0 e0       	ldi	r26, 0x00	; 0
     356:	b1 e0       	ldi	r27, 0x01	; 1
     358:	e2 ea       	ldi	r30, 0xA2	; 162
     35a:	f5 e3       	ldi	r31, 0x35	; 53
     35c:	00 e0       	ldi	r16, 0x00	; 0
     35e:	0b bf       	out	0x3b, r16	; 59
     360:	02 c0       	rjmp	.+4      	; 0x366 <__do_copy_data+0x14>
     362:	07 90       	elpm	r0, Z+
     364:	0d 92       	st	X+, r0
     366:	a4 35       	cpi	r26, 0x54	; 84
     368:	b1 07       	cpc	r27, r17
     36a:	d9 f7       	brne	.-10     	; 0x362 <__do_copy_data+0x10>

0000036c <__do_clear_bss>:
     36c:	26 e0       	ldi	r18, 0x06	; 6
     36e:	a4 e5       	ldi	r26, 0x54	; 84
     370:	b2 e0       	ldi	r27, 0x02	; 2
     372:	01 c0       	rjmp	.+2      	; 0x376 <.do_clear_bss_start>

00000374 <.do_clear_bss_loop>:
     374:	1d 92       	st	X+, r1

00000376 <.do_clear_bss_start>:
     376:	a6 38       	cpi	r26, 0x86	; 134
     378:	b2 07       	cpc	r27, r18
     37a:	e1 f7       	brne	.-8      	; 0x374 <.do_clear_bss_loop>
     37c:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <main>
     380:	0c 94 cf 1a 	jmp	0x359e	; 0x359e <_exit>

00000384 <__bad_interrupt>:
     384:	3d ce       	rjmp	.-902    	; 0x0 <__vectors>

00000386 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     386:	29 2f       	mov	r18, r25
     388:	33 27       	eor	r19, r19
     38a:	23 30       	cpi	r18, 0x03	; 3
     38c:	31 05       	cpc	r19, r1
     38e:	c9 f0       	breq	.+50     	; 0x3c2 <CALLBACK_USB_GetDescriptor+0x3c>
     390:	38 f4       	brcc	.+14     	; 0x3a0 <CALLBACK_USB_GetDescriptor+0x1a>
     392:	21 30       	cpi	r18, 0x01	; 1
     394:	31 05       	cpc	r19, r1
     396:	59 f0       	breq	.+22     	; 0x3ae <CALLBACK_USB_GetDescriptor+0x28>
     398:	22 30       	cpi	r18, 0x02	; 2
     39a:	31 05       	cpc	r19, r1
     39c:	69 f0       	breq	.+26     	; 0x3b8 <CALLBACK_USB_GetDescriptor+0x32>
     39e:	35 c0       	rjmp	.+106    	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     3a0:	21 32       	cpi	r18, 0x21	; 33
     3a2:	31 05       	cpc	r19, r1
     3a4:	41 f1       	breq	.+80     	; 0x3f6 <CALLBACK_USB_GetDescriptor+0x70>
     3a6:	22 32       	cpi	r18, 0x22	; 34
     3a8:	31 05       	cpc	r19, r1
     3aa:	51 f1       	breq	.+84     	; 0x400 <__LOCK_REGION_LENGTH__>
     3ac:	2e c0       	rjmp	.+92     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     3ae:	82 e1       	ldi	r24, 0x12	; 18
     3b0:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     3b2:	29 e3       	ldi	r18, 0x39	; 57
     3b4:	31 e0       	ldi	r19, 0x01	; 1
     3b6:	32 c0       	rjmp	.+100    	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     3b8:	89 e3       	ldi	r24, 0x39	; 57
     3ba:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     3bc:	20 e0       	ldi	r18, 0x00	; 0
     3be:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     3c0:	2d c0       	rjmp	.+90     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
		case DTYPE_String:
			switch (DescriptorNumber)
     3c2:	99 27       	eor	r25, r25
     3c4:	81 30       	cpi	r24, 0x01	; 1
     3c6:	91 05       	cpc	r25, r1
     3c8:	51 f0       	breq	.+20     	; 0x3de <CALLBACK_USB_GetDescriptor+0x58>
     3ca:	18 f0       	brcs	.+6      	; 0x3d2 <CALLBACK_USB_GetDescriptor+0x4c>
     3cc:	02 97       	sbiw	r24, 0x02	; 2
     3ce:	69 f0       	breq	.+26     	; 0x3ea <CALLBACK_USB_GetDescriptor+0x64>
     3d0:	21 c0       	rjmp	.+66     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     3d2:	ec ef       	ldi	r30, 0xFC	; 252
     3d4:	f0 e0       	ldi	r31, 0x00	; 0
     3d6:	84 91       	lpm	r24, Z
     3d8:	90 e0       	ldi	r25, 0x00	; 0
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case STRING_ID_Language:
					Address = &LanguageString;
     3da:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
     3dc:	1f c0       	rjmp	.+62     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     3de:	e2 ee       	ldi	r30, 0xE2	; 226
     3e0:	f0 e0       	ldi	r31, 0x00	; 0
     3e2:	84 91       	lpm	r24, Z
     3e4:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
     3e6:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
     3e8:	19 c0       	rjmp	.+50     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     3ea:	e8 e9       	ldi	r30, 0x98	; 152
     3ec:	f0 e0       	ldi	r31, 0x00	; 0
     3ee:	84 91       	lpm	r24, Z
     3f0:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
     3f2:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
     3f4:	13 c0       	rjmp	.+38     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_KeyboardHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
     3f6:	89 e0       	ldi	r24, 0x09	; 9
     3f8:	90 e0       	ldi	r25, 0x00	; 0
					break;
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_KeyboardHID;
     3fa:	29 e2       	ldi	r18, 0x29	; 41
     3fc:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
     3fe:	0e c0       	rjmp	.+28     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
		case HID_DTYPE_Report:
			Address = &KeyboardReport;
			Size    = sizeof(KeyboardReport);
     400:	80 e4       	ldi	r24, 0x40	; 64
     402:	90 e0       	ldi	r25, 0x00	; 0
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_KeyboardHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &KeyboardReport;
     404:	2b e4       	ldi	r18, 0x4B	; 75
     406:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(KeyboardReport);
			break;
     408:	09 c0       	rjmp	.+18     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     40a:	80 e0       	ldi	r24, 0x00	; 0
     40c:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     40e:	20 e0       	ldi	r18, 0x00	; 0
     410:	30 e0       	ldi	r19, 0x00	; 0
     412:	04 c0       	rjmp	.+8      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
	uint16_t    Size    = NO_DESCRIPTOR;
     414:	80 e0       	ldi	r24, 0x00	; 0
     416:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     418:	20 e0       	ldi	r18, 0x00	; 0
     41a:	30 e0       	ldi	r19, 0x00	; 0
			Address = &KeyboardReport;
			Size    = sizeof(KeyboardReport);
			break;
	}

	*DescriptorAddress = Address;
     41c:	fa 01       	movw	r30, r20
     41e:	31 83       	std	Z+1, r19	; 0x01
     420:	20 83       	st	Z, r18
	return Size;
}
     422:	08 95       	ret

00000424 <disk_initialize>:

DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
	switch (pdrv) {
     424:	81 11       	cpse	r24, r1
     426:	02 c0       	rjmp	.+4      	; 0x42c <disk_initialize+0x8>
	case DRV_CFC :
		return cf_disk_initialize();
#endif
#ifdef DRV_MMC
	case DRV_MMC :
		return mmc_disk_initialize();
     428:	2f c1       	rjmp	.+606    	; 0x688 <mmc_disk_initialize>
     42a:	08 95       	ret
#endif
	}
	return STA_NOINIT;
     42c:	81 e0       	ldi	r24, 0x01	; 1
}
     42e:	08 95       	ret

00000430 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	/* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
     430:	0f 93       	push	r16
     432:	1f 93       	push	r17
     434:	fb 01       	movw	r30, r22
	switch (pdrv) {
     436:	81 11       	cpse	r24, r1
     438:	06 c0       	rjmp	.+12     	; 0x446 <disk_read+0x16>
     43a:	ba 01       	movw	r22, r20
     43c:	a9 01       	movw	r20, r18
     43e:	cf 01       	movw	r24, r30
	case DRV_CFC :
		return cf_disk_read(buff, sector, count);
#endif
#ifdef DRV_MMC
	case DRV_MMC :
		return mmc_disk_read(buff, sector, count);
     440:	98 01       	movw	r18, r16
     442:	e4 d1       	rcall	.+968    	; 0x80c <mmc_disk_read>
     444:	01 c0       	rjmp	.+2      	; 0x448 <disk_read+0x18>
#endif
	}
	return RES_PARERR;
     446:	84 e0       	ldi	r24, 0x04	; 4
}
     448:	1f 91       	pop	r17
     44a:	0f 91       	pop	r16
     44c:	08 95       	ret

0000044e <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count			/* Number of sectors to write */
)
{
     44e:	0f 93       	push	r16
     450:	1f 93       	push	r17
     452:	fb 01       	movw	r30, r22
	switch (pdrv) {
     454:	81 11       	cpse	r24, r1
     456:	06 c0       	rjmp	.+12     	; 0x464 <disk_write+0x16>
     458:	ba 01       	movw	r22, r20
     45a:	a9 01       	movw	r20, r18
     45c:	cf 01       	movw	r24, r30
	case DRV_CFC :
		return cf_disk_write(buff, sector, count);
#endif
#ifdef DRV_MMC
	case DRV_MMC :
		return mmc_disk_write(buff, sector, count);
     45e:	98 01       	movw	r18, r16
     460:	1f d2       	rcall	.+1086   	; 0x8a0 <mmc_disk_write>
     462:	01 c0       	rjmp	.+2      	; 0x466 <disk_write+0x18>
#endif
	}
	return RES_PARERR;
     464:	84 e0       	ldi	r24, 0x04	; 4
}
     466:	1f 91       	pop	r17
     468:	0f 91       	pop	r16
     46a:	08 95       	ret

0000046c <disk_ioctl>:
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
	switch (pdrv) {
     46c:	81 11       	cpse	r24, r1
     46e:	04 c0       	rjmp	.+8      	; 0x478 <disk_ioctl+0xc>
     470:	86 2f       	mov	r24, r22
	case DRV_CFC :
		return cf_disk_ioctl(cmd, buff);
#endif
#ifdef DRV_MMC
	case DRV_MMC :
		return mmc_disk_ioctl(cmd, buff);
     472:	ba 01       	movw	r22, r20
     474:	7e c2       	rjmp	.+1276   	; 0x972 <mmc_disk_ioctl>
     476:	08 95       	ret
#endif
	}
	return RES_PARERR;
     478:	84 e0       	ldi	r24, 0x04	; 4
}
     47a:	08 95       	ret

0000047c <disk_timerproc>:
{
#ifdef DRV_CFC
	cf_disk_timerproc();
#endif
#ifdef DRV_MMC
	mmc_disk_timerproc();
     47c:	b4 c5       	rjmp	.+2920   	; 0xfe6 <mmc_disk_timerproc>
     47e:	08 95       	ret

00000480 <power_off>:
/*-----------------------------------------------------------------------*/

DSTATUS mmc_disk_status (void)
{
	return Stat;
}
     480:	1c bc       	out	0x2c, r1	; 44
     482:	22 98       	cbi	0x04, 2	; 4
     484:	2a 98       	cbi	0x05, 2	; 5
     486:	08 95       	ret

00000488 <xchg_spi>:
     488:	8e bd       	out	0x2e, r24	; 46
     48a:	0d b4       	in	r0, 0x2d	; 45
     48c:	07 fe       	sbrs	r0, 7
     48e:	fd cf       	rjmp	.-6      	; 0x48a <xchg_spi+0x2>
     490:	8e b5       	in	r24, 0x2e	; 46
     492:	08 95       	ret

00000494 <wait_ready>:
     494:	9c 01       	movw	r18, r24
     496:	ad ec       	ldi	r26, 0xCD	; 205
     498:	bc ec       	ldi	r27, 0xCC	; 204
     49a:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <__umulhisi3>
     49e:	96 95       	lsr	r25
     4a0:	87 95       	ror	r24
     4a2:	96 95       	lsr	r25
     4a4:	87 95       	ror	r24
     4a6:	96 95       	lsr	r25
     4a8:	87 95       	ror	r24
     4aa:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <Timer2>
     4ae:	8f ef       	ldi	r24, 0xFF	; 255
     4b0:	eb df       	rcall	.-42     	; 0x488 <xchg_spi>
     4b2:	8f 3f       	cpi	r24, 0xFF	; 255
     4b4:	21 f0       	breq	.+8      	; 0x4be <wait_ready+0x2a>
     4b6:	90 91 55 02 	lds	r25, 0x0255	; 0x800255 <Timer2>
     4ba:	91 11       	cpse	r25, r1
     4bc:	f8 cf       	rjmp	.-16     	; 0x4ae <wait_ready+0x1a>
     4be:	21 e0       	ldi	r18, 0x01	; 1
     4c0:	30 e0       	ldi	r19, 0x00	; 0
     4c2:	8f 3f       	cpi	r24, 0xFF	; 255
     4c4:	11 f0       	breq	.+4      	; 0x4ca <wait_ready+0x36>
     4c6:	20 e0       	ldi	r18, 0x00	; 0
     4c8:	30 e0       	ldi	r19, 0x00	; 0
     4ca:	c9 01       	movw	r24, r18
     4cc:	08 95       	ret

000004ce <deselect>:
     4ce:	28 9a       	sbi	0x05, 0	; 5
     4d0:	8f ef       	ldi	r24, 0xFF	; 255
     4d2:	da cf       	rjmp	.-76     	; 0x488 <xchg_spi>
     4d4:	08 95       	ret

000004d6 <select>:
     4d6:	cf 93       	push	r28
     4d8:	df 93       	push	r29
     4da:	28 98       	cbi	0x05, 0	; 5
     4dc:	8f ef       	ldi	r24, 0xFF	; 255
     4de:	d4 df       	rcall	.-88     	; 0x488 <xchg_spi>
     4e0:	84 ef       	ldi	r24, 0xF4	; 244
     4e2:	91 e0       	ldi	r25, 0x01	; 1
     4e4:	d7 df       	rcall	.-82     	; 0x494 <wait_ready>
     4e6:	ec 01       	movw	r28, r24
     4e8:	89 2b       	or	r24, r25
     4ea:	11 f4       	brne	.+4      	; 0x4f0 <select+0x1a>
     4ec:	f0 df       	rcall	.-32     	; 0x4ce <deselect>
     4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <select+0x1e>
     4f0:	c1 e0       	ldi	r28, 0x01	; 1
     4f2:	d0 e0       	ldi	r29, 0x00	; 0
     4f4:	ce 01       	movw	r24, r28
     4f6:	df 91       	pop	r29
     4f8:	cf 91       	pop	r28
     4fa:	08 95       	ret

000004fc <rcvr_datablock>:
     4fc:	0f 93       	push	r16
     4fe:	1f 93       	push	r17
     500:	cf 93       	push	r28
     502:	df 93       	push	r29
     504:	08 2f       	mov	r16, r24
     506:	19 2f       	mov	r17, r25
     508:	eb 01       	movw	r28, r22
     50a:	84 e1       	ldi	r24, 0x14	; 20
     50c:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <Timer1>
     510:	8f ef       	ldi	r24, 0xFF	; 255
     512:	ba df       	rcall	.-140    	; 0x488 <xchg_spi>
     514:	8f 3f       	cpi	r24, 0xFF	; 255
     516:	39 f4       	brne	.+14     	; 0x526 <rcvr_datablock+0x2a>
     518:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <Timer1>
     51c:	81 11       	cpse	r24, r1
     51e:	f8 cf       	rjmp	.-16     	; 0x510 <rcvr_datablock+0x14>
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	20 c0       	rjmp	.+64     	; 0x566 <rcvr_datablock+0x6a>
     526:	8e 3f       	cpi	r24, 0xFE	; 254
     528:	e1 f4       	brne	.+56     	; 0x562 <rcvr_datablock+0x66>
     52a:	e0 2f       	mov	r30, r16
     52c:	f1 2f       	mov	r31, r17
     52e:	8f ef       	ldi	r24, 0xFF	; 255
     530:	8e bd       	out	0x2e, r24	; 46
     532:	0d b4       	in	r0, 0x2d	; 45
     534:	07 fe       	sbrs	r0, 7
     536:	fd cf       	rjmp	.-6      	; 0x532 <rcvr_datablock+0x36>
     538:	9e b5       	in	r25, 0x2e	; 46
     53a:	df 01       	movw	r26, r30
     53c:	90 83       	st	Z, r25
     53e:	8e bd       	out	0x2e, r24	; 46
     540:	0d b4       	in	r0, 0x2d	; 45
     542:	07 fe       	sbrs	r0, 7
     544:	fd cf       	rjmp	.-6      	; 0x540 <rcvr_datablock+0x44>
     546:	9e b5       	in	r25, 0x2e	; 46
     548:	11 96       	adiw	r26, 0x01	; 1
     54a:	9c 93       	st	X, r25
     54c:	22 97       	sbiw	r28, 0x02	; 2
     54e:	32 96       	adiw	r30, 0x02	; 2
     550:	20 97       	sbiw	r28, 0x00	; 0
     552:	71 f7       	brne	.-36     	; 0x530 <rcvr_datablock+0x34>
     554:	8f ef       	ldi	r24, 0xFF	; 255
     556:	98 df       	rcall	.-208    	; 0x488 <xchg_spi>
     558:	8f ef       	ldi	r24, 0xFF	; 255
     55a:	96 df       	rcall	.-212    	; 0x488 <xchg_spi>
     55c:	81 e0       	ldi	r24, 0x01	; 1
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	02 c0       	rjmp	.+4      	; 0x566 <rcvr_datablock+0x6a>
     562:	80 e0       	ldi	r24, 0x00	; 0
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	df 91       	pop	r29
     568:	cf 91       	pop	r28
     56a:	1f 91       	pop	r17
     56c:	0f 91       	pop	r16
     56e:	08 95       	ret

00000570 <xmit_datablock>:
     570:	1f 93       	push	r17
     572:	cf 93       	push	r28
     574:	df 93       	push	r29
     576:	ec 01       	movw	r28, r24
     578:	16 2f       	mov	r17, r22
     57a:	84 ef       	ldi	r24, 0xF4	; 244
     57c:	91 e0       	ldi	r25, 0x01	; 1
     57e:	8a df       	rcall	.-236    	; 0x494 <wait_ready>
     580:	00 97       	sbiw	r24, 0x00	; 0
     582:	41 f1       	breq	.+80     	; 0x5d4 <xmit_datablock+0x64>
     584:	81 2f       	mov	r24, r17
     586:	80 df       	rcall	.-256    	; 0x488 <xchg_spi>
     588:	1d 3f       	cpi	r17, 0xFD	; 253
     58a:	11 f1       	breq	.+68     	; 0x5d0 <xmit_datablock+0x60>
     58c:	fe 01       	movw	r30, r28
     58e:	9e 01       	movw	r18, r28
     590:	3e 5f       	subi	r19, 0xFE	; 254
     592:	df 01       	movw	r26, r30
     594:	90 81       	ld	r25, Z
     596:	9e bd       	out	0x2e, r25	; 46
     598:	0d b4       	in	r0, 0x2d	; 45
     59a:	07 fe       	sbrs	r0, 7
     59c:	fd cf       	rjmp	.-6      	; 0x598 <xmit_datablock+0x28>
     59e:	11 96       	adiw	r26, 0x01	; 1
     5a0:	9c 91       	ld	r25, X
     5a2:	9e bd       	out	0x2e, r25	; 46
     5a4:	0d b4       	in	r0, 0x2d	; 45
     5a6:	07 fe       	sbrs	r0, 7
     5a8:	fd cf       	rjmp	.-6      	; 0x5a4 <xmit_datablock+0x34>
     5aa:	32 96       	adiw	r30, 0x02	; 2
     5ac:	e2 17       	cp	r30, r18
     5ae:	f3 07       	cpc	r31, r19
     5b0:	81 f7       	brne	.-32     	; 0x592 <xmit_datablock+0x22>
     5b2:	8f ef       	ldi	r24, 0xFF	; 255
     5b4:	69 df       	rcall	.-302    	; 0x488 <xchg_spi>
     5b6:	8f ef       	ldi	r24, 0xFF	; 255
     5b8:	67 df       	rcall	.-306    	; 0x488 <xchg_spi>
     5ba:	8f ef       	ldi	r24, 0xFF	; 255
     5bc:	65 df       	rcall	.-310    	; 0x488 <xchg_spi>
     5be:	8f 71       	andi	r24, 0x1F	; 31
     5c0:	31 e0       	ldi	r19, 0x01	; 1
     5c2:	20 e0       	ldi	r18, 0x00	; 0
     5c4:	85 30       	cpi	r24, 0x05	; 5
     5c6:	09 f0       	breq	.+2      	; 0x5ca <xmit_datablock+0x5a>
     5c8:	30 e0       	ldi	r19, 0x00	; 0
     5ca:	83 2f       	mov	r24, r19
     5cc:	92 2f       	mov	r25, r18
     5ce:	02 c0       	rjmp	.+4      	; 0x5d4 <xmit_datablock+0x64>
     5d0:	81 e0       	ldi	r24, 0x01	; 1
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	df 91       	pop	r29
     5d6:	cf 91       	pop	r28
     5d8:	1f 91       	pop	r17
     5da:	08 95       	ret

000005dc <send_cmd>:
     5dc:	ff 92       	push	r15
     5de:	0f 93       	push	r16
     5e0:	1f 93       	push	r17
     5e2:	cf 93       	push	r28
     5e4:	df 93       	push	r29
     5e6:	c8 2f       	mov	r28, r24
     5e8:	d4 2f       	mov	r29, r20
     5ea:	15 2f       	mov	r17, r21
     5ec:	06 2f       	mov	r16, r22
     5ee:	f7 2e       	mov	r15, r23
     5f0:	88 23       	and	r24, r24
     5f2:	4c f4       	brge	.+18     	; 0x606 <send_cmd+0x2a>
     5f4:	40 e0       	ldi	r20, 0x00	; 0
     5f6:	50 e0       	ldi	r21, 0x00	; 0
     5f8:	ba 01       	movw	r22, r20
     5fa:	87 e3       	ldi	r24, 0x37	; 55
     5fc:	ef df       	rcall	.-34     	; 0x5dc <send_cmd>
     5fe:	82 30       	cpi	r24, 0x02	; 2
     600:	08 f0       	brcs	.+2      	; 0x604 <send_cmd+0x28>
     602:	3c c0       	rjmp	.+120    	; 0x67c <send_cmd+0xa0>
     604:	cf 77       	andi	r28, 0x7F	; 127
     606:	cc 30       	cpi	r28, 0x0C	; 12
     608:	f1 f0       	breq	.+60     	; 0x646 <send_cmd+0x6a>
     60a:	61 df       	rcall	.-318    	; 0x4ce <deselect>
     60c:	64 df       	rcall	.-312    	; 0x4d6 <select>
     60e:	89 2b       	or	r24, r25
     610:	c1 f0       	breq	.+48     	; 0x642 <send_cmd+0x66>
     612:	8c 2f       	mov	r24, r28
     614:	80 64       	ori	r24, 0x40	; 64
     616:	38 df       	rcall	.-400    	; 0x488 <xchg_spi>
     618:	8f 2d       	mov	r24, r15
     61a:	36 df       	rcall	.-404    	; 0x488 <xchg_spi>
     61c:	80 2f       	mov	r24, r16
     61e:	34 df       	rcall	.-408    	; 0x488 <xchg_spi>
     620:	81 2f       	mov	r24, r17
     622:	32 df       	rcall	.-412    	; 0x488 <xchg_spi>
     624:	8d 2f       	mov	r24, r29
     626:	30 df       	rcall	.-416    	; 0x488 <xchg_spi>
     628:	cc 23       	and	r28, r28
     62a:	29 f1       	breq	.+74     	; 0x676 <send_cmd+0x9a>
     62c:	21 c0       	rjmp	.+66     	; 0x670 <send_cmd+0x94>
     62e:	8f ef       	ldi	r24, 0xFF	; 255
     630:	2b df       	rcall	.-426    	; 0x488 <xchg_spi>
     632:	ca e0       	ldi	r28, 0x0A	; 10
     634:	8f ef       	ldi	r24, 0xFF	; 255
     636:	28 df       	rcall	.-432    	; 0x488 <xchg_spi>
     638:	88 23       	and	r24, r24
     63a:	04 f5       	brge	.+64     	; 0x67c <send_cmd+0xa0>
     63c:	c1 50       	subi	r28, 0x01	; 1
     63e:	d1 f7       	brne	.-12     	; 0x634 <send_cmd+0x58>
     640:	1d c0       	rjmp	.+58     	; 0x67c <send_cmd+0xa0>
     642:	8f ef       	ldi	r24, 0xFF	; 255
     644:	1b c0       	rjmp	.+54     	; 0x67c <send_cmd+0xa0>
     646:	8c e4       	ldi	r24, 0x4C	; 76
     648:	1f df       	rcall	.-450    	; 0x488 <xchg_spi>
     64a:	8f 2d       	mov	r24, r15
     64c:	1d df       	rcall	.-454    	; 0x488 <xchg_spi>
     64e:	80 2f       	mov	r24, r16
     650:	1b df       	rcall	.-458    	; 0x488 <xchg_spi>
     652:	81 2f       	mov	r24, r17
     654:	19 df       	rcall	.-462    	; 0x488 <xchg_spi>
     656:	8d 2f       	mov	r24, r29
     658:	17 df       	rcall	.-466    	; 0x488 <xchg_spi>
     65a:	81 e0       	ldi	r24, 0x01	; 1
     65c:	15 df       	rcall	.-470    	; 0x488 <xchg_spi>
     65e:	cc 30       	cpi	r28, 0x0C	; 12
     660:	31 f3       	breq	.-52     	; 0x62e <send_cmd+0x52>
     662:	e7 cf       	rjmp	.-50     	; 0x632 <send_cmd+0x56>
     664:	87 e8       	ldi	r24, 0x87	; 135
     666:	10 df       	rcall	.-480    	; 0x488 <xchg_spi>
     668:	e4 cf       	rjmp	.-56     	; 0x632 <send_cmd+0x56>
     66a:	81 e0       	ldi	r24, 0x01	; 1
     66c:	0d df       	rcall	.-486    	; 0x488 <xchg_spi>
     66e:	e1 cf       	rjmp	.-62     	; 0x632 <send_cmd+0x56>
     670:	c8 30       	cpi	r28, 0x08	; 8
     672:	c1 f3       	breq	.-16     	; 0x664 <send_cmd+0x88>
     674:	fa cf       	rjmp	.-12     	; 0x66a <send_cmd+0x8e>
     676:	85 e9       	ldi	r24, 0x95	; 149
     678:	07 df       	rcall	.-498    	; 0x488 <xchg_spi>
     67a:	db cf       	rjmp	.-74     	; 0x632 <send_cmd+0x56>
     67c:	df 91       	pop	r29
     67e:	cf 91       	pop	r28
     680:	1f 91       	pop	r17
     682:	0f 91       	pop	r16
     684:	ff 90       	pop	r15
     686:	08 95       	ret

00000688 <mmc_disk_initialize>:
     688:	cf 92       	push	r12
     68a:	df 92       	push	r13
     68c:	ef 92       	push	r14
     68e:	ff 92       	push	r15
     690:	0f 93       	push	r16
     692:	1f 93       	push	r17
     694:	cf 93       	push	r28
     696:	df 93       	push	r29
     698:	00 d0       	rcall	.+0      	; 0x69a <mmc_disk_initialize+0x12>
     69a:	00 d0       	rcall	.+0      	; 0x69c <mmc_disk_initialize+0x14>
     69c:	cd b7       	in	r28, 0x3d	; 61
     69e:	de b7       	in	r29, 0x3e	; 62
     6a0:	ef de       	rcall	.-546    	; 0x480 <power_off>
     6a2:	8a e0       	ldi	r24, 0x0A	; 10
     6a4:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <Timer1>
     6a8:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <Timer1>
     6ac:	81 11       	cpse	r24, r1
     6ae:	fc cf       	rjmp	.-8      	; 0x6a8 <mmc_disk_initialize+0x20>
     6b0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     6b4:	81 ff       	sbrs	r24, 1
     6b6:	03 c0       	rjmp	.+6      	; 0x6be <mmc_disk_initialize+0x36>
     6b8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     6bc:	9a c0       	rjmp	.+308    	; 0x7f2 <mmc_disk_initialize+0x16a>
     6be:	87 e0       	ldi	r24, 0x07	; 7
     6c0:	85 b9       	out	0x05, r24	; 5
     6c2:	84 b9       	out	0x04, r24	; 4
     6c4:	83 e5       	ldi	r24, 0x53	; 83
     6c6:	8c bd       	out	0x2c, r24	; 44
     6c8:	82 e5       	ldi	r24, 0x52	; 82
     6ca:	8c bd       	out	0x2c, r24	; 44
     6cc:	1a e0       	ldi	r17, 0x0A	; 10
     6ce:	8f ef       	ldi	r24, 0xFF	; 255
     6d0:	db de       	rcall	.-586    	; 0x488 <xchg_spi>
     6d2:	11 50       	subi	r17, 0x01	; 1
     6d4:	e1 f7       	brne	.-8      	; 0x6ce <mmc_disk_initialize+0x46>
     6d6:	40 e0       	ldi	r20, 0x00	; 0
     6d8:	50 e0       	ldi	r21, 0x00	; 0
     6da:	ba 01       	movw	r22, r20
     6dc:	80 e0       	ldi	r24, 0x00	; 0
     6de:	7e df       	rcall	.-260    	; 0x5dc <send_cmd>
     6e0:	81 30       	cpi	r24, 0x01	; 1
     6e2:	09 f0       	breq	.+2      	; 0x6e6 <mmc_disk_initialize+0x5e>
     6e4:	82 c0       	rjmp	.+260    	; 0x7ea <mmc_disk_initialize+0x162>
     6e6:	84 e6       	ldi	r24, 0x64	; 100
     6e8:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <Timer1>
     6ec:	4a ea       	ldi	r20, 0xAA	; 170
     6ee:	51 e0       	ldi	r21, 0x01	; 1
     6f0:	60 e0       	ldi	r22, 0x00	; 0
     6f2:	70 e0       	ldi	r23, 0x00	; 0
     6f4:	88 e0       	ldi	r24, 0x08	; 8
     6f6:	72 df       	rcall	.-284    	; 0x5dc <send_cmd>
     6f8:	81 30       	cpi	r24, 0x01	; 1
     6fa:	09 f0       	breq	.+2      	; 0x6fe <mmc_disk_initialize+0x76>
     6fc:	3d c0       	rjmp	.+122    	; 0x778 <mmc_disk_initialize+0xf0>
     6fe:	ce 01       	movw	r24, r28
     700:	01 96       	adiw	r24, 0x01	; 1
     702:	6c 01       	movw	r12, r24
     704:	7e 01       	movw	r14, r28
     706:	95 e0       	ldi	r25, 0x05	; 5
     708:	e9 0e       	add	r14, r25
     70a:	f1 1c       	adc	r15, r1
     70c:	86 01       	movw	r16, r12
     70e:	8f ef       	ldi	r24, 0xFF	; 255
     710:	bb de       	rcall	.-650    	; 0x488 <xchg_spi>
     712:	f8 01       	movw	r30, r16
     714:	81 93       	st	Z+, r24
     716:	8f 01       	movw	r16, r30
     718:	ee 16       	cp	r14, r30
     71a:	ff 06       	cpc	r15, r31
     71c:	c1 f7       	brne	.-16     	; 0x70e <mmc_disk_initialize+0x86>
     71e:	8b 81       	ldd	r24, Y+3	; 0x03
     720:	81 30       	cpi	r24, 0x01	; 1
     722:	09 f0       	breq	.+2      	; 0x726 <mmc_disk_initialize+0x9e>
     724:	62 c0       	rjmp	.+196    	; 0x7ea <mmc_disk_initialize+0x162>
     726:	8c 81       	ldd	r24, Y+4	; 0x04
     728:	8a 3a       	cpi	r24, 0xAA	; 170
     72a:	09 f0       	breq	.+2      	; 0x72e <mmc_disk_initialize+0xa6>
     72c:	5e c0       	rjmp	.+188    	; 0x7ea <mmc_disk_initialize+0x162>
     72e:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <Timer1>
     732:	88 23       	and	r24, r24
     734:	41 f0       	breq	.+16     	; 0x746 <mmc_disk_initialize+0xbe>
     736:	40 e0       	ldi	r20, 0x00	; 0
     738:	50 e0       	ldi	r21, 0x00	; 0
     73a:	60 e0       	ldi	r22, 0x00	; 0
     73c:	70 e4       	ldi	r23, 0x40	; 64
     73e:	89 ea       	ldi	r24, 0xA9	; 169
     740:	4d df       	rcall	.-358    	; 0x5dc <send_cmd>
     742:	81 11       	cpse	r24, r1
     744:	f4 cf       	rjmp	.-24     	; 0x72e <mmc_disk_initialize+0xa6>
     746:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <Timer1>
     74a:	88 23       	and	r24, r24
     74c:	09 f4       	brne	.+2      	; 0x750 <mmc_disk_initialize+0xc8>
     74e:	4d c0       	rjmp	.+154    	; 0x7ea <mmc_disk_initialize+0x162>
     750:	40 e0       	ldi	r20, 0x00	; 0
     752:	50 e0       	ldi	r21, 0x00	; 0
     754:	ba 01       	movw	r22, r20
     756:	8a e3       	ldi	r24, 0x3A	; 58
     758:	41 df       	rcall	.-382    	; 0x5dc <send_cmd>
     75a:	81 11       	cpse	r24, r1
     75c:	46 c0       	rjmp	.+140    	; 0x7ea <mmc_disk_initialize+0x162>
     75e:	8f ef       	ldi	r24, 0xFF	; 255
     760:	93 de       	rcall	.-730    	; 0x488 <xchg_spi>
     762:	f6 01       	movw	r30, r12
     764:	81 93       	st	Z+, r24
     766:	6f 01       	movw	r12, r30
     768:	ee 16       	cp	r14, r30
     76a:	ff 06       	cpc	r15, r31
     76c:	c1 f7       	brne	.-16     	; 0x75e <mmc_disk_initialize+0xd6>
     76e:	89 81       	ldd	r24, Y+1	; 0x01
     770:	86 fd       	sbrc	r24, 6
     772:	36 c0       	rjmp	.+108    	; 0x7e0 <mmc_disk_initialize+0x158>
     774:	84 e0       	ldi	r24, 0x04	; 4
     776:	35 c0       	rjmp	.+106    	; 0x7e2 <mmc_disk_initialize+0x15a>
     778:	40 e0       	ldi	r20, 0x00	; 0
     77a:	50 e0       	ldi	r21, 0x00	; 0
     77c:	ba 01       	movw	r22, r20
     77e:	89 ea       	ldi	r24, 0xA9	; 169
     780:	2d df       	rcall	.-422    	; 0x5dc <send_cmd>
     782:	82 30       	cpi	r24, 0x02	; 2
     784:	18 f0       	brcs	.+6      	; 0x78c <mmc_disk_initialize+0x104>
     786:	01 e0       	ldi	r16, 0x01	; 1
     788:	11 e0       	ldi	r17, 0x01	; 1
     78a:	02 c0       	rjmp	.+4      	; 0x790 <mmc_disk_initialize+0x108>
     78c:	02 e0       	ldi	r16, 0x02	; 2
     78e:	19 ea       	ldi	r17, 0xA9	; 169
     790:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <Timer1>
     794:	88 23       	and	r24, r24
     796:	39 f0       	breq	.+14     	; 0x7a6 <mmc_disk_initialize+0x11e>
     798:	40 e0       	ldi	r20, 0x00	; 0
     79a:	50 e0       	ldi	r21, 0x00	; 0
     79c:	ba 01       	movw	r22, r20
     79e:	81 2f       	mov	r24, r17
     7a0:	1d df       	rcall	.-454    	; 0x5dc <send_cmd>
     7a2:	81 11       	cpse	r24, r1
     7a4:	f5 cf       	rjmp	.-22     	; 0x790 <mmc_disk_initialize+0x108>
     7a6:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <Timer1>
     7aa:	88 23       	and	r24, r24
     7ac:	f1 f0       	breq	.+60     	; 0x7ea <mmc_disk_initialize+0x162>
     7ae:	40 e0       	ldi	r20, 0x00	; 0
     7b0:	52 e0       	ldi	r21, 0x02	; 2
     7b2:	60 e0       	ldi	r22, 0x00	; 0
     7b4:	70 e0       	ldi	r23, 0x00	; 0
     7b6:	80 e1       	ldi	r24, 0x10	; 16
     7b8:	11 df       	rcall	.-478    	; 0x5dc <send_cmd>
     7ba:	81 11       	cpse	r24, r1
     7bc:	16 c0       	rjmp	.+44     	; 0x7ea <mmc_disk_initialize+0x162>
     7be:	00 93 54 02 	sts	0x0254, r16	; 0x800254 <__data_end>
     7c2:	85 de       	rcall	.-758    	; 0x4ce <deselect>
     7c4:	00 23       	and	r16, r16
     7c6:	41 f0       	breq	.+16     	; 0x7d8 <mmc_disk_initialize+0x150>
     7c8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     7cc:	8e 7f       	andi	r24, 0xFE	; 254
     7ce:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     7d2:	81 e5       	ldi	r24, 0x51	; 81
     7d4:	8c bd       	out	0x2c, r24	; 44
     7d6:	01 c0       	rjmp	.+2      	; 0x7da <mmc_disk_initialize+0x152>
     7d8:	53 de       	rcall	.-858    	; 0x480 <power_off>
     7da:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     7de:	09 c0       	rjmp	.+18     	; 0x7f2 <mmc_disk_initialize+0x16a>
     7e0:	8c e0       	ldi	r24, 0x0C	; 12
     7e2:	80 93 54 02 	sts	0x0254, r24	; 0x800254 <__data_end>
     7e6:	73 de       	rcall	.-794    	; 0x4ce <deselect>
     7e8:	ef cf       	rjmp	.-34     	; 0x7c8 <mmc_disk_initialize+0x140>
     7ea:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <__data_end>
     7ee:	6f de       	rcall	.-802    	; 0x4ce <deselect>
     7f0:	f3 cf       	rjmp	.-26     	; 0x7d8 <mmc_disk_initialize+0x150>
     7f2:	0f 90       	pop	r0
     7f4:	0f 90       	pop	r0
     7f6:	0f 90       	pop	r0
     7f8:	0f 90       	pop	r0
     7fa:	df 91       	pop	r29
     7fc:	cf 91       	pop	r28
     7fe:	1f 91       	pop	r17
     800:	0f 91       	pop	r16
     802:	ff 90       	pop	r15
     804:	ef 90       	pop	r14
     806:	df 90       	pop	r13
     808:	cf 90       	pop	r12
     80a:	08 95       	ret

0000080c <mmc_disk_read>:
DRESULT mmc_disk_read (
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
     80c:	ff 92       	push	r15
     80e:	0f 93       	push	r16
     810:	1f 93       	push	r17
     812:	cf 93       	push	r28
     814:	df 93       	push	r29
     816:	8c 01       	movw	r16, r24
     818:	e9 01       	movw	r28, r18
	BYTE cmd;


	if (!count) return RES_PARERR;
     81a:	20 97       	sbiw	r28, 0x00	; 0
     81c:	c1 f1       	breq	.+112    	; 0x88e <mmc_disk_read+0x82>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
     81e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     822:	80 fd       	sbrc	r24, 0
     824:	36 c0       	rjmp	.+108    	; 0x892 <mmc_disk_read+0x86>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
     826:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <__data_end>
     82a:	83 fd       	sbrc	r24, 3
     82c:	09 c0       	rjmp	.+18     	; 0x840 <mmc_disk_read+0x34>
     82e:	03 2e       	mov	r0, r19
     830:	39 e0       	ldi	r19, 0x09	; 9
     832:	44 0f       	add	r20, r20
     834:	55 1f       	adc	r21, r21
     836:	66 1f       	adc	r22, r22
     838:	77 1f       	adc	r23, r23
     83a:	3a 95       	dec	r19
     83c:	d1 f7       	brne	.-12     	; 0x832 <mmc_disk_read+0x26>
     83e:	30 2d       	mov	r19, r0

	cmd = count > 1 ? CMD18 : CMD17;			/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
     840:	c2 30       	cpi	r28, 0x02	; 2
     842:	d1 05       	cpc	r29, r1
     844:	28 f4       	brcc	.+10     	; 0x850 <mmc_disk_read+0x44>
     846:	0f 2e       	mov	r0, r31
     848:	f1 e1       	ldi	r31, 0x11	; 17
     84a:	ff 2e       	mov	r15, r31
     84c:	f0 2d       	mov	r31, r0
     84e:	04 c0       	rjmp	.+8      	; 0x858 <mmc_disk_read+0x4c>
     850:	0f 2e       	mov	r0, r31
     852:	f2 e1       	ldi	r31, 0x12	; 18
     854:	ff 2e       	mov	r15, r31
     856:	f0 2d       	mov	r31, r0
	if (send_cmd(cmd, sector) == 0) {
     858:	8f 2d       	mov	r24, r15
     85a:	c0 de       	rcall	.-640    	; 0x5dc <send_cmd>
     85c:	81 11       	cpse	r24, r1
     85e:	11 c0       	rjmp	.+34     	; 0x882 <mmc_disk_read+0x76>
		do {
			if (!rcvr_datablock(buff, 512)) break;
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	72 e0       	ldi	r23, 0x02	; 2
     864:	c8 01       	movw	r24, r16
     866:	4a de       	rcall	.-876    	; 0x4fc <rcvr_datablock>
     868:	89 2b       	or	r24, r25
     86a:	19 f0       	breq	.+6      	; 0x872 <mmc_disk_read+0x66>
			buff += 512;
     86c:	1e 5f       	subi	r17, 0xFE	; 254
		} while (--count);
     86e:	21 97       	sbiw	r28, 0x01	; 1
     870:	b9 f7       	brne	.-18     	; 0x860 <mmc_disk_read+0x54>
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
     872:	82 e1       	ldi	r24, 0x12	; 18
     874:	f8 12       	cpse	r15, r24
     876:	05 c0       	rjmp	.+10     	; 0x882 <mmc_disk_read+0x76>
     878:	40 e0       	ldi	r20, 0x00	; 0
     87a:	50 e0       	ldi	r21, 0x00	; 0
     87c:	ba 01       	movw	r22, r20
     87e:	8c e0       	ldi	r24, 0x0C	; 12
	}
	deselect();
     880:	ad de       	rcall	.-678    	; 0x5dc <send_cmd>
     882:	25 de       	rcall	.-950    	; 0x4ce <deselect>

	return count ? RES_ERROR : RES_OK;
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	cd 2b       	or	r28, r29
     888:	29 f4       	brne	.+10     	; 0x894 <mmc_disk_read+0x88>
     88a:	80 e0       	ldi	r24, 0x00	; 0
     88c:	03 c0       	rjmp	.+6      	; 0x894 <mmc_disk_read+0x88>
)
{
	BYTE cmd;


	if (!count) return RES_PARERR;
     88e:	84 e0       	ldi	r24, 0x04	; 4
     890:	01 c0       	rjmp	.+2      	; 0x894 <mmc_disk_read+0x88>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
     892:	83 e0       	ldi	r24, 0x03	; 3
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
     894:	df 91       	pop	r29
     896:	cf 91       	pop	r28
     898:	1f 91       	pop	r17
     89a:	0f 91       	pop	r16
     89c:	ff 90       	pop	r15
     89e:	08 95       	ret

000008a0 <mmc_disk_write>:
DRESULT mmc_disk_write (
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
     8a0:	cf 92       	push	r12
     8a2:	df 92       	push	r13
     8a4:	ef 92       	push	r14
     8a6:	ff 92       	push	r15
     8a8:	0f 93       	push	r16
     8aa:	1f 93       	push	r17
     8ac:	cf 93       	push	r28
     8ae:	df 93       	push	r29
     8b0:	8c 01       	movw	r16, r24
     8b2:	6a 01       	movw	r12, r20
     8b4:	7b 01       	movw	r14, r22
     8b6:	e9 01       	movw	r28, r18
	if (!count) return RES_PARERR;
     8b8:	20 97       	sbiw	r28, 0x00	; 0
     8ba:	09 f4       	brne	.+2      	; 0x8be <mmc_disk_write+0x1e>
     8bc:	4c c0       	rjmp	.+152    	; 0x956 <mmc_disk_write+0xb6>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
     8be:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     8c2:	80 fd       	sbrc	r24, 0
     8c4:	4a c0       	rjmp	.+148    	; 0x95a <mmc_disk_write+0xba>
	if (Stat & STA_PROTECT) return RES_WRPRT;
     8c6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     8ca:	82 fd       	sbrc	r24, 2
     8cc:	48 c0       	rjmp	.+144    	; 0x95e <mmc_disk_write+0xbe>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
     8ce:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <__data_end>
     8d2:	83 fd       	sbrc	r24, 3
     8d4:	09 c0       	rjmp	.+18     	; 0x8e8 <mmc_disk_write+0x48>
     8d6:	0b 2e       	mov	r0, r27
     8d8:	b9 e0       	ldi	r27, 0x09	; 9
     8da:	cc 0c       	add	r12, r12
     8dc:	dd 1c       	adc	r13, r13
     8de:	ee 1c       	adc	r14, r14
     8e0:	ff 1c       	adc	r15, r15
     8e2:	ba 95       	dec	r27
     8e4:	d1 f7       	brne	.-12     	; 0x8da <mmc_disk_write+0x3a>
     8e6:	b0 2d       	mov	r27, r0

	if (count == 1) {	/* Single block write */
     8e8:	c1 30       	cpi	r28, 0x01	; 1
     8ea:	d1 05       	cpc	r29, r1
     8ec:	89 f4       	brne	.+34     	; 0x910 <mmc_disk_write+0x70>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
     8ee:	b7 01       	movw	r22, r14
     8f0:	a6 01       	movw	r20, r12
     8f2:	88 e1       	ldi	r24, 0x18	; 24
     8f4:	73 de       	rcall	.-794    	; 0x5dc <send_cmd>
     8f6:	81 11       	cpse	r24, r1
     8f8:	28 c0       	rjmp	.+80     	; 0x94a <mmc_disk_write+0xaa>
			&& xmit_datablock(buff, 0xFE)) {
     8fa:	6e ef       	ldi	r22, 0xFE	; 254
     8fc:	c8 01       	movw	r24, r16
     8fe:	38 de       	rcall	.-912    	; 0x570 <xmit_datablock>
     900:	31 e0       	ldi	r19, 0x01	; 1
     902:	20 e0       	ldi	r18, 0x00	; 0
     904:	89 2b       	or	r24, r25
     906:	09 f0       	breq	.+2      	; 0x90a <mmc_disk_write+0x6a>
     908:	30 e0       	ldi	r19, 0x00	; 0
     90a:	c3 2f       	mov	r28, r19
     90c:	d2 2f       	mov	r29, r18
     90e:	1d c0       	rjmp	.+58     	; 0x94a <mmc_disk_write+0xaa>
			count = 0;
		}
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
     910:	86 70       	andi	r24, 0x06	; 6
     912:	29 f0       	breq	.+10     	; 0x91e <mmc_disk_write+0x7e>
     914:	ae 01       	movw	r20, r28
     916:	60 e0       	ldi	r22, 0x00	; 0
     918:	70 e0       	ldi	r23, 0x00	; 0
     91a:	87 e9       	ldi	r24, 0x97	; 151
     91c:	5f de       	rcall	.-834    	; 0x5dc <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
     91e:	b7 01       	movw	r22, r14
     920:	a6 01       	movw	r20, r12
     922:	89 e1       	ldi	r24, 0x19	; 25
     924:	5b de       	rcall	.-842    	; 0x5dc <send_cmd>
     926:	81 11       	cpse	r24, r1
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
     928:	10 c0       	rjmp	.+32     	; 0x94a <mmc_disk_write+0xaa>
     92a:	6c ef       	ldi	r22, 0xFC	; 252
     92c:	c8 01       	movw	r24, r16
     92e:	20 de       	rcall	.-960    	; 0x570 <xmit_datablock>
     930:	89 2b       	or	r24, r25
     932:	19 f0       	breq	.+6      	; 0x93a <mmc_disk_write+0x9a>
				buff += 512;
     934:	1e 5f       	subi	r17, 0xFE	; 254
			} while (--count);
     936:	21 97       	sbiw	r28, 0x01	; 1
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
     938:	c1 f7       	brne	.-16     	; 0x92a <mmc_disk_write+0x8a>
     93a:	6d ef       	ldi	r22, 0xFD	; 253
     93c:	80 e0       	ldi	r24, 0x00	; 0
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	17 de       	rcall	.-978    	; 0x570 <xmit_datablock>
     942:	89 2b       	or	r24, r25
     944:	11 f4       	brne	.+4      	; 0x94a <mmc_disk_write+0xaa>
     946:	c1 e0       	ldi	r28, 0x01	; 1
		}
	}
	deselect();
     948:	d0 e0       	ldi	r29, 0x00	; 0
     94a:	c1 dd       	rcall	.-1150   	; 0x4ce <deselect>

	return count ? RES_ERROR : RES_OK;
     94c:	81 e0       	ldi	r24, 0x01	; 1
     94e:	cd 2b       	or	r28, r29
     950:	39 f4       	brne	.+14     	; 0x960 <mmc_disk_write+0xc0>
     952:	80 e0       	ldi	r24, 0x00	; 0
     954:	05 c0       	rjmp	.+10     	; 0x960 <mmc_disk_write+0xc0>
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
	if (!count) return RES_PARERR;
     956:	84 e0       	ldi	r24, 0x04	; 4
     958:	03 c0       	rjmp	.+6      	; 0x960 <mmc_disk_write+0xc0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
     95a:	83 e0       	ldi	r24, 0x03	; 3
     95c:	01 c0       	rjmp	.+2      	; 0x960 <mmc_disk_write+0xc0>
	if (Stat & STA_PROTECT) return RES_WRPRT;
     95e:	82 e0       	ldi	r24, 0x02	; 2
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
     960:	df 91       	pop	r29
     962:	cf 91       	pop	r28
     964:	1f 91       	pop	r17
     966:	0f 91       	pop	r16
     968:	ff 90       	pop	r15
     96a:	ef 90       	pop	r14
     96c:	df 90       	pop	r13
     96e:	cf 90       	pop	r12
     970:	08 95       	ret

00000972 <mmc_disk_ioctl>:
#if _USE_IOCTL
DRESULT mmc_disk_ioctl (
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
     972:	8f 92       	push	r8
     974:	9f 92       	push	r9
     976:	af 92       	push	r10
     978:	bf 92       	push	r11
     97a:	cf 92       	push	r12
     97c:	df 92       	push	r13
     97e:	ef 92       	push	r14
     980:	ff 92       	push	r15
     982:	0f 93       	push	r16
     984:	1f 93       	push	r17
     986:	cf 93       	push	r28
     988:	df 93       	push	r29
     98a:	cd b7       	in	r28, 0x3d	; 61
     98c:	de b7       	in	r29, 0x3e	; 62
     98e:	60 97       	sbiw	r28, 0x10	; 16
     990:	0f b6       	in	r0, 0x3f	; 63
     992:	f8 94       	cli
     994:	de bf       	out	0x3e, r29	; 62
     996:	0f be       	out	0x3f, r0	; 63
     998:	cd bf       	out	0x3d, r28	; 61
	SDIO_CTRL *sdi;
	BYTE rc, *bp;
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;
     99a:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     99e:	90 fd       	sbrc	r25, 0
     9a0:	ff c2       	rjmp	.+1534   	; 0xfa0 <mmc_disk_ioctl+0x62e>
     9a2:	8b 01       	movw	r16, r22

	res = RES_ERROR;
	switch (cmd) {
     9a4:	83 33       	cpi	r24, 0x33	; 51
     9a6:	09 f4       	brne	.+2      	; 0x9aa <mmc_disk_ioctl+0x38>
     9a8:	94 c1       	rjmp	.+808    	; 0xcd2 <mmc_disk_ioctl+0x360>
     9aa:	98 f4       	brcc	.+38     	; 0x9d2 <mmc_disk_ioctl+0x60>
     9ac:	83 30       	cpi	r24, 0x03	; 3
     9ae:	09 f4       	brne	.+2      	; 0x9b2 <mmc_disk_ioctl+0x40>
     9b0:	a4 c0       	rjmp	.+328    	; 0xafa <mmc_disk_ioctl+0x188>
     9b2:	28 f4       	brcc	.+10     	; 0x9be <mmc_disk_ioctl+0x4c>
     9b4:	88 23       	and	r24, r24
     9b6:	09 f1       	breq	.+66     	; 0x9fa <mmc_disk_ioctl+0x88>
     9b8:	81 30       	cpi	r24, 0x01	; 1
     9ba:	31 f1       	breq	.+76     	; 0xa08 <mmc_disk_ioctl+0x96>
     9bc:	f3 c2       	rjmp	.+1510   	; 0xfa4 <mmc_disk_ioctl+0x632>
     9be:	87 30       	cpi	r24, 0x07	; 7
     9c0:	09 f4       	brne	.+2      	; 0x9c4 <mmc_disk_ioctl+0x52>
     9c2:	d9 c1       	rjmp	.+946    	; 0xd76 <mmc_disk_ioctl+0x404>
     9c4:	82 33       	cpi	r24, 0x32	; 50
     9c6:	09 f4       	brne	.+2      	; 0x9ca <mmc_disk_ioctl+0x58>
     9c8:	7e c1       	rjmp	.+764    	; 0xcc6 <mmc_disk_ioctl+0x354>
     9ca:	84 30       	cpi	r24, 0x04	; 4
     9cc:	09 f0       	breq	.+2      	; 0x9d0 <mmc_disk_ioctl+0x5e>
     9ce:	ea c2       	rjmp	.+1492   	; 0xfa4 <mmc_disk_ioctl+0x632>
     9d0:	2d c1       	rjmp	.+602    	; 0xc2c <mmc_disk_ioctl+0x2ba>
     9d2:	86 33       	cpi	r24, 0x36	; 54
     9d4:	09 f4       	brne	.+2      	; 0x9d8 <mmc_disk_ioctl+0x66>
     9d6:	ba c1       	rjmp	.+884    	; 0xd4c <mmc_disk_ioctl+0x3da>
     9d8:	38 f4       	brcc	.+14     	; 0x9e8 <mmc_disk_ioctl+0x76>
     9da:	84 33       	cpi	r24, 0x34	; 52
     9dc:	09 f4       	brne	.+2      	; 0x9e0 <mmc_disk_ioctl+0x6e>
     9de:	8c c1       	rjmp	.+792    	; 0xcf8 <mmc_disk_ioctl+0x386>
     9e0:	85 33       	cpi	r24, 0x35	; 53
     9e2:	09 f4       	brne	.+2      	; 0x9e6 <mmc_disk_ioctl+0x74>
     9e4:	9c c1       	rjmp	.+824    	; 0xd1e <mmc_disk_ioctl+0x3ac>
     9e6:	de c2       	rjmp	.+1468   	; 0xfa4 <mmc_disk_ioctl+0x632>
     9e8:	88 33       	cpi	r24, 0x38	; 56
     9ea:	09 f4       	brne	.+2      	; 0x9ee <mmc_disk_ioctl+0x7c>
     9ec:	35 c2       	rjmp	.+1130   	; 0xe58 <mmc_disk_ioctl+0x4e6>
     9ee:	08 f4       	brcc	.+2      	; 0x9f2 <mmc_disk_ioctl+0x80>
     9f0:	ca c1       	rjmp	.+916    	; 0xd86 <mmc_disk_ioctl+0x414>
     9f2:	89 33       	cpi	r24, 0x39	; 57
     9f4:	09 f4       	brne	.+2      	; 0x9f8 <mmc_disk_ioctl+0x86>
     9f6:	8f c2       	rjmp	.+1310   	; 0xf16 <mmc_disk_ioctl+0x5a4>
     9f8:	d5 c2       	rjmp	.+1450   	; 0xfa4 <mmc_disk_ioctl+0x632>
	case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
		if (select()) res = RES_OK;
     9fa:	6d dd       	rcall	.-1318   	; 0x4d6 <select>
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
     9fc:	11 e0       	ldi	r17, 0x01	; 1
     9fe:	89 2b       	or	r24, r25
     a00:	09 f0       	breq	.+2      	; 0xa04 <mmc_disk_ioctl+0x92>
	switch (cmd) {
	case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
		if (select()) res = RES_OK;
		deselect();
     a02:	10 e0       	ldi	r17, 0x00	; 0
     a04:	64 dd       	rcall	.-1336   	; 0x4ce <deselect>
		break;
     a06:	db c2       	rjmp	.+1462   	; 0xfbe <mmc_disk_ioctl+0x64c>

	case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
     a08:	40 e0       	ldi	r20, 0x00	; 0
     a0a:	50 e0       	ldi	r21, 0x00	; 0
     a0c:	ba 01       	movw	r22, r20
     a0e:	89 e0       	ldi	r24, 0x09	; 9
     a10:	e5 dd       	rcall	.-1078   	; 0x5dc <send_cmd>
     a12:	81 11       	cpse	r24, r1
     a14:	6d c0       	rjmp	.+218    	; 0xaf0 <mmc_disk_ioctl+0x17e>
     a16:	60 e1       	ldi	r22, 0x10	; 16
     a18:	70 e0       	ldi	r23, 0x00	; 0
     a1a:	ce 01       	movw	r24, r28
     a1c:	01 96       	adiw	r24, 0x01	; 1
     a1e:	6e dd       	rcall	.-1316   	; 0x4fc <rcvr_datablock>
     a20:	89 2b       	or	r24, r25
     a22:	09 f4       	brne	.+2      	; 0xa26 <mmc_disk_ioctl+0xb4>
     a24:	67 c0       	rjmp	.+206    	; 0xaf4 <mmc_disk_ioctl+0x182>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
     a26:	89 81       	ldd	r24, Y+1	; 0x01
     a28:	82 95       	swap	r24
     a2a:	86 95       	lsr	r24
     a2c:	86 95       	lsr	r24
     a2e:	83 70       	andi	r24, 0x03	; 3
     a30:	81 30       	cpi	r24, 0x01	; 1
     a32:	31 f5       	brne	.+76     	; 0xa80 <mmc_disk_ioctl+0x10e>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
				*(DWORD*)buff = csize << 10;
     a34:	29 85       	ldd	r18, Y+9	; 0x09
     a36:	30 e0       	ldi	r19, 0x00	; 0
     a38:	32 2f       	mov	r19, r18
     a3a:	22 27       	eor	r18, r18
     a3c:	8a 85       	ldd	r24, Y+10	; 0x0a
     a3e:	28 0f       	add	r18, r24
     a40:	31 1d       	adc	r19, r1
     a42:	88 85       	ldd	r24, Y+8	; 0x08
     a44:	8f 73       	andi	r24, 0x3F	; 63
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	a0 e0       	ldi	r26, 0x00	; 0
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	dc 01       	movw	r26, r24
     a4e:	99 27       	eor	r25, r25
     a50:	88 27       	eor	r24, r24
     a52:	01 96       	adiw	r24, 0x01	; 1
     a54:	a1 1d       	adc	r26, r1
     a56:	b1 1d       	adc	r27, r1
     a58:	82 0f       	add	r24, r18
     a5a:	93 1f       	adc	r25, r19
     a5c:	a1 1d       	adc	r26, r1
     a5e:	b1 1d       	adc	r27, r1
     a60:	07 2e       	mov	r0, r23
     a62:	7a e0       	ldi	r23, 0x0A	; 10
     a64:	88 0f       	add	r24, r24
     a66:	99 1f       	adc	r25, r25
     a68:	aa 1f       	adc	r26, r26
     a6a:	bb 1f       	adc	r27, r27
     a6c:	7a 95       	dec	r23
     a6e:	d1 f7       	brne	.-12     	; 0xa64 <mmc_disk_ioctl+0xf2>
     a70:	70 2d       	mov	r23, r0
     a72:	f8 01       	movw	r30, r16
     a74:	80 83       	st	Z, r24
     a76:	91 83       	std	Z+1, r25	; 0x01
     a78:	a2 83       	std	Z+2, r26	; 0x02
     a7a:	b3 83       	std	Z+3, r27	; 0x03
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
				*(DWORD*)buff = csize << (n - 9);
			}
			res = RES_OK;
     a7c:	10 e0       	ldi	r17, 0x00	; 0
     a7e:	3b c0       	rjmp	.+118    	; 0xaf6 <mmc_disk_ioctl+0x184>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
				*(DWORD*)buff = csize << 10;
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
				*(DWORD*)buff = csize << (n - 9);
     a80:	89 85       	ldd	r24, Y+9	; 0x09
     a82:	82 95       	swap	r24
     a84:	86 95       	lsr	r24
     a86:	86 95       	lsr	r24
     a88:	83 70       	andi	r24, 0x03	; 3
     a8a:	28 85       	ldd	r18, Y+8	; 0x08
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	f4 e0       	ldi	r31, 0x04	; 4
     a90:	2f 9f       	mul	r18, r31
     a92:	80 0d       	add	r24, r0
     a94:	91 1d       	adc	r25, r1
     a96:	11 24       	eor	r1, r1
     a98:	9c 01       	movw	r18, r24
     a9a:	2f 5f       	subi	r18, 0xFF	; 255
     a9c:	3f 4f       	sbci	r19, 0xFF	; 255
     a9e:	9f 81       	ldd	r25, Y+7	; 0x07
     aa0:	93 70       	andi	r25, 0x03	; 3
     aa2:	89 2f       	mov	r24, r25
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	98 2f       	mov	r25, r24
     aa8:	88 27       	eor	r24, r24
     aaa:	99 0f       	add	r25, r25
     aac:	99 0f       	add	r25, r25
     aae:	82 0f       	add	r24, r18
     ab0:	93 1f       	adc	r25, r19
     ab2:	a0 e0       	ldi	r26, 0x00	; 0
     ab4:	b0 e0       	ldi	r27, 0x00	; 0
     ab6:	3e 81       	ldd	r19, Y+6	; 0x06
     ab8:	43 2f       	mov	r20, r19
     aba:	4f 70       	andi	r20, 0x0F	; 15
     abc:	3b 85       	ldd	r19, Y+11	; 0x0b
     abe:	23 2f       	mov	r18, r19
     ac0:	22 1f       	adc	r18, r18
     ac2:	22 27       	eor	r18, r18
     ac4:	22 1f       	adc	r18, r18
     ac6:	34 2f       	mov	r19, r20
     ac8:	32 0f       	add	r19, r18
     aca:	2a 85       	ldd	r18, Y+10	; 0x0a
     acc:	23 70       	andi	r18, 0x03	; 3
     ace:	22 0f       	add	r18, r18
     ad0:	23 0f       	add	r18, r19
     ad2:	27 50       	subi	r18, 0x07	; 7
     ad4:	04 c0       	rjmp	.+8      	; 0xade <mmc_disk_ioctl+0x16c>
     ad6:	88 0f       	add	r24, r24
     ad8:	99 1f       	adc	r25, r25
     ada:	aa 1f       	adc	r26, r26
     adc:	bb 1f       	adc	r27, r27
     ade:	2a 95       	dec	r18
     ae0:	d2 f7       	brpl	.-12     	; 0xad6 <mmc_disk_ioctl+0x164>
     ae2:	f8 01       	movw	r30, r16
     ae4:	80 83       	st	Z, r24
     ae6:	91 83       	std	Z+1, r25	; 0x01
     ae8:	a2 83       	std	Z+2, r26	; 0x02
     aea:	b3 83       	std	Z+3, r27	; 0x03
			}
			res = RES_OK;
     aec:	10 e0       	ldi	r17, 0x00	; 0
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
     aee:	03 c0       	rjmp	.+6      	; 0xaf6 <mmc_disk_ioctl+0x184>
     af0:	11 e0       	ldi	r17, 0x01	; 1
     af2:	01 c0       	rjmp	.+2      	; 0xaf6 <mmc_disk_ioctl+0x184>
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
				*(DWORD*)buff = csize << (n - 9);
			}
			res = RES_OK;
		}
		deselect();
     af4:	11 e0       	ldi	r17, 0x01	; 1
     af6:	eb dc       	rcall	.-1578   	; 0x4ce <deselect>
		break;
     af8:	62 c2       	rjmp	.+1220   	; 0xfbe <mmc_disk_ioctl+0x64c>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDv2? */
     afa:	f0 90 54 02 	lds	r15, 0x0254	; 0x800254 <__data_end>
     afe:	f2 fe       	sbrs	r15, 2
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
     b00:	2f c0       	rjmp	.+94     	; 0xb60 <mmc_disk_ioctl+0x1ee>
     b02:	40 e0       	ldi	r20, 0x00	; 0
     b04:	50 e0       	ldi	r21, 0x00	; 0
     b06:	ba 01       	movw	r22, r20
     b08:	8d e8       	ldi	r24, 0x8D	; 141
     b0a:	68 dd       	rcall	.-1328   	; 0x5dc <send_cmd>
     b0c:	81 11       	cpse	r24, r1
				xchg_spi(0xFF);
     b0e:	85 c0       	rjmp	.+266    	; 0xc1a <mmc_disk_ioctl+0x2a8>
     b10:	8f ef       	ldi	r24, 0xFF	; 255
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
     b12:	ba dc       	rcall	.-1676   	; 0x488 <xchg_spi>
     b14:	60 e1       	ldi	r22, 0x10	; 16
     b16:	70 e0       	ldi	r23, 0x00	; 0
     b18:	ce 01       	movw	r24, r28
     b1a:	01 96       	adiw	r24, 0x01	; 1
     b1c:	ef dc       	rcall	.-1570   	; 0x4fc <rcvr_datablock>
     b1e:	89 2b       	or	r24, r25
     b20:	09 f4       	brne	.+2      	; 0xb24 <mmc_disk_ioctl+0x1b2>
     b22:	7d c0       	rjmp	.+250    	; 0xc1e <mmc_disk_ioctl+0x2ac>
     b24:	0f 2e       	mov	r0, r31
     b26:	f0 e3       	ldi	r31, 0x30	; 48
     b28:	ff 2e       	mov	r15, r31
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
     b2a:	f0 2d       	mov	r31, r0
     b2c:	8f ef       	ldi	r24, 0xFF	; 255
     b2e:	ac dc       	rcall	.-1704   	; 0x488 <xchg_spi>
     b30:	fa 94       	dec	r15
     b32:	f1 10       	cpse	r15, r1
     b34:	fb cf       	rjmp	.-10     	; 0xb2c <mmc_disk_ioctl+0x1ba>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
     b36:	2b 85       	ldd	r18, Y+11	; 0x0b
     b38:	22 95       	swap	r18
     b3a:	2f 70       	andi	r18, 0x0F	; 15
     b3c:	80 e1       	ldi	r24, 0x10	; 16
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	a0 e0       	ldi	r26, 0x00	; 0
     b42:	b0 e0       	ldi	r27, 0x00	; 0
     b44:	04 c0       	rjmp	.+8      	; 0xb4e <mmc_disk_ioctl+0x1dc>
     b46:	88 0f       	add	r24, r24
     b48:	99 1f       	adc	r25, r25
     b4a:	aa 1f       	adc	r26, r26
     b4c:	bb 1f       	adc	r27, r27
     b4e:	2a 95       	dec	r18
     b50:	d2 f7       	brpl	.-12     	; 0xb46 <mmc_disk_ioctl+0x1d4>
     b52:	f8 01       	movw	r30, r16
     b54:	80 83       	st	Z, r24
     b56:	91 83       	std	Z+1, r25	; 0x01
     b58:	a2 83       	std	Z+2, r26	; 0x02
					res = RES_OK;
     b5a:	b3 83       	std	Z+3, r27	; 0x03
     b5c:	10 e0       	ldi	r17, 0x00	; 0
				}
			}
		} else {					/* SDv1 or MMCv3 */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
     b5e:	64 c0       	rjmp	.+200    	; 0xc28 <mmc_disk_ioctl+0x2b6>
     b60:	40 e0       	ldi	r20, 0x00	; 0
     b62:	50 e0       	ldi	r21, 0x00	; 0
     b64:	ba 01       	movw	r22, r20
     b66:	89 e0       	ldi	r24, 0x09	; 9
     b68:	39 dd       	rcall	.-1422   	; 0x5dc <send_cmd>
     b6a:	81 11       	cpse	r24, r1
     b6c:	5a c0       	rjmp	.+180    	; 0xc22 <mmc_disk_ioctl+0x2b0>
     b6e:	60 e1       	ldi	r22, 0x10	; 16
     b70:	70 e0       	ldi	r23, 0x00	; 0
     b72:	ce 01       	movw	r24, r28
     b74:	01 96       	adiw	r24, 0x01	; 1
     b76:	c2 dc       	rcall	.-1660   	; 0x4fc <rcvr_datablock>
     b78:	89 2b       	or	r24, r25
     b7a:	09 f4       	brne	.+2      	; 0xb7e <mmc_disk_ioctl+0x20c>
     b7c:	54 c0       	rjmp	.+168    	; 0xc26 <mmc_disk_ioctl+0x2b4>
				if (CardType & CT_SD1) {	/* SDv1 */
     b7e:	f1 fe       	sbrs	r15, 1
     b80:	22 c0       	rjmp	.+68     	; 0xbc6 <mmc_disk_ioctl+0x254>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
     b82:	8b 85       	ldd	r24, Y+11	; 0x0b
     b84:	8f 73       	andi	r24, 0x3F	; 63
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	9c 01       	movw	r18, r24
     b8a:	22 0f       	add	r18, r18
     b8c:	33 1f       	adc	r19, r19
     b8e:	8c 85       	ldd	r24, Y+12	; 0x0c
     b90:	88 1f       	adc	r24, r24
     b92:	88 27       	eor	r24, r24
     b94:	88 1f       	adc	r24, r24
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	01 96       	adiw	r24, 0x01	; 1
     b9a:	82 0f       	add	r24, r18
     b9c:	93 1f       	adc	r25, r19
     b9e:	2e 85       	ldd	r18, Y+14	; 0x0e
     ba0:	22 95       	swap	r18
     ba2:	26 95       	lsr	r18
     ba4:	26 95       	lsr	r18
     ba6:	23 70       	andi	r18, 0x03	; 3
     ba8:	21 50       	subi	r18, 0x01	; 1
     baa:	02 c0       	rjmp	.+4      	; 0xbb0 <mmc_disk_ioctl+0x23e>
     bac:	88 0f       	add	r24, r24
     bae:	99 1f       	adc	r25, r25
     bb0:	2a 95       	dec	r18
     bb2:	e2 f7       	brpl	.-8      	; 0xbac <mmc_disk_ioctl+0x23a>
     bb4:	a0 e0       	ldi	r26, 0x00	; 0
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	f8 01       	movw	r30, r16
     bba:	80 83       	st	Z, r24
     bbc:	91 83       	std	Z+1, r25	; 0x01
     bbe:	a2 83       	std	Z+2, r26	; 0x02
     bc0:	b3 83       	std	Z+3, r27	; 0x03
				} else {					/* MMCv3 */
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
     bc2:	10 e0       	ldi	r17, 0x00	; 0
     bc4:	31 c0       	rjmp	.+98     	; 0xc28 <mmc_disk_ioctl+0x2b6>
		} else {					/* SDv1 or MMCv3 */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
				if (CardType & CT_SD1) {	/* SDv1 */
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
				} else {					/* MMCv3 */
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
     bc6:	8c 85       	ldd	r24, Y+12	; 0x0c
     bc8:	28 2f       	mov	r18, r24
     bca:	23 70       	andi	r18, 0x03	; 3
     bcc:	30 e0       	ldi	r19, 0x00	; 0
     bce:	22 0f       	add	r18, r18
     bd0:	33 1f       	adc	r19, r19
     bd2:	22 0f       	add	r18, r18
     bd4:	33 1f       	adc	r19, r19
     bd6:	22 0f       	add	r18, r18
     bd8:	33 1f       	adc	r19, r19
     bda:	82 95       	swap	r24
     bdc:	86 95       	lsr	r24
     bde:	87 70       	andi	r24, 0x07	; 7
     be0:	28 0f       	add	r18, r24
     be2:	31 1d       	adc	r19, r1
     be4:	2f 5f       	subi	r18, 0xFF	; 255
     be6:	3f 4f       	sbci	r19, 0xFF	; 255
     be8:	8b 85       	ldd	r24, Y+11	; 0x0b
     bea:	8c 77       	andi	r24, 0x7C	; 124
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	95 95       	asr	r25
     bf0:	87 95       	ror	r24
     bf2:	95 95       	asr	r25
     bf4:	87 95       	ror	r24
     bf6:	01 96       	adiw	r24, 0x01	; 1
     bf8:	28 9f       	mul	r18, r24
     bfa:	a0 01       	movw	r20, r0
     bfc:	29 9f       	mul	r18, r25
     bfe:	50 0d       	add	r21, r0
     c00:	38 9f       	mul	r19, r24
     c02:	50 0d       	add	r21, r0
     c04:	11 24       	eor	r1, r1
     c06:	ca 01       	movw	r24, r20
     c08:	a0 e0       	ldi	r26, 0x00	; 0
     c0a:	b0 e0       	ldi	r27, 0x00	; 0
     c0c:	f8 01       	movw	r30, r16
     c0e:	80 83       	st	Z, r24
     c10:	91 83       	std	Z+1, r25	; 0x01
     c12:	a2 83       	std	Z+2, r26	; 0x02
				}
				res = RES_OK;
     c14:	b3 83       	std	Z+3, r27	; 0x03
     c16:	10 e0       	ldi	r17, 0x00	; 0
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
     c18:	07 c0       	rjmp	.+14     	; 0xc28 <mmc_disk_ioctl+0x2b6>
     c1a:	11 e0       	ldi	r17, 0x01	; 1
     c1c:	05 c0       	rjmp	.+10     	; 0xc28 <mmc_disk_ioctl+0x2b6>
     c1e:	11 e0       	ldi	r17, 0x01	; 1
     c20:	03 c0       	rjmp	.+6      	; 0xc28 <mmc_disk_ioctl+0x2b6>
     c22:	11 e0       	ldi	r17, 0x01	; 1
     c24:	01 c0       	rjmp	.+2      	; 0xc28 <mmc_disk_ioctl+0x2b6>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		deselect();
     c26:	11 e0       	ldi	r17, 0x01	; 1
		break;
     c28:	52 dc       	rcall	.-1884   	; 0x4ce <deselect>

	case CTRL_TRIM:		/* Erase a block of sectors (used when _USE_TRIM in ffconf.h is 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
     c2a:	c9 c1       	rjmp	.+914    	; 0xfbe <mmc_disk_ioctl+0x64c>
     c2c:	f0 90 54 02 	lds	r15, 0x0254	; 0x800254 <__data_end>
     c30:	8f 2d       	mov	r24, r15
     c32:	86 70       	andi	r24, 0x06	; 6
     c34:	09 f4       	brne	.+2      	; 0xc38 <mmc_disk_ioctl+0x2c6>
		if (mmc_disk_ioctl(MMC_GET_CSD, csd)) break;	/* Get CSD */
     c36:	b8 c1       	rjmp	.+880    	; 0xfa8 <mmc_disk_ioctl+0x636>
     c38:	be 01       	movw	r22, r28
     c3a:	6f 5f       	subi	r22, 0xFF	; 255
     c3c:	7f 4f       	sbci	r23, 0xFF	; 255
     c3e:	83 e3       	ldi	r24, 0x33	; 51
     c40:	98 de       	rcall	.-720    	; 0x972 <mmc_disk_ioctl>
     c42:	81 11       	cpse	r24, r1
     c44:	b3 c1       	rjmp	.+870    	; 0xfac <mmc_disk_ioctl+0x63a>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
     c46:	89 81       	ldd	r24, Y+1	; 0x01
     c48:	82 95       	swap	r24
     c4a:	86 95       	lsr	r24
     c4c:	86 95       	lsr	r24
     c4e:	83 70       	andi	r24, 0x03	; 3
     c50:	19 f4       	brne	.+6      	; 0xc58 <mmc_disk_ioctl+0x2e6>
     c52:	8b 85       	ldd	r24, Y+11	; 0x0b
     c54:	86 ff       	sbrs	r24, 6
     c56:	ac c1       	rjmp	.+856    	; 0xfb0 <mmc_disk_ioctl+0x63e>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
     c58:	f8 01       	movw	r30, r16
     c5a:	40 81       	ld	r20, Z
     c5c:	51 81       	ldd	r21, Z+1	; 0x01
     c5e:	62 81       	ldd	r22, Z+2	; 0x02
     c60:	73 81       	ldd	r23, Z+3	; 0x03
     c62:	84 80       	ldd	r8, Z+4	; 0x04
     c64:	95 80       	ldd	r9, Z+5	; 0x05
     c66:	a6 80       	ldd	r10, Z+6	; 0x06
     c68:	b7 80       	ldd	r11, Z+7	; 0x07
		if (!(CardType & CT_BLOCK)) {
     c6a:	f3 fc       	sbrc	r15, 3
     c6c:	12 c0       	rjmp	.+36     	; 0xc92 <mmc_disk_ioctl+0x320>
			st *= 512; ed *= 512;
     c6e:	03 2e       	mov	r0, r19
     c70:	39 e0       	ldi	r19, 0x09	; 9
     c72:	44 0f       	add	r20, r20
     c74:	55 1f       	adc	r21, r21
     c76:	66 1f       	adc	r22, r22
     c78:	77 1f       	adc	r23, r23
     c7a:	3a 95       	dec	r19
     c7c:	d1 f7       	brne	.-12     	; 0xc72 <mmc_disk_ioctl+0x300>
     c7e:	30 2d       	mov	r19, r0
     c80:	07 2e       	mov	r0, r23
     c82:	79 e0       	ldi	r23, 0x09	; 9
     c84:	88 0c       	add	r8, r8
     c86:	99 1c       	adc	r9, r9
     c88:	aa 1c       	adc	r10, r10
     c8a:	bb 1c       	adc	r11, r11
     c8c:	7a 95       	dec	r23
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
     c8e:	d1 f7       	brne	.-12     	; 0xc84 <mmc_disk_ioctl+0x312>
     c90:	70 2d       	mov	r23, r0
     c92:	80 e2       	ldi	r24, 0x20	; 32
     c94:	a3 dc       	rcall	.-1722   	; 0x5dc <send_cmd>
     c96:	81 11       	cpse	r24, r1
     c98:	8d c1       	rjmp	.+794    	; 0xfb4 <mmc_disk_ioctl+0x642>
     c9a:	b5 01       	movw	r22, r10
     c9c:	a4 01       	movw	r20, r8
     c9e:	81 e2       	ldi	r24, 0x21	; 33
     ca0:	9d dc       	rcall	.-1734   	; 0x5dc <send_cmd>
     ca2:	81 11       	cpse	r24, r1
     ca4:	89 c1       	rjmp	.+786    	; 0xfb8 <mmc_disk_ioctl+0x646>
     ca6:	40 e0       	ldi	r20, 0x00	; 0
     ca8:	50 e0       	ldi	r21, 0x00	; 0
     caa:	ba 01       	movw	r22, r20
     cac:	86 e2       	ldi	r24, 0x26	; 38
     cae:	96 dc       	rcall	.-1748   	; 0x5dc <send_cmd>
     cb0:	81 11       	cpse	r24, r1
     cb2:	84 c1       	rjmp	.+776    	; 0xfbc <mmc_disk_ioctl+0x64a>
     cb4:	80 e3       	ldi	r24, 0x30	; 48
     cb6:	95 e7       	ldi	r25, 0x75	; 117
	SDIO_CTRL *sdi;
	BYTE rc, *bp;
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;
     cb8:	ed db       	rcall	.-2086   	; 0x494 <wait_ready>
     cba:	11 e0       	ldi	r17, 0x01	; 1
     cbc:	89 2b       	or	r24, r25
     cbe:	09 f4       	brne	.+2      	; 0xcc2 <mmc_disk_ioctl+0x350>
     cc0:	7e c1       	rjmp	.+764    	; 0xfbe <mmc_disk_ioctl+0x64c>
		break;

	/* Following commands are never used by FatFs module */

	case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
		*ptr = CardType;
     cc2:	10 e0       	ldi	r17, 0x00	; 0
     cc4:	7c c1       	rjmp	.+760    	; 0xfbe <mmc_disk_ioctl+0x64c>
     cc6:	80 91 54 02 	lds	r24, 0x0254	; 0x800254 <__data_end>
		res = RES_OK;
     cca:	fb 01       	movw	r30, r22
		break;
     ccc:	80 83       	st	Z, r24

	case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
		if (send_cmd(CMD9, 0) == 0 && rcvr_datablock(ptr, 16)) {	/* READ_CSD */
     cce:	10 e0       	ldi	r17, 0x00	; 0
     cd0:	76 c1       	rjmp	.+748    	; 0xfbe <mmc_disk_ioctl+0x64c>
     cd2:	40 e0       	ldi	r20, 0x00	; 0
     cd4:	50 e0       	ldi	r21, 0x00	; 0
     cd6:	ba 01       	movw	r22, r20
     cd8:	89 e0       	ldi	r24, 0x09	; 9
     cda:	80 dc       	rcall	.-1792   	; 0x5dc <send_cmd>
     cdc:	81 11       	cpse	r24, r1
     cde:	09 c0       	rjmp	.+18     	; 0xcf2 <mmc_disk_ioctl+0x380>
     ce0:	60 e1       	ldi	r22, 0x10	; 16
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
     ce2:	70 e0       	ldi	r23, 0x00	; 0
     ce4:	c8 01       	movw	r24, r16
     ce6:	0a dc       	rcall	.-2028   	; 0x4fc <rcvr_datablock>
     ce8:	11 e0       	ldi	r17, 0x01	; 1
     cea:	89 2b       	or	r24, r25
     cec:	19 f0       	breq	.+6      	; 0xcf4 <mmc_disk_ioctl+0x382>

	case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
		if (send_cmd(CMD9, 0) == 0 && rcvr_datablock(ptr, 16)) {	/* READ_CSD */
			res = RES_OK;
		}
		deselect();
     cee:	10 e0       	ldi	r17, 0x00	; 0
		break;
     cf0:	01 c0       	rjmp	.+2      	; 0xcf4 <mmc_disk_ioctl+0x382>

	case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
		if (send_cmd(CMD10, 0) == 0 && rcvr_datablock(ptr, 16)) {	/* READ_CID */
     cf2:	11 e0       	ldi	r17, 0x01	; 1
     cf4:	ec db       	rcall	.-2088   	; 0x4ce <deselect>
     cf6:	63 c1       	rjmp	.+710    	; 0xfbe <mmc_disk_ioctl+0x64c>
     cf8:	40 e0       	ldi	r20, 0x00	; 0
     cfa:	50 e0       	ldi	r21, 0x00	; 0
     cfc:	ba 01       	movw	r22, r20
     cfe:	8a e0       	ldi	r24, 0x0A	; 10
     d00:	6d dc       	rcall	.-1830   	; 0x5dc <send_cmd>
     d02:	81 11       	cpse	r24, r1
     d04:	09 c0       	rjmp	.+18     	; 0xd18 <mmc_disk_ioctl+0x3a6>
     d06:	60 e1       	ldi	r22, 0x10	; 16
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
     d08:	70 e0       	ldi	r23, 0x00	; 0
     d0a:	c8 01       	movw	r24, r16
     d0c:	f7 db       	rcall	.-2066   	; 0x4fc <rcvr_datablock>
     d0e:	11 e0       	ldi	r17, 0x01	; 1
     d10:	89 2b       	or	r24, r25
     d12:	19 f0       	breq	.+6      	; 0xd1a <mmc_disk_ioctl+0x3a8>

	case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
		if (send_cmd(CMD10, 0) == 0 && rcvr_datablock(ptr, 16)) {	/* READ_CID */
			res = RES_OK;
		}
		deselect();
     d14:	10 e0       	ldi	r17, 0x00	; 0
		break;
     d16:	01 c0       	rjmp	.+2      	; 0xd1a <mmc_disk_ioctl+0x3a8>

	case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
		if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
     d18:	11 e0       	ldi	r17, 0x01	; 1
     d1a:	d9 db       	rcall	.-2126   	; 0x4ce <deselect>
     d1c:	50 c1       	rjmp	.+672    	; 0xfbe <mmc_disk_ioctl+0x64c>
     d1e:	40 e0       	ldi	r20, 0x00	; 0
     d20:	50 e0       	ldi	r21, 0x00	; 0
     d22:	ba 01       	movw	r22, r20
     d24:	8a e3       	ldi	r24, 0x3A	; 58
     d26:	5a dc       	rcall	.-1868   	; 0x5dc <send_cmd>
     d28:	81 11       	cpse	r24, r1
			for (n = 4; n; n--) *ptr++ = xchg_spi(0xFF);
     d2a:	0d c0       	rjmp	.+26     	; 0xd46 <mmc_disk_ioctl+0x3d4>
     d2c:	78 01       	movw	r14, r16
     d2e:	0c 5f       	subi	r16, 0xFC	; 252
     d30:	1f 4f       	sbci	r17, 0xFF	; 255
     d32:	8f ef       	ldi	r24, 0xFF	; 255
     d34:	a9 db       	rcall	.-2222   	; 0x488 <xchg_spi>
     d36:	f7 01       	movw	r30, r14
     d38:	81 93       	st	Z+, r24
			res = RES_OK;
     d3a:	7f 01       	movw	r14, r30
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
     d3c:	0e 17       	cp	r16, r30
	case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
		if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
			for (n = 4; n; n--) *ptr++ = xchg_spi(0xFF);
			res = RES_OK;
		}
		deselect();
     d3e:	1f 07       	cpc	r17, r31
     d40:	c1 f7       	brne	.-16     	; 0xd32 <mmc_disk_ioctl+0x3c0>
		break;
     d42:	10 e0       	ldi	r17, 0x00	; 0

	case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
		if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
     d44:	01 c0       	rjmp	.+2      	; 0xd48 <mmc_disk_ioctl+0x3d6>
     d46:	11 e0       	ldi	r17, 0x01	; 1
     d48:	c2 db       	rcall	.-2172   	; 0x4ce <deselect>
     d4a:	39 c1       	rjmp	.+626    	; 0xfbe <mmc_disk_ioctl+0x64c>
     d4c:	40 e0       	ldi	r20, 0x00	; 0
     d4e:	50 e0       	ldi	r21, 0x00	; 0
     d50:	ba 01       	movw	r22, r20
     d52:	8d e8       	ldi	r24, 0x8D	; 141
			xchg_spi(0xFF);
     d54:	43 dc       	rcall	.-1914   	; 0x5dc <send_cmd>
     d56:	81 11       	cpse	r24, r1
     d58:	0b c0       	rjmp	.+22     	; 0xd70 <mmc_disk_ioctl+0x3fe>
			if (rcvr_datablock(ptr, 64)) res = RES_OK;
     d5a:	8f ef       	ldi	r24, 0xFF	; 255
     d5c:	95 db       	rcall	.-2262   	; 0x488 <xchg_spi>
     d5e:	60 e4       	ldi	r22, 0x40	; 64
     d60:	70 e0       	ldi	r23, 0x00	; 0
     d62:	c8 01       	movw	r24, r16
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
     d64:	cb db       	rcall	.-2154   	; 0x4fc <rcvr_datablock>
     d66:	11 e0       	ldi	r17, 0x01	; 1
     d68:	89 2b       	or	r24, r25
     d6a:	19 f0       	breq	.+6      	; 0xd72 <mmc_disk_ioctl+0x400>
     d6c:	10 e0       	ldi	r17, 0x00	; 0
     d6e:	01 c0       	rjmp	.+2      	; 0xd72 <mmc_disk_ioctl+0x400>
	case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
		if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
			xchg_spi(0xFF);
			if (rcvr_datablock(ptr, 64)) res = RES_OK;
		}
		deselect();
     d70:	11 e0       	ldi	r17, 0x01	; 1
     d72:	ad db       	rcall	.-2214   	; 0x4ce <deselect>
		break;
     d74:	24 c1       	rjmp	.+584    	; 0xfbe <mmc_disk_ioctl+0x64c>

	case CTRL_POWER_OFF :	/* Power off */
		power_off();
     d76:	84 db       	rcall	.-2296   	; 0x480 <power_off>
     d78:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
		Stat |= STA_NOINIT;
     d7c:	81 60       	ori	r24, 0x01	; 1
     d7e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     d82:	10 e0       	ldi	r17, 0x00	; 0
		res = RES_OK;
     d84:	1c c1       	rjmp	.+568    	; 0xfbe <mmc_disk_ioctl+0x64c>
		break;
     d86:	fb 01       	movw	r30, r22
#if _USE_ISDIO
	case ISDIO_READ:
		sdi = buff;
		if (send_cmd(CMD48, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0) {
     d88:	43 81       	ldd	r20, Z+3	; 0x03
     d8a:	54 81       	ldd	r21, Z+4	; 0x04
     d8c:	65 81       	ldd	r22, Z+5	; 0x05
     d8e:	76 81       	ldd	r23, Z+6	; 0x06
     d90:	03 2e       	mov	r0, r19
     d92:	39 e0       	ldi	r19, 0x09	; 9
     d94:	44 0f       	add	r20, r20
     d96:	55 1f       	adc	r21, r21
     d98:	66 1f       	adc	r22, r22
     d9a:	77 1f       	adc	r23, r23
     d9c:	3a 95       	dec	r19
     d9e:	d1 f7       	brne	.-12     	; 0xd94 <mmc_disk_ioctl+0x422>
     da0:	30 2d       	mov	r19, r0
     da2:	70 68       	ori	r23, 0x80	; 128
     da4:	80 81       	ld	r24, Z
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	a0 e0       	ldi	r26, 0x00	; 0
     daa:	b0 e0       	ldi	r27, 0x00	; 0
     dac:	07 2e       	mov	r0, r23
     dae:	7c e1       	ldi	r23, 0x1C	; 28
     db0:	88 0f       	add	r24, r24
     db2:	99 1f       	adc	r25, r25
     db4:	aa 1f       	adc	r26, r26
     db6:	bb 1f       	adc	r27, r27
     db8:	7a 95       	dec	r23
     dba:	d1 f7       	brne	.-12     	; 0xdb0 <mmc_disk_ioctl+0x43e>
     dbc:	70 2d       	mov	r23, r0
     dbe:	48 2b       	or	r20, r24
     dc0:	59 2b       	or	r21, r25
     dc2:	6a 2b       	or	r22, r26
     dc4:	7b 2b       	or	r23, r27
     dc6:	81 81       	ldd	r24, Z+1	; 0x01
     dc8:	92 81       	ldd	r25, Z+2	; 0x02
     dca:	01 97       	sbiw	r24, 0x01	; 1
     dcc:	91 70       	andi	r25, 0x01	; 1
     dce:	a0 e0       	ldi	r26, 0x00	; 0
     dd0:	b0 e0       	ldi	r27, 0x00	; 0
     dd2:	48 2b       	or	r20, r24
     dd4:	59 2b       	or	r21, r25
     dd6:	6a 2b       	or	r22, r26
     dd8:	7b 2b       	or	r23, r27
     dda:	80 e3       	ldi	r24, 0x30	; 48
     ddc:	ff db       	rcall	.-2050   	; 0x5dc <send_cmd>
     dde:	81 11       	cpse	r24, r1
			for (Timer1 = 100; (rc = xchg_spi(0xFF)) == 0xFF && Timer1; ) ;
     de0:	34 c0       	rjmp	.+104    	; 0xe4a <mmc_disk_ioctl+0x4d8>
     de2:	84 e6       	ldi	r24, 0x64	; 100
     de4:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <Timer1>
     de8:	8f ef       	ldi	r24, 0xFF	; 255
     dea:	4e db       	rcall	.-2404   	; 0x488 <xchg_spi>
     dec:	8f 3f       	cpi	r24, 0xFF	; 255
     dee:	31 f4       	brne	.+12     	; 0xdfc <mmc_disk_ioctl+0x48a>
     df0:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <Timer1>
     df4:	81 11       	cpse	r24, r1
     df6:	f8 cf       	rjmp	.-16     	; 0xde8 <mmc_disk_ioctl+0x476>
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
     df8:	11 e0       	ldi	r17, 0x01	; 1
     dfa:	2c c0       	rjmp	.+88     	; 0xe54 <mmc_disk_ioctl+0x4e2>
#if _USE_ISDIO
	case ISDIO_READ:
		sdi = buff;
		if (send_cmd(CMD48, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0) {
			for (Timer1 = 100; (rc = xchg_spi(0xFF)) == 0xFF && Timer1; ) ;
			if (rc == 0xFE) {
     dfc:	8e 3f       	cpi	r24, 0xFE	; 254
				for (bp = sdi->data, dc = sdi->ndata; dc; dc--) *bp++ = xchg_spi(0xFF);
     dfe:	39 f5       	brne	.+78     	; 0xe4e <mmc_disk_ioctl+0x4dc>
     e00:	f8 01       	movw	r30, r16
     e02:	97 81       	ldd	r25, Z+7	; 0x07
     e04:	80 85       	ldd	r24, Z+8	; 0x08
     e06:	e1 80       	ldd	r14, Z+1	; 0x01
     e08:	f2 80       	ldd	r15, Z+2	; 0x02
     e0a:	e1 14       	cp	r14, r1
     e0c:	f1 04       	cpc	r15, r1
     e0e:	a1 f0       	breq	.+40     	; 0xe38 <mmc_disk_ioctl+0x4c6>
     e10:	c9 2e       	mov	r12, r25
     e12:	d8 2e       	mov	r13, r24
     e14:	8f ef       	ldi	r24, 0xFF	; 255
     e16:	38 db       	rcall	.-2448   	; 0x488 <xchg_spi>
     e18:	f6 01       	movw	r30, r12
     e1a:	81 93       	st	Z+, r24
     e1c:	6f 01       	movw	r12, r30
     e1e:	f1 e0       	ldi	r31, 0x01	; 1
     e20:	ef 1a       	sub	r14, r31
     e22:	f1 08       	sbc	r15, r1
				for (dc = 514 - sdi->ndata; dc; dc--) xchg_spi(0xFF);
     e24:	b9 f7       	brne	.-18     	; 0xe14 <mmc_disk_ioctl+0x4a2>
     e26:	f8 01       	movw	r30, r16
     e28:	81 81       	ldd	r24, Z+1	; 0x01
     e2a:	92 81       	ldd	r25, Z+2	; 0x02
     e2c:	02 e0       	ldi	r16, 0x02	; 2
     e2e:	12 e0       	ldi	r17, 0x02	; 2
     e30:	08 1b       	sub	r16, r24
     e32:	19 0b       	sbc	r17, r25
     e34:	19 f4       	brne	.+6      	; 0xe3c <mmc_disk_ioctl+0x4ca>
     e36:	0d c0       	rjmp	.+26     	; 0xe52 <mmc_disk_ioctl+0x4e0>
     e38:	02 e0       	ldi	r16, 0x02	; 2
     e3a:	12 e0       	ldi	r17, 0x02	; 2
     e3c:	8f ef       	ldi	r24, 0xFF	; 255
     e3e:	24 db       	rcall	.-2488   	; 0x488 <xchg_spi>
     e40:	01 50       	subi	r16, 0x01	; 1
     e42:	11 09       	sbc	r17, r1
     e44:	d9 f7       	brne	.-10     	; 0xe3c <mmc_disk_ioctl+0x4ca>
				res = RES_OK;
     e46:	10 e0       	ldi	r17, 0x00	; 0
     e48:	05 c0       	rjmp	.+10     	; 0xe54 <mmc_disk_ioctl+0x4e2>
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
     e4a:	11 e0       	ldi	r17, 0x01	; 1
     e4c:	03 c0       	rjmp	.+6      	; 0xe54 <mmc_disk_ioctl+0x4e2>
     e4e:	11 e0       	ldi	r17, 0x01	; 1
     e50:	01 c0       	rjmp	.+2      	; 0xe54 <mmc_disk_ioctl+0x4e2>
		if (send_cmd(CMD48, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0) {
			for (Timer1 = 100; (rc = xchg_spi(0xFF)) == 0xFF && Timer1; ) ;
			if (rc == 0xFE) {
				for (bp = sdi->data, dc = sdi->ndata; dc; dc--) *bp++ = xchg_spi(0xFF);
				for (dc = 514 - sdi->ndata; dc; dc--) xchg_spi(0xFF);
				res = RES_OK;
     e52:	10 e0       	ldi	r17, 0x00	; 0
			}
		}
		deselect();
     e54:	3c db       	rcall	.-2440   	; 0x4ce <deselect>
     e56:	b3 c0       	rjmp	.+358    	; 0xfbe <mmc_disk_ioctl+0x64c>
		break;
     e58:	fb 01       	movw	r30, r22

	case ISDIO_WRITE:
		sdi = buff;
		if (send_cmd(CMD49, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0) {
     e5a:	43 81       	ldd	r20, Z+3	; 0x03
     e5c:	54 81       	ldd	r21, Z+4	; 0x04
     e5e:	65 81       	ldd	r22, Z+5	; 0x05
     e60:	76 81       	ldd	r23, Z+6	; 0x06
     e62:	03 2e       	mov	r0, r19
     e64:	39 e0       	ldi	r19, 0x09	; 9
     e66:	44 0f       	add	r20, r20
     e68:	55 1f       	adc	r21, r21
     e6a:	66 1f       	adc	r22, r22
     e6c:	77 1f       	adc	r23, r23
     e6e:	3a 95       	dec	r19
     e70:	d1 f7       	brne	.-12     	; 0xe66 <mmc_disk_ioctl+0x4f4>
     e72:	30 2d       	mov	r19, r0
     e74:	70 68       	ori	r23, 0x80	; 128
     e76:	80 81       	ld	r24, Z
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	a0 e0       	ldi	r26, 0x00	; 0
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	07 2e       	mov	r0, r23
     e80:	7c e1       	ldi	r23, 0x1C	; 28
     e82:	88 0f       	add	r24, r24
     e84:	99 1f       	adc	r25, r25
     e86:	aa 1f       	adc	r26, r26
     e88:	bb 1f       	adc	r27, r27
     e8a:	7a 95       	dec	r23
     e8c:	d1 f7       	brne	.-12     	; 0xe82 <mmc_disk_ioctl+0x510>
     e8e:	70 2d       	mov	r23, r0
     e90:	48 2b       	or	r20, r24
     e92:	59 2b       	or	r21, r25
     e94:	6a 2b       	or	r22, r26
     e96:	7b 2b       	or	r23, r27
     e98:	81 81       	ldd	r24, Z+1	; 0x01
     e9a:	92 81       	ldd	r25, Z+2	; 0x02
     e9c:	01 97       	sbiw	r24, 0x01	; 1
     e9e:	91 70       	andi	r25, 0x01	; 1
     ea0:	a0 e0       	ldi	r26, 0x00	; 0
     ea2:	b0 e0       	ldi	r27, 0x00	; 0
     ea4:	48 2b       	or	r20, r24
     ea6:	59 2b       	or	r21, r25
     ea8:	6a 2b       	or	r22, r26
     eaa:	7b 2b       	or	r23, r27
     eac:	81 e3       	ldi	r24, 0x31	; 49
     eae:	96 db       	rcall	.-2260   	; 0x5dc <send_cmd>
			xchg_spi(0xFF); xchg_spi(0xFE);
     eb0:	81 11       	cpse	r24, r1
     eb2:	2e c0       	rjmp	.+92     	; 0xf10 <mmc_disk_ioctl+0x59e>
     eb4:	8f ef       	ldi	r24, 0xFF	; 255
     eb6:	e8 da       	rcall	.-2608   	; 0x488 <xchg_spi>
     eb8:	8e ef       	ldi	r24, 0xFE	; 254
			for (bp = sdi->data, dc = sdi->ndata; dc; dc--) xchg_spi(*bp++);
     eba:	e6 da       	rcall	.-2612   	; 0x488 <xchg_spi>
     ebc:	f8 01       	movw	r30, r16
     ebe:	97 81       	ldd	r25, Z+7	; 0x07
     ec0:	80 85       	ldd	r24, Z+8	; 0x08
     ec2:	e1 80       	ldd	r14, Z+1	; 0x01
     ec4:	f2 80       	ldd	r15, Z+2	; 0x02
     ec6:	e1 14       	cp	r14, r1
     ec8:	f1 04       	cpc	r15, r1
     eca:	99 f0       	breq	.+38     	; 0xef2 <mmc_disk_ioctl+0x580>
     ecc:	c9 2e       	mov	r12, r25
     ece:	d8 2e       	mov	r13, r24
     ed0:	f6 01       	movw	r30, r12
     ed2:	81 91       	ld	r24, Z+
     ed4:	6f 01       	movw	r12, r30
     ed6:	d8 da       	rcall	.-2640   	; 0x488 <xchg_spi>
     ed8:	f1 e0       	ldi	r31, 0x01	; 1
     eda:	ef 1a       	sub	r14, r31
     edc:	f1 08       	sbc	r15, r1
			for (dc = 514 - sdi->ndata; dc; dc--) xchg_spi(0xFF);
     ede:	c1 f7       	brne	.-16     	; 0xed0 <mmc_disk_ioctl+0x55e>
     ee0:	f8 01       	movw	r30, r16
     ee2:	81 81       	ldd	r24, Z+1	; 0x01
     ee4:	92 81       	ldd	r25, Z+2	; 0x02
     ee6:	02 e0       	ldi	r16, 0x02	; 2
     ee8:	12 e0       	ldi	r17, 0x02	; 2
     eea:	08 1b       	sub	r16, r24
     eec:	19 0b       	sbc	r17, r25
     eee:	19 f4       	brne	.+6      	; 0xef6 <mmc_disk_ioctl+0x584>
     ef0:	07 c0       	rjmp	.+14     	; 0xf00 <mmc_disk_ioctl+0x58e>
     ef2:	02 e0       	ldi	r16, 0x02	; 2
     ef4:	12 e0       	ldi	r17, 0x02	; 2
     ef6:	8f ef       	ldi	r24, 0xFF	; 255
     ef8:	c7 da       	rcall	.-2674   	; 0x488 <xchg_spi>
     efa:	01 50       	subi	r16, 0x01	; 1
     efc:	11 09       	sbc	r17, r1
     efe:	d9 f7       	brne	.-10     	; 0xef6 <mmc_disk_ioctl+0x584>
			if ((xchg_spi(0xFF) & 0x1F) == 0x05) res = RES_OK;
     f00:	8f ef       	ldi	r24, 0xFF	; 255
     f02:	c2 da       	rcall	.-2684   	; 0x488 <xchg_spi>
     f04:	8f 71       	andi	r24, 0x1F	; 31
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
     f06:	11 e0       	ldi	r17, 0x01	; 1
     f08:	85 30       	cpi	r24, 0x05	; 5
     f0a:	19 f4       	brne	.+6      	; 0xf12 <mmc_disk_ioctl+0x5a0>
     f0c:	10 e0       	ldi	r17, 0x00	; 0
     f0e:	01 c0       	rjmp	.+2      	; 0xf12 <mmc_disk_ioctl+0x5a0>
     f10:	11 e0       	ldi	r17, 0x01	; 1
     f12:	dd da       	rcall	.-2630   	; 0x4ce <deselect>
			xchg_spi(0xFF); xchg_spi(0xFE);
			for (bp = sdi->data, dc = sdi->ndata; dc; dc--) xchg_spi(*bp++);
			for (dc = 514 - sdi->ndata; dc; dc--) xchg_spi(0xFF);
			if ((xchg_spi(0xFF) & 0x1F) == 0x05) res = RES_OK;
		}
		deselect();
     f14:	54 c0       	rjmp	.+168    	; 0xfbe <mmc_disk_ioctl+0x64c>
		break;
     f16:	fb 01       	movw	r30, r22

	case ISDIO_MRITE:
		sdi = buff;
		if (send_cmd(CMD49, 0x84000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | sdi->ndata >> 8) == 0) {
     f18:	43 81       	ldd	r20, Z+3	; 0x03
     f1a:	54 81       	ldd	r21, Z+4	; 0x04
     f1c:	65 81       	ldd	r22, Z+5	; 0x05
     f1e:	76 81       	ldd	r23, Z+6	; 0x06
     f20:	03 2e       	mov	r0, r19
     f22:	39 e0       	ldi	r19, 0x09	; 9
     f24:	44 0f       	add	r20, r20
     f26:	55 1f       	adc	r21, r21
     f28:	66 1f       	adc	r22, r22
     f2a:	77 1f       	adc	r23, r23
     f2c:	3a 95       	dec	r19
     f2e:	d1 f7       	brne	.-12     	; 0xf24 <mmc_disk_ioctl+0x5b2>
     f30:	30 2d       	mov	r19, r0
     f32:	74 68       	ori	r23, 0x84	; 132
     f34:	80 81       	ld	r24, Z
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	a0 e0       	ldi	r26, 0x00	; 0
     f3a:	b0 e0       	ldi	r27, 0x00	; 0
     f3c:	07 2e       	mov	r0, r23
     f3e:	7c e1       	ldi	r23, 0x1C	; 28
     f40:	88 0f       	add	r24, r24
     f42:	99 1f       	adc	r25, r25
     f44:	aa 1f       	adc	r26, r26
     f46:	bb 1f       	adc	r27, r27
     f48:	7a 95       	dec	r23
     f4a:	d1 f7       	brne	.-12     	; 0xf40 <mmc_disk_ioctl+0x5ce>
     f4c:	70 2d       	mov	r23, r0
     f4e:	48 2b       	or	r20, r24
     f50:	59 2b       	or	r21, r25
     f52:	6a 2b       	or	r22, r26
     f54:	7b 2b       	or	r23, r27
     f56:	82 81       	ldd	r24, Z+2	; 0x02
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	a0 e0       	ldi	r26, 0x00	; 0
     f5c:	b0 e0       	ldi	r27, 0x00	; 0
     f5e:	48 2b       	or	r20, r24
     f60:	59 2b       	or	r21, r25
     f62:	6a 2b       	or	r22, r26
     f64:	7b 2b       	or	r23, r27
			xchg_spi(0xFF); xchg_spi(0xFE);
     f66:	81 e3       	ldi	r24, 0x31	; 49
     f68:	39 db       	rcall	.-2446   	; 0x5dc <send_cmd>
     f6a:	81 11       	cpse	r24, r1
     f6c:	16 c0       	rjmp	.+44     	; 0xf9a <mmc_disk_ioctl+0x628>
     f6e:	8f ef       	ldi	r24, 0xFF	; 255
     f70:	8b da       	rcall	.-2794   	; 0x488 <xchg_spi>
			xchg_spi(sdi->ndata);
     f72:	8e ef       	ldi	r24, 0xFE	; 254
     f74:	89 da       	rcall	.-2798   	; 0x488 <xchg_spi>
     f76:	f8 01       	movw	r30, r16
     f78:	81 81       	ldd	r24, Z+1	; 0x01
     f7a:	86 da       	rcall	.-2804   	; 0x488 <xchg_spi>
     f7c:	01 e0       	ldi	r16, 0x01	; 1
			for (dc = 513; dc; dc--) xchg_spi(0xFF);
     f7e:	12 e0       	ldi	r17, 0x02	; 2
     f80:	8f ef       	ldi	r24, 0xFF	; 255
     f82:	82 da       	rcall	.-2812   	; 0x488 <xchg_spi>
     f84:	01 50       	subi	r16, 0x01	; 1
     f86:	11 09       	sbc	r17, r1
     f88:	d9 f7       	brne	.-10     	; 0xf80 <mmc_disk_ioctl+0x60e>
			if ((xchg_spi(0xFF) & 0x1F) == 0x05) res = RES_OK;
     f8a:	8f ef       	ldi	r24, 0xFF	; 255
     f8c:	7d da       	rcall	.-2822   	; 0x488 <xchg_spi>
     f8e:	8f 71       	andi	r24, 0x1F	; 31
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
     f90:	11 e0       	ldi	r17, 0x01	; 1
     f92:	85 30       	cpi	r24, 0x05	; 5
     f94:	19 f4       	brne	.+6      	; 0xf9c <mmc_disk_ioctl+0x62a>
     f96:	10 e0       	ldi	r17, 0x00	; 0
     f98:	01 c0       	rjmp	.+2      	; 0xf9c <mmc_disk_ioctl+0x62a>
     f9a:	11 e0       	ldi	r17, 0x01	; 1
     f9c:	98 da       	rcall	.-2768   	; 0x4ce <deselect>
			xchg_spi(0xFF); xchg_spi(0xFE);
			xchg_spi(sdi->ndata);
			for (dc = 513; dc; dc--) xchg_spi(0xFF);
			if ((xchg_spi(0xFF) & 0x1F) == 0x05) res = RES_OK;
		}
		deselect();
     f9e:	0f c0       	rjmp	.+30     	; 0xfbe <mmc_disk_ioctl+0x64c>
     fa0:	13 e0       	ldi	r17, 0x03	; 3
		break;
     fa2:	0d c0       	rjmp	.+26     	; 0xfbe <mmc_disk_ioctl+0x64c>
	SDIO_CTRL *sdi;
	BYTE rc, *bp;
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;
     fa4:	14 e0       	ldi	r17, 0x04	; 4
     fa6:	0b c0       	rjmp	.+22     	; 0xfbe <mmc_disk_ioctl+0x64c>
		}
		deselect();
		break;
#endif
	default:
		res = RES_PARERR;
     fa8:	11 e0       	ldi	r17, 0x01	; 1
     faa:	09 c0       	rjmp	.+18     	; 0xfbe <mmc_disk_ioctl+0x64c>
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
     fac:	11 e0       	ldi	r17, 0x01	; 1
     fae:	07 c0       	rjmp	.+14     	; 0xfbe <mmc_disk_ioctl+0x64c>
     fb0:	11 e0       	ldi	r17, 0x01	; 1
     fb2:	05 c0       	rjmp	.+10     	; 0xfbe <mmc_disk_ioctl+0x64c>
     fb4:	11 e0       	ldi	r17, 0x01	; 1
     fb6:	03 c0       	rjmp	.+6      	; 0xfbe <mmc_disk_ioctl+0x64c>
     fb8:	11 e0       	ldi	r17, 0x01	; 1
     fba:	01 c0       	rjmp	.+2      	; 0xfbe <mmc_disk_ioctl+0x64c>
     fbc:	11 e0       	ldi	r17, 0x01	; 1
     fbe:	81 2f       	mov	r24, r17
     fc0:	60 96       	adiw	r28, 0x10	; 16
	default:
		res = RES_PARERR;
	}

	return res;
}
     fc2:	0f b6       	in	r0, 0x3f	; 63
     fc4:	f8 94       	cli
     fc6:	de bf       	out	0x3e, r29	; 62
     fc8:	0f be       	out	0x3f, r0	; 63
     fca:	cd bf       	out	0x3d, r28	; 61
     fcc:	df 91       	pop	r29
     fce:	cf 91       	pop	r28
     fd0:	1f 91       	pop	r17
     fd2:	0f 91       	pop	r16
     fd4:	ff 90       	pop	r15
     fd6:	ef 90       	pop	r14
     fd8:	df 90       	pop	r13
     fda:	cf 90       	pop	r12
     fdc:	bf 90       	pop	r11
     fde:	af 90       	pop	r10
     fe0:	9f 90       	pop	r9
     fe2:	8f 90       	pop	r8
     fe4:	08 95       	ret

00000fe6 <mmc_disk_timerproc>:
     fe6:	80 91 56 02 	lds	r24, 0x0256	; 0x800256 <Timer1>
	BYTE n;
	//BYTE s;


	n = Timer1;				/* 100Hz decrement timer */
	if (n) Timer1 = --n;
     fea:	88 23       	and	r24, r24
     fec:	19 f0       	breq	.+6      	; 0xff4 <mmc_disk_timerproc+0xe>
     fee:	81 50       	subi	r24, 0x01	; 1
     ff0:	80 93 56 02 	sts	0x0256, r24	; 0x800256 <Timer1>
	n = Timer2;
     ff4:	80 91 55 02 	lds	r24, 0x0255	; 0x800255 <Timer2>
	if (n) Timer2 = --n;
     ff8:	88 23       	and	r24, r24
     ffa:	19 f0       	breq	.+6      	; 0x1002 <mmc_disk_timerproc+0x1c>
     ffc:	81 50       	subi	r24, 0x01	; 1
     ffe:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <Timer2>
    1002:	08 95       	ret

00001004 <SCSI_Command_ReadWrite_10>:
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_ReadWrite_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                      const bool IsDataRead)
{
    1004:	bf 92       	push	r11
    1006:	cf 92       	push	r12
    1008:	df 92       	push	r13
    100a:	ef 92       	push	r14
    100c:	ff 92       	push	r15
    100e:	0f 93       	push	r16
    1010:	1f 93       	push	r17
    1012:	cf 93       	push	r28
    1014:	df 93       	push	r29
    1016:	ec 01       	movw	r28, r24
    1018:	b6 2e       	mov	r11, r22

				Temp = Data.Bytes[1];
				Data.Bytes[1] = Data.Bytes[2];
				Data.Bytes[2] = Temp;

				return Data.DWord;
    101a:	c8 a0       	ldd	r12, Y+32	; 0x20
    101c:	df 8c       	ldd	r13, Y+31	; 0x1f
    101e:	ee 8c       	ldd	r14, Y+30	; 0x1e
    1020:	fd 8c       	ldd	r15, Y+29	; 0x1d

				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
    1022:	0b a1       	ldd	r16, Y+35	; 0x23
    1024:	1a a1       	ldd	r17, Y+34	; 0x22

	/* Load in the 16-bit total blocks (SCSI uses big-endian, so have to reverse the byte order) */
	TotalBlocks  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[7]);

	/* Check if the block address is outside the maximum allowable value for the LUN */
	if (BlockAddress >= LUN_MEDIA_BLOCKS)
    1026:	b4 d1       	rcall	.+872    	; 0x1390 <SDCardManager_GetNbBlocks>
    1028:	c6 16       	cp	r12, r22
    102a:	d7 06       	cpc	r13, r23
    102c:	e8 06       	cpc	r14, r24
    102e:	f9 06       	cpc	r15, r25
    1030:	68 f0       	brcs	.+26     	; 0x104c <SCSI_Command_ReadWrite_10+0x48>
	{
		/* Block address is invalid, update SENSE key and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
    1032:	e3 e0       	ldi	r30, 0x03	; 3
    1034:	f1 e0       	ldi	r31, 0x01	; 1
    1036:	80 81       	ld	r24, Z
    1038:	80 7f       	andi	r24, 0xF0	; 240
    103a:	85 60       	ori	r24, 0x05	; 5
    103c:	80 83       	st	Z, r24
    103e:	e1 e0       	ldi	r30, 0x01	; 1
    1040:	f1 e0       	ldi	r31, 0x01	; 1
    1042:	81 e2       	ldi	r24, 0x21	; 33
    1044:	84 87       	std	Z+12, r24	; 0x0c
    1046:	15 86       	std	Z+13, r1	; 0x0d
		               SCSI_ASENSE_LOGICAL_BLOCK_ADDRESS_OUT_OF_RANGE,
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
    1048:	80 e0       	ldi	r24, 0x00	; 0
    104a:	28 c0       	rjmp	.+80     	; 0x109c <SCSI_Command_ReadWrite_10+0x98>
	/* Adjust the given block address to the real media address based on the selected LUN */
	BlockAddress += ((uint32_t)MSInterfaceInfo->State.CommandBlock.LUN * LUN_MEDIA_BLOCKS);
	#endif

	/* Determine if the packet is a READ (10) or WRITE (10) command, call appropriate function */
	if (IsDataRead == DATA_READ)
    104c:	bb 20       	and	r11, r11
    104e:	31 f0       	breq	.+12     	; 0x105c <SCSI_Command_ReadWrite_10+0x58>
	  SDCardManager_ReadBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
    1050:	98 01       	movw	r18, r16
    1052:	b7 01       	movw	r22, r14
    1054:	a6 01       	movw	r20, r12
    1056:	ce 01       	movw	r24, r28
    1058:	8e d2       	rcall	.+1308   	; 0x1576 <SDCardManager_ReadBlocks>
    105a:	05 c0       	rjmp	.+10     	; 0x1066 <SCSI_Command_ReadWrite_10+0x62>
	else
	  SDCardManager_WriteBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
    105c:	98 01       	movw	r18, r16
    105e:	b7 01       	movw	r22, r14
    1060:	a6 01       	movw	r20, r12
    1062:	ce 01       	movw	r24, r28
    1064:	17 d2       	rcall	.+1070   	; 0x1494 <SDCardManager_WriteBlocks>

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= ((uint32_t)TotalBlocks * VIRTUAL_MEMORY_BLOCK_SIZE);
    1066:	c8 01       	movw	r24, r16
    1068:	a0 e0       	ldi	r26, 0x00	; 0
    106a:	b0 e0       	ldi	r27, 0x00	; 0
    106c:	07 2e       	mov	r0, r23
    106e:	79 e0       	ldi	r23, 0x09	; 9
    1070:	88 0f       	add	r24, r24
    1072:	99 1f       	adc	r25, r25
    1074:	aa 1f       	adc	r26, r26
    1076:	bb 1f       	adc	r27, r27
    1078:	7a 95       	dec	r23
    107a:	d1 f7       	brne	.-12     	; 0x1070 <SCSI_Command_ReadWrite_10+0x6c>
    107c:	70 2d       	mov	r23, r0
    107e:	4c 89       	ldd	r20, Y+20	; 0x14
    1080:	5d 89       	ldd	r21, Y+21	; 0x15
    1082:	6e 89       	ldd	r22, Y+22	; 0x16
    1084:	7f 89       	ldd	r23, Y+23	; 0x17
    1086:	8a 01       	movw	r16, r20
    1088:	9b 01       	movw	r18, r22
    108a:	08 1b       	sub	r16, r24
    108c:	19 0b       	sbc	r17, r25
    108e:	2a 0b       	sbc	r18, r26
    1090:	3b 0b       	sbc	r19, r27
    1092:	0c 8b       	std	Y+20, r16	; 0x14
    1094:	1d 8b       	std	Y+21, r17	; 0x15
    1096:	2e 8b       	std	Y+22, r18	; 0x16
    1098:	3f 8b       	std	Y+23, r19	; 0x17

	return true;
    109a:	81 e0       	ldi	r24, 0x01	; 1
}
    109c:	df 91       	pop	r29
    109e:	cf 91       	pop	r28
    10a0:	1f 91       	pop	r17
    10a2:	0f 91       	pop	r16
    10a4:	ff 90       	pop	r15
    10a6:	ef 90       	pop	r14
    10a8:	df 90       	pop	r13
    10aa:	cf 90       	pop	r12
    10ac:	bf 90       	pop	r11
    10ae:	08 95       	ret

000010b0 <SCSI_DecodeSCSICommand>:
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface structure that the command is associated with
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise
 */
bool SCSI_DecodeSCSICommand(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    10b0:	cf 92       	push	r12
    10b2:	df 92       	push	r13
    10b4:	ef 92       	push	r14
    10b6:	ff 92       	push	r15
    10b8:	0f 93       	push	r16
    10ba:	1f 93       	push	r17
    10bc:	cf 93       	push	r28
    10be:	df 93       	push	r29
    10c0:	cd b7       	in	r28, 0x3d	; 61
    10c2:	de b7       	in	r29, 0x3e	; 62
    10c4:	28 97       	sbiw	r28, 0x08	; 8
    10c6:	0f b6       	in	r0, 0x3f	; 63
    10c8:	f8 94       	cli
    10ca:	de bf       	out	0x3e, r29	; 62
    10cc:	0f be       	out	0x3f, r0	; 63
    10ce:	cd bf       	out	0x3d, r28	; 61
    10d0:	8c 01       	movw	r16, r24
	bool CommandSuccess = false;

	/* Run the appropriate SCSI command hander function based on the passed command */
	switch (MSInterfaceInfo->State.CommandBlock.SCSICommandData[0])
    10d2:	fc 01       	movw	r30, r24
    10d4:	83 8d       	ldd	r24, Z+27	; 0x1b
    10d6:	8d 31       	cpi	r24, 0x1D	; 29
    10d8:	09 f4       	brne	.+2      	; 0x10dc <SCSI_DecodeSCSICommand+0x2c>
    10da:	c4 c0       	rjmp	.+392    	; 0x1264 <SCSI_DecodeSCSICommand+0x1b4>
    10dc:	88 f4       	brcc	.+34     	; 0x1100 <SCSI_DecodeSCSICommand+0x50>
    10de:	82 31       	cpi	r24, 0x12	; 18
    10e0:	09 f1       	breq	.+66     	; 0x1124 <SCSI_DecodeSCSICommand+0x74>
    10e2:	38 f4       	brcc	.+14     	; 0x10f2 <SCSI_DecodeSCSICommand+0x42>
    10e4:	88 23       	and	r24, r24
    10e6:	09 f4       	brne	.+2      	; 0x10ea <SCSI_DecodeSCSICommand+0x3a>
    10e8:	01 c1       	rjmp	.+514    	; 0x12ec <SCSI_DecodeSCSICommand+0x23c>
    10ea:	83 30       	cpi	r24, 0x03	; 3
    10ec:	09 f4       	brne	.+2      	; 0x10f0 <SCSI_DecodeSCSICommand+0x40>
    10ee:	59 c0       	rjmp	.+178    	; 0x11a2 <SCSI_DecodeSCSICommand+0xf2>
    10f0:	03 c1       	rjmp	.+518    	; 0x12f8 <SCSI_DecodeSCSICommand+0x248>
    10f2:	8a 31       	cpi	r24, 0x1A	; 26
    10f4:	09 f4       	brne	.+2      	; 0x10f8 <SCSI_DecodeSCSICommand+0x48>
    10f6:	e2 c0       	rjmp	.+452    	; 0x12bc <SCSI_DecodeSCSICommand+0x20c>
    10f8:	8b 31       	cpi	r24, 0x1B	; 27
    10fa:	09 f4       	brne	.+2      	; 0x10fe <SCSI_DecodeSCSICommand+0x4e>
    10fc:	f7 c0       	rjmp	.+494    	; 0x12ec <SCSI_DecodeSCSICommand+0x23c>
    10fe:	fc c0       	rjmp	.+504    	; 0x12f8 <SCSI_DecodeSCSICommand+0x248>
    1100:	88 32       	cpi	r24, 0x28	; 40
    1102:	09 f4       	brne	.+2      	; 0x1106 <SCSI_DecodeSCSICommand+0x56>
    1104:	d7 c0       	rjmp	.+430    	; 0x12b4 <SCSI_DecodeSCSICommand+0x204>
    1106:	38 f4       	brcc	.+14     	; 0x1116 <SCSI_DecodeSCSICommand+0x66>
    1108:	8e 31       	cpi	r24, 0x1E	; 30
    110a:	09 f4       	brne	.+2      	; 0x110e <SCSI_DecodeSCSICommand+0x5e>
    110c:	ef c0       	rjmp	.+478    	; 0x12ec <SCSI_DecodeSCSICommand+0x23c>
    110e:	85 32       	cpi	r24, 0x25	; 37
    1110:	09 f4       	brne	.+2      	; 0x1114 <SCSI_DecodeSCSICommand+0x64>
    1112:	74 c0       	rjmp	.+232    	; 0x11fc <SCSI_DecodeSCSICommand+0x14c>
    1114:	f1 c0       	rjmp	.+482    	; 0x12f8 <SCSI_DecodeSCSICommand+0x248>
    1116:	8a 32       	cpi	r24, 0x2A	; 42
    1118:	09 f4       	brne	.+2      	; 0x111c <SCSI_DecodeSCSICommand+0x6c>
    111a:	c8 c0       	rjmp	.+400    	; 0x12ac <SCSI_DecodeSCSICommand+0x1fc>
    111c:	8f 32       	cpi	r24, 0x2F	; 47
    111e:	09 f4       	brne	.+2      	; 0x1122 <SCSI_DecodeSCSICommand+0x72>
    1120:	e5 c0       	rjmp	.+458    	; 0x12ec <SCSI_DecodeSCSICommand+0x23c>
    1122:	ea c0       	rjmp	.+468    	; 0x12f8 <SCSI_DecodeSCSICommand+0x248>
    1124:	f8 01       	movw	r30, r16
    1126:	e7 8c       	ldd	r14, Z+31	; 0x1f
    1128:	f6 8c       	ldd	r15, Z+30	; 0x1e
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));

	/* Only the standard INQUIRY data is supported, check if any optional INQUIRY bits set */
	if ((MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & ((1 << 0) | (1 << 1))) ||
    112a:	84 8d       	ldd	r24, Z+28	; 0x1c
    112c:	83 70       	andi	r24, 0x03	; 3
    112e:	19 f4       	brne	.+6      	; 0x1136 <SCSI_DecodeSCSICommand+0x86>
    1130:	85 8d       	ldd	r24, Z+29	; 0x1d
    1132:	88 23       	and	r24, r24
    1134:	61 f0       	breq	.+24     	; 0x114e <SCSI_DecodeSCSICommand+0x9e>
	     MSInterfaceInfo->State.CommandBlock.SCSICommandData[2])
	{
		/* Optional but unsupported bits set - update the SENSE key and fail the request */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
    1136:	e3 e0       	ldi	r30, 0x03	; 3
    1138:	f1 e0       	ldi	r31, 0x01	; 1
    113a:	80 81       	ld	r24, Z
    113c:	80 7f       	andi	r24, 0xF0	; 240
    113e:	85 60       	ori	r24, 0x05	; 5
    1140:	80 83       	st	Z, r24
    1142:	e1 e0       	ldi	r30, 0x01	; 1
    1144:	f1 e0       	ldi	r31, 0x01	; 1
    1146:	84 e2       	ldi	r24, 0x24	; 36
    1148:	84 87       	std	Z+12, r24	; 0x0c
    114a:	15 86       	std	Z+13, r1	; 0x0d
    114c:	f0 c0       	rjmp	.+480    	; 0x132e <SCSI_DecodeSCSICommand+0x27e>
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_Inquiry(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));
    114e:	67 01       	movw	r12, r14
    1150:	f5 e2       	ldi	r31, 0x25	; 37
    1152:	ef 16       	cp	r14, r31
    1154:	f1 04       	cpc	r15, r1
    1156:	28 f0       	brcs	.+10     	; 0x1162 <SCSI_DecodeSCSICommand+0xb2>
    1158:	0f 2e       	mov	r0, r31
    115a:	f4 e2       	ldi	r31, 0x24	; 36
    115c:	cf 2e       	mov	r12, r31
    115e:	d1 2c       	mov	r13, r1
    1160:	f0 2d       	mov	r31, r0
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
	}

	Endpoint_Write_Stream_LE(&InquiryData, BytesTransferred, NULL);
    1162:	40 e0       	ldi	r20, 0x00	; 0
    1164:	50 e0       	ldi	r21, 0x00	; 0
    1166:	b6 01       	movw	r22, r12
    1168:	8c e5       	ldi	r24, 0x5C	; 92
    116a:	91 e0       	ldi	r25, 0x01	; 1
    116c:	0e 94 ed 10 	call	0x21da	; 0x21da <Endpoint_Write_Stream_LE>

	/* Pad out remaining bytes with 0x00 */
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
    1170:	60 e0       	ldi	r22, 0x00	; 0
    1172:	70 e0       	ldi	r23, 0x00	; 0
    1174:	c7 01       	movw	r24, r14
    1176:	8c 19       	sub	r24, r12
    1178:	9d 09       	sbc	r25, r13
    117a:	e0 d7       	rcall	.+4032   	; 0x213c <Endpoint_Null_Stream>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    117c:	e8 ee       	ldi	r30, 0xE8	; 232
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	8e 77       	andi	r24, 0x7E	; 126
    1184:	80 83       	st	Z, r24

	/* Finalize the stream transfer to send the last packet */
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
    1186:	f8 01       	movw	r30, r16
    1188:	84 89       	ldd	r24, Z+20	; 0x14
    118a:	95 89       	ldd	r25, Z+21	; 0x15
    118c:	a6 89       	ldd	r26, Z+22	; 0x16
    118e:	b7 89       	ldd	r27, Z+23	; 0x17
    1190:	8c 19       	sub	r24, r12
    1192:	9d 09       	sbc	r25, r13
    1194:	a1 09       	sbc	r26, r1
    1196:	b1 09       	sbc	r27, r1
    1198:	84 8b       	std	Z+20, r24	; 0x14
    119a:	95 8b       	std	Z+21, r25	; 0x15
    119c:	a6 8b       	std	Z+22, r26	; 0x16
    119e:	b7 8b       	std	Z+23, r27	; 0x17
    11a0:	b9 c0       	rjmp	.+370    	; 0x1314 <SCSI_DecodeSCSICommand+0x264>
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_Request_Sense(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint8_t  AllocationLength = MSInterfaceInfo->State.CommandBlock.SCSICommandData[4];
    11a2:	f8 01       	movw	r30, r16
    11a4:	f7 8c       	ldd	r15, Z+31	; 0x1f
	uint8_t  BytesTransferred = MIN(AllocationLength, sizeof(SenseData));
    11a6:	ef 2c       	mov	r14, r15
    11a8:	f2 e1       	ldi	r31, 0x12	; 18
    11aa:	ff 15       	cp	r31, r15
    11ac:	20 f4       	brcc	.+8      	; 0x11b6 <SCSI_DecodeSCSICommand+0x106>
    11ae:	0f 2e       	mov	r0, r31
    11b0:	f2 e1       	ldi	r31, 0x12	; 18
    11b2:	ef 2e       	mov	r14, r31
    11b4:	f0 2d       	mov	r31, r0

	Endpoint_Write_Stream_LE(&SenseData, BytesTransferred, NULL);
    11b6:	ce 2c       	mov	r12, r14
    11b8:	d1 2c       	mov	r13, r1
    11ba:	40 e0       	ldi	r20, 0x00	; 0
    11bc:	50 e0       	ldi	r21, 0x00	; 0
    11be:	b6 01       	movw	r22, r12
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	91 e0       	ldi	r25, 0x01	; 1
    11c4:	0e 94 ed 10 	call	0x21da	; 0x21da <Endpoint_Write_Stream_LE>
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
    11c8:	8f 2d       	mov	r24, r15
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	60 e0       	ldi	r22, 0x00	; 0
    11ce:	70 e0       	ldi	r23, 0x00	; 0
    11d0:	8c 19       	sub	r24, r12
    11d2:	9d 09       	sbc	r25, r13
    11d4:	b3 d7       	rcall	.+3942   	; 0x213c <Endpoint_Null_Stream>
    11d6:	e8 ee       	ldi	r30, 0xE8	; 232
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	80 81       	ld	r24, Z
    11dc:	8e 77       	andi	r24, 0x7E	; 126
    11de:	80 83       	st	Z, r24
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
    11e0:	f8 01       	movw	r30, r16
    11e2:	84 89       	ldd	r24, Z+20	; 0x14
    11e4:	95 89       	ldd	r25, Z+21	; 0x15
    11e6:	a6 89       	ldd	r26, Z+22	; 0x16
    11e8:	b7 89       	ldd	r27, Z+23	; 0x17
    11ea:	8e 19       	sub	r24, r14
    11ec:	91 09       	sbc	r25, r1
    11ee:	a1 09       	sbc	r26, r1
    11f0:	b1 09       	sbc	r27, r1
    11f2:	84 8b       	std	Z+20, r24	; 0x14
    11f4:	95 8b       	std	Z+21, r25	; 0x15
    11f6:	a6 8b       	std	Z+22, r26	; 0x16
    11f8:	b7 8b       	std	Z+23, r27	; 0x17
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_Read_Capacity_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint32_t LastBlockAddressInLUN = (LUN_MEDIA_BLOCKS - 1);
    11fa:	8c c0       	rjmp	.+280    	; 0x1314 <SCSI_DecodeSCSICommand+0x264>
    11fc:	c9 d0       	rcall	.+402    	; 0x1390 <SDCardManager_GetNbBlocks>
    11fe:	dc 01       	movw	r26, r24
    1200:	cb 01       	movw	r24, r22
    1202:	01 97       	sbiw	r24, 0x01	; 1
    1204:	a1 09       	sbc	r26, r1
    1206:	b1 09       	sbc	r27, r1
    1208:	8d 83       	std	Y+5, r24	; 0x05
    120a:	9e 83       	std	Y+6, r25	; 0x06
    120c:	af 83       	std	Y+7, r26	; 0x07
    120e:	b8 87       	std	Y+8, r27	; 0x08
	uint32_t MediaBlockSize        = VIRTUAL_MEMORY_BLOCK_SIZE;
    1210:	80 e0       	ldi	r24, 0x00	; 0
    1212:	92 e0       	ldi	r25, 0x02	; 2
    1214:	a0 e0       	ldi	r26, 0x00	; 0
    1216:	b0 e0       	ldi	r27, 0x00	; 0
    1218:	89 83       	std	Y+1, r24	; 0x01
    121a:	9a 83       	std	Y+2, r25	; 0x02
    121c:	ab 83       	std	Y+3, r26	; 0x03
    121e:	bc 83       	std	Y+4, r27	; 0x04

	Endpoint_Write_Stream_BE(&LastBlockAddressInLUN, sizeof(LastBlockAddressInLUN), NULL);
    1220:	40 e0       	ldi	r20, 0x00	; 0
    1222:	50 e0       	ldi	r21, 0x00	; 0
    1224:	64 e0       	ldi	r22, 0x04	; 4
    1226:	70 e0       	ldi	r23, 0x00	; 0
    1228:	ce 01       	movw	r24, r28
    122a:	05 96       	adiw	r24, 0x05	; 5
    122c:	0e 94 49 11 	call	0x2292	; 0x2292 <Endpoint_Write_Stream_BE>
	Endpoint_Write_Stream_BE(&MediaBlockSize, sizeof(MediaBlockSize), NULL);
    1230:	40 e0       	ldi	r20, 0x00	; 0
    1232:	50 e0       	ldi	r21, 0x00	; 0
    1234:	64 e0       	ldi	r22, 0x04	; 4
    1236:	70 e0       	ldi	r23, 0x00	; 0
    1238:	ce 01       	movw	r24, r28
    123a:	01 96       	adiw	r24, 0x01	; 1
    123c:	0e 94 49 11 	call	0x2292	; 0x2292 <Endpoint_Write_Stream_BE>
    1240:	e8 ee       	ldi	r30, 0xE8	; 232
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	8e 77       	andi	r24, 0x7E	; 126
    1248:	80 83       	st	Z, r24
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 8;
    124a:	f8 01       	movw	r30, r16
    124c:	84 89       	ldd	r24, Z+20	; 0x14
    124e:	95 89       	ldd	r25, Z+21	; 0x15
    1250:	a6 89       	ldd	r26, Z+22	; 0x16
    1252:	b7 89       	ldd	r27, Z+23	; 0x17
    1254:	08 97       	sbiw	r24, 0x08	; 8
    1256:	a1 09       	sbc	r26, r1
    1258:	b1 09       	sbc	r27, r1
    125a:	84 8b       	std	Z+20, r24	; 0x14
    125c:	95 8b       	std	Z+21, r25	; 0x15
    125e:	a6 8b       	std	Z+22, r26	; 0x16
    1260:	b7 8b       	std	Z+23, r27	; 0x17
		case SCSI_CMD_REQUEST_SENSE:
			CommandSuccess = SCSI_Command_Request_Sense(MSInterfaceInfo);
			break;
		case SCSI_CMD_READ_CAPACITY_10:
			CommandSuccess = SCSI_Command_Read_Capacity_10(MSInterfaceInfo);
			break;
    1262:	58 c0       	rjmp	.+176    	; 0x1314 <SCSI_DecodeSCSICommand+0x264>
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_Send_Diagnostic(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	/* Check to see if the SELF TEST bit is not set */
	if (!(MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & (1 << 2)))
    1264:	f8 01       	movw	r30, r16
    1266:	84 8d       	ldd	r24, Z+28	; 0x1c
    1268:	82 fd       	sbrc	r24, 2
    126a:	0c c0       	rjmp	.+24     	; 0x1284 <SCSI_DecodeSCSICommand+0x1d4>
	{
		/* Only self-test supported - update SENSE key and fail the command */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
    126c:	e3 e0       	ldi	r30, 0x03	; 3
    126e:	f1 e0       	ldi	r31, 0x01	; 1
    1270:	80 81       	ld	r24, Z
    1272:	80 7f       	andi	r24, 0xF0	; 240
    1274:	85 60       	ori	r24, 0x05	; 5
    1276:	80 83       	st	Z, r24
    1278:	e1 e0       	ldi	r30, 0x01	; 1
    127a:	f1 e0       	ldi	r31, 0x01	; 1
    127c:	84 e2       	ldi	r24, 0x24	; 36
    127e:	84 87       	std	Z+12, r24	; 0x0c
    1280:	15 86       	std	Z+13, r1	; 0x0d

		return false;
	}

	/* Check to see if all attached Dataflash ICs are functional */
	if (!(SDCardManager_CheckDataflashOperation()))
    1282:	55 c0       	rjmp	.+170    	; 0x132e <SCSI_DecodeSCSICommand+0x27e>
    1284:	17 d2       	rcall	.+1070   	; 0x16b4 <SDCardManager_CheckDataflashOperation>
    1286:	81 11       	cpse	r24, r1
    1288:	0b c0       	rjmp	.+22     	; 0x12a0 <SCSI_DecodeSCSICommand+0x1f0>
	{
		/* Update SENSE key with a hardware error condition and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_HARDWARE_ERROR,
    128a:	e3 e0       	ldi	r30, 0x03	; 3
    128c:	f1 e0       	ldi	r31, 0x01	; 1
    128e:	80 81       	ld	r24, Z
    1290:	80 7f       	andi	r24, 0xF0	; 240
    1292:	84 60       	ori	r24, 0x04	; 4
    1294:	80 83       	st	Z, r24
    1296:	e1 e0       	ldi	r30, 0x01	; 1
    1298:	f1 e0       	ldi	r31, 0x01	; 1
    129a:	14 86       	std	Z+12, r1	; 0x0c
    129c:	15 86       	std	Z+13, r1	; 0x0d
    129e:	47 c0       	rjmp	.+142    	; 0x132e <SCSI_DecodeSCSICommand+0x27e>

		return false;
	}

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength = 0;
    12a0:	f8 01       	movw	r30, r16
    12a2:	14 8a       	std	Z+20, r1	; 0x14
    12a4:	15 8a       	std	Z+21, r1	; 0x15
    12a6:	16 8a       	std	Z+22, r1	; 0x16
    12a8:	17 8a       	std	Z+23, r1	; 0x17
			break;
		case SCSI_CMD_SEND_DIAGNOSTIC:
			CommandSuccess = SCSI_Command_Send_Diagnostic(MSInterfaceInfo);
			break;
		case SCSI_CMD_WRITE_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_WRITE);
    12aa:	34 c0       	rjmp	.+104    	; 0x1314 <SCSI_DecodeSCSICommand+0x264>
    12ac:	60 e0       	ldi	r22, 0x00	; 0
    12ae:	c8 01       	movw	r24, r16
			break;
    12b0:	a9 de       	rcall	.-686    	; 0x1004 <SCSI_Command_ReadWrite_10>
		case SCSI_CMD_READ_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_READ);
    12b2:	2e c0       	rjmp	.+92     	; 0x1310 <SCSI_DecodeSCSICommand+0x260>
    12b4:	61 e0       	ldi	r22, 0x01	; 1
    12b6:	c8 01       	movw	r24, r16
    12b8:	a5 de       	rcall	.-694    	; 0x1004 <SCSI_Command_ReadWrite_10>
			break;
    12ba:	2a c0       	rjmp	.+84     	; 0x1310 <SCSI_DecodeSCSICommand+0x260>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    12bc:	e1 ef       	ldi	r30, 0xF1	; 241
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	10 82       	st	Z, r1
    12c2:	10 82       	st	Z, r1
    12c4:	10 82       	st	Z, r1
    12c6:	10 82       	st	Z, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    12c8:	e8 ee       	ldi	r30, 0xE8	; 232
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	80 81       	ld	r24, Z
    12ce:	8e 77       	andi	r24, 0x7E	; 126
    12d0:	80 83       	st	Z, r24
	Endpoint_Write_8(DISK_READ_ONLY ? 0x80 : 0x00);
	Endpoint_Write_8(0x00);
	Endpoint_ClearIN();

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 4;
    12d2:	f8 01       	movw	r30, r16
    12d4:	84 89       	ldd	r24, Z+20	; 0x14
    12d6:	95 89       	ldd	r25, Z+21	; 0x15
    12d8:	a6 89       	ldd	r26, Z+22	; 0x16
    12da:	b7 89       	ldd	r27, Z+23	; 0x17
    12dc:	04 97       	sbiw	r24, 0x04	; 4
    12de:	a1 09       	sbc	r26, r1
    12e0:	b1 09       	sbc	r27, r1
    12e2:	84 8b       	std	Z+20, r24	; 0x14
    12e4:	95 8b       	std	Z+21, r25	; 0x15
    12e6:	a6 8b       	std	Z+22, r26	; 0x16
    12e8:	b7 8b       	std	Z+23, r27	; 0x17
		case SCSI_CMD_READ_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_READ);
			break;
		case SCSI_CMD_MODE_SENSE_6:
			CommandSuccess = SCSI_Command_ModeSense_6(MSInterfaceInfo);
			break;
    12ea:	14 c0       	rjmp	.+40     	; 0x1314 <SCSI_DecodeSCSICommand+0x264>
		case SCSI_CMD_TEST_UNIT_READY:
		case SCSI_CMD_PREVENT_ALLOW_MEDIUM_REMOVAL:
		case SCSI_CMD_VERIFY_10:
			/* These commands should just succeed, no handling required */
			CommandSuccess = true;
			MSInterfaceInfo->State.CommandBlock.DataTransferLength = 0;
    12ec:	f8 01       	movw	r30, r16
    12ee:	14 8a       	std	Z+20, r1	; 0x14
    12f0:	15 8a       	std	Z+21, r1	; 0x15
    12f2:	16 8a       	std	Z+22, r1	; 0x16
    12f4:	17 8a       	std	Z+23, r1	; 0x17
			break;
    12f6:	0e c0       	rjmp	.+28     	; 0x1314 <SCSI_DecodeSCSICommand+0x264>
		default:
			/* Update the SENSE key to reflect the invalid command */
			SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
    12f8:	e3 e0       	ldi	r30, 0x03	; 3
    12fa:	f1 e0       	ldi	r31, 0x01	; 1
    12fc:	80 81       	ld	r24, Z
    12fe:	80 7f       	andi	r24, 0xF0	; 240
    1300:	85 60       	ori	r24, 0x05	; 5
    1302:	80 83       	st	Z, r24
    1304:	e1 e0       	ldi	r30, 0x01	; 1
    1306:	f1 e0       	ldi	r31, 0x01	; 1
    1308:	80 e2       	ldi	r24, 0x20	; 32
    130a:	84 87       	std	Z+12, r24	; 0x0c
    130c:	15 86       	std	Z+13, r1	; 0x0d
		                   SCSI_ASENSE_INVALID_COMMAND,
		                   SCSI_ASENSEQ_NO_QUALIFIER);
			break;
    130e:	0f c0       	rjmp	.+30     	; 0x132e <SCSI_DecodeSCSICommand+0x27e>
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
    1310:	88 23       	and	r24, r24
    1312:	59 f0       	breq	.+22     	; 0x132a <SCSI_DecodeSCSICommand+0x27a>
	{
		SCSI_SET_SENSE(SCSI_SENSE_KEY_GOOD,
    1314:	e3 e0       	ldi	r30, 0x03	; 3
    1316:	f1 e0       	ldi	r31, 0x01	; 1
    1318:	80 81       	ld	r24, Z
    131a:	80 7f       	andi	r24, 0xF0	; 240
    131c:	80 83       	st	Z, r24
    131e:	e1 e0       	ldi	r30, 0x01	; 1
    1320:	f1 e0       	ldi	r31, 0x01	; 1
    1322:	14 86       	std	Z+12, r1	; 0x0c
    1324:	15 86       	std	Z+13, r1	; 0x0d
		               SCSI_ASENSE_NO_ADDITIONAL_INFORMATION,
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return true;
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	03 c0       	rjmp	.+6      	; 0x1330 <SCSI_DecodeSCSICommand+0x280>
	}

	return false;
    132a:	80 e0       	ldi	r24, 0x00	; 0
    132c:	01 c0       	rjmp	.+2      	; 0x1330 <SCSI_DecodeSCSICommand+0x280>
    132e:	80 e0       	ldi	r24, 0x00	; 0
}
    1330:	28 96       	adiw	r28, 0x08	; 8
    1332:	0f b6       	in	r0, 0x3f	; 63
    1334:	f8 94       	cli
    1336:	de bf       	out	0x3e, r29	; 62
    1338:	0f be       	out	0x3f, r0	; 63
    133a:	cd bf       	out	0x3d, r28	; 61
    133c:	df 91       	pop	r29
    133e:	cf 91       	pop	r28
    1340:	1f 91       	pop	r17
    1342:	0f 91       	pop	r16
    1344:	ff 90       	pop	r15
    1346:	ef 90       	pop	r14
    1348:	df 90       	pop	r13
    134a:	cf 90       	pop	r12
    134c:	08 95       	ret

0000134e <SDCardManager_Init>:
#include "diskio.h"

static uint32_t CachedTotalBlocks = 0;

void SDCardManager_Init(void)
{
    134e:	cf 93       	push	r28
    1350:	df 93       	push	r29
	printf_P(PSTR("\r\n\r\n"));
    1352:	89 ee       	ldi	r24, 0xE9	; 233
    1354:	91 e0       	ldi	r25, 0x01	; 1
    1356:	9f 93       	push	r25
    1358:	8f 93       	push	r24
    135a:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <printf_P>
    135e:	0f 90       	pop	r0
    1360:	0f 90       	pop	r0
	do
	{
		printf_P(PSTR("trying ... disk_initialize\r\n"));
    1362:	cc ec       	ldi	r28, 0xCC	; 204
    1364:	d1 e0       	ldi	r29, 0x01	; 1
    1366:	df 93       	push	r29
    1368:	cf 93       	push	r28
    136a:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <printf_P>
	} while(disk_initialize(0) != FR_OK);
    136e:	80 e0       	ldi	r24, 0x00	; 0
    1370:	59 d8       	rcall	.-3918   	; 0x424 <disk_initialize>
    1372:	0f 90       	pop	r0
    1374:	0f 90       	pop	r0
    1376:	81 11       	cpse	r24, r1
    1378:	f6 cf       	rjmp	.-20     	; 0x1366 <SDCardManager_Init+0x18>

	printf_P(PSTR("disk_initialize success\r\n"));
    137a:	82 eb       	ldi	r24, 0xB2	; 178
    137c:	91 e0       	ldi	r25, 0x01	; 1
    137e:	9f 93       	push	r25
    1380:	8f 93       	push	r24
    1382:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <printf_P>
}
    1386:	0f 90       	pop	r0
    1388:	0f 90       	pop	r0
    138a:	df 91       	pop	r29
    138c:	cf 91       	pop	r28
    138e:	08 95       	ret

00001390 <SDCardManager_GetNbBlocks>:

uint32_t SDCardManager_GetNbBlocks(void)
{
    1390:	cf 93       	push	r28
    1392:	df 93       	push	r29
    1394:	00 d0       	rcall	.+0      	; 0x1396 <SDCardManager_GetNbBlocks+0x6>
    1396:	00 d0       	rcall	.+0      	; 0x1398 <SDCardManager_GetNbBlocks+0x8>
    1398:	cd b7       	in	r28, 0x3d	; 61
    139a:	de b7       	in	r29, 0x3e	; 62
	DWORD ioct_rsp = 0;
    139c:	19 82       	std	Y+1, r1	; 0x01
    139e:	1a 82       	std	Y+2, r1	; 0x02
    13a0:	1b 82       	std	Y+3, r1	; 0x03
    13a2:	1c 82       	std	Y+4, r1	; 0x04
	
	if (CachedTotalBlocks != 0)
    13a4:	60 91 57 06 	lds	r22, 0x0657	; 0x800657 <CachedTotalBlocks>
    13a8:	70 91 58 06 	lds	r23, 0x0658	; 0x800658 <CachedTotalBlocks+0x1>
    13ac:	80 91 59 06 	lds	r24, 0x0659	; 0x800659 <CachedTotalBlocks+0x2>
    13b0:	90 91 5a 06 	lds	r25, 0x065A	; 0x80065a <CachedTotalBlocks+0x3>
    13b4:	61 15       	cp	r22, r1
    13b6:	71 05       	cpc	r23, r1
    13b8:	81 05       	cpc	r24, r1
    13ba:	91 05       	cpc	r25, r1
    13bc:	51 f5       	brne	.+84     	; 0x1412 <SDCardManager_GetNbBlocks+0x82>
		return CachedTotalBlocks;
		
	disk_ioctl(0, GET_SECTOR_COUNT, &ioct_rsp);
    13be:	ae 01       	movw	r20, r28
    13c0:	4f 5f       	subi	r20, 0xFF	; 255
    13c2:	5f 4f       	sbci	r21, 0xFF	; 255
    13c4:	61 e0       	ldi	r22, 0x01	; 1
    13c6:	80 e0       	ldi	r24, 0x00	; 0
    13c8:	51 d8       	rcall	.-3934   	; 0x46c <disk_ioctl>

	CachedTotalBlocks = ioct_rsp;
    13ca:	89 81       	ldd	r24, Y+1	; 0x01
    13cc:	9a 81       	ldd	r25, Y+2	; 0x02
    13ce:	2b 81       	ldd	r18, Y+3	; 0x03
    13d0:	3c 81       	ldd	r19, Y+4	; 0x04
    13d2:	80 93 57 06 	sts	0x0657, r24	; 0x800657 <CachedTotalBlocks>
    13d6:	90 93 58 06 	sts	0x0658, r25	; 0x800658 <CachedTotalBlocks+0x1>
    13da:	20 93 59 06 	sts	0x0659, r18	; 0x800659 <CachedTotalBlocks+0x2>
    13de:	30 93 5a 06 	sts	0x065A, r19	; 0x80065a <CachedTotalBlocks+0x3>
	printf_P(PSTR("SD blocks: %li\r\n"), CachedTotalBlocks);
    13e2:	3f 93       	push	r19
    13e4:	2f 93       	push	r18
    13e6:	9f 93       	push	r25
    13e8:	8f 93       	push	r24
    13ea:	81 ea       	ldi	r24, 0xA1	; 161
    13ec:	91 e0       	ldi	r25, 0x01	; 1
    13ee:	9f 93       	push	r25
    13f0:	8f 93       	push	r24
    13f2:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <printf_P>
	
	return CachedTotalBlocks;
    13f6:	60 91 57 06 	lds	r22, 0x0657	; 0x800657 <CachedTotalBlocks>
    13fa:	70 91 58 06 	lds	r23, 0x0658	; 0x800658 <CachedTotalBlocks+0x1>
    13fe:	80 91 59 06 	lds	r24, 0x0659	; 0x800659 <CachedTotalBlocks+0x2>
    1402:	90 91 5a 06 	lds	r25, 0x065A	; 0x80065a <CachedTotalBlocks+0x3>
    1406:	0f 90       	pop	r0
    1408:	0f 90       	pop	r0
    140a:	0f 90       	pop	r0
    140c:	0f 90       	pop	r0
    140e:	0f 90       	pop	r0
    1410:	0f 90       	pop	r0
}
    1412:	0f 90       	pop	r0
    1414:	0f 90       	pop	r0
    1416:	0f 90       	pop	r0
    1418:	0f 90       	pop	r0
    141a:	df 91       	pop	r29
    141c:	cf 91       	pop	r28
    141e:	08 95       	ret

00001420 <SDCardManager_WriteBlockHandler>:
 *
 *  \param[in] BlockAddress  Data block starting address for the write sequence
 *  \param[in] TotalBlocks   Number of blocks of data to write
 */
uintptr_t SDCardManager_WriteBlockHandler(uint8_t* buff_to_write, void* a, void* p)
{
    1420:	cf 93       	push	r28
    1422:	df 93       	push	r29
    1424:	ec 01       	movw	r28, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1426:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	/* Check if the endpoint is currently empty */
	if (!(Endpoint_IsReadWriteAllowed()))
    142a:	85 fd       	sbrc	r24, 5
    142c:	09 c0       	rjmp	.+18     	; 0x1440 <SDCardManager_WriteBlockHandler+0x20>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    142e:	e8 ee       	ldi	r30, 0xE8	; 232
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	80 81       	ld	r24, Z
    1434:	8b 77       	andi	r24, 0x7B	; 123
    1436:	80 83       	st	Z, r24
	{
		/* Clear the current endpoint bank */
		Endpoint_ClearOUT();
		
		/* Wait until the host has sent another packet */
		if (Endpoint_WaitUntilReady())
    1438:	0e 94 47 14 	call	0x288e	; 0x288e <Endpoint_WaitUntilReady>
    143c:	81 11       	cpse	r24, r1
    143e:	25 c0       	rjmp	.+74     	; 0x148a <SDCardManager_WriteBlockHandler+0x6a>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1440:	e1 ef       	ldi	r30, 0xF1	; 241
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	80 81       	ld	r24, Z
		  return 0;
	}
	
	/* Write one 16-byte chunk of data to the dataflash */
	buff_to_write[0] = Endpoint_Read_8();
    1446:	88 83       	st	Y, r24
    1448:	80 81       	ld	r24, Z
	buff_to_write[1] = Endpoint_Read_8();
    144a:	89 83       	std	Y+1, r24	; 0x01
    144c:	80 81       	ld	r24, Z
	buff_to_write[2] = Endpoint_Read_8();
    144e:	8a 83       	std	Y+2, r24	; 0x02
    1450:	80 81       	ld	r24, Z
	buff_to_write[3] = Endpoint_Read_8();
    1452:	8b 83       	std	Y+3, r24	; 0x03
    1454:	80 81       	ld	r24, Z
	buff_to_write[4] = Endpoint_Read_8();
    1456:	8c 83       	std	Y+4, r24	; 0x04
    1458:	80 81       	ld	r24, Z
	buff_to_write[5] = Endpoint_Read_8();
    145a:	8d 83       	std	Y+5, r24	; 0x05
    145c:	80 81       	ld	r24, Z
	buff_to_write[6] = Endpoint_Read_8();
    145e:	8e 83       	std	Y+6, r24	; 0x06
    1460:	80 81       	ld	r24, Z
	buff_to_write[7] = Endpoint_Read_8();
    1462:	8f 83       	std	Y+7, r24	; 0x07
    1464:	80 81       	ld	r24, Z
	buff_to_write[8] = Endpoint_Read_8();
    1466:	88 87       	std	Y+8, r24	; 0x08
    1468:	80 81       	ld	r24, Z
	buff_to_write[9] = Endpoint_Read_8();
    146a:	89 87       	std	Y+9, r24	; 0x09
    146c:	80 81       	ld	r24, Z
	buff_to_write[10] = Endpoint_Read_8();
    146e:	8a 87       	std	Y+10, r24	; 0x0a
    1470:	80 81       	ld	r24, Z
	buff_to_write[11] = Endpoint_Read_8();
    1472:	8b 87       	std	Y+11, r24	; 0x0b
    1474:	80 81       	ld	r24, Z
	buff_to_write[12] = Endpoint_Read_8();
    1476:	8c 87       	std	Y+12, r24	; 0x0c
    1478:	80 81       	ld	r24, Z
	buff_to_write[13] = Endpoint_Read_8();
    147a:	8d 87       	std	Y+13, r24	; 0x0d
    147c:	80 81       	ld	r24, Z
	buff_to_write[14] = Endpoint_Read_8();
    147e:	8e 87       	std	Y+14, r24	; 0x0e
    1480:	80 81       	ld	r24, Z
	buff_to_write[15] = Endpoint_Read_8();
    1482:	8f 87       	std	Y+15, r24	; 0x0f
	
	return 16;
    1484:	80 e1       	ldi	r24, 0x10	; 16
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	02 c0       	rjmp	.+4      	; 0x148e <SDCardManager_WriteBlockHandler+0x6e>
		/* Clear the current endpoint bank */
		Endpoint_ClearOUT();
		
		/* Wait until the host has sent another packet */
		if (Endpoint_WaitUntilReady())
		  return 0;
    148a:	80 e0       	ldi	r24, 0x00	; 0
    148c:	90 e0       	ldi	r25, 0x00	; 0
	buff_to_write[13] = Endpoint_Read_8();
	buff_to_write[14] = Endpoint_Read_8();
	buff_to_write[15] = Endpoint_Read_8();
	
	return 16;
}
    148e:	df 91       	pop	r29
    1490:	cf 91       	pop	r28
    1492:	08 95       	ret

00001494 <SDCardManager_WriteBlocks>:

void SDCardManager_WriteBlocks(USB_ClassInfo_MS_Device_t* MSInterfaceInfo, uint32_t BlockAddress, uint16_t TotalBlocks)
{
    1494:	4f 92       	push	r4
    1496:	5f 92       	push	r5
    1498:	6f 92       	push	r6
    149a:	7f 92       	push	r7
    149c:	af 92       	push	r10
    149e:	bf 92       	push	r11
    14a0:	cf 92       	push	r12
    14a2:	df 92       	push	r13
    14a4:	ef 92       	push	r14
    14a6:	ff 92       	push	r15
    14a8:	0f 93       	push	r16
    14aa:	1f 93       	push	r17
    14ac:	cf 93       	push	r28
    14ae:	df 93       	push	r29
    14b0:	5c 01       	movw	r10, r24
    14b2:	2a 01       	movw	r4, r20
    14b4:	3b 01       	movw	r6, r22
    14b6:	69 01       	movw	r12, r18
	int i;
	static uint8_t buff_to_write[512];
	
	printf_P(PSTR("W %li %i\r\n"), BlockAddress, TotalBlocks);
    14b8:	df 92       	push	r13
    14ba:	2f 93       	push	r18
    14bc:	7f 92       	push	r7
    14be:	6f 92       	push	r6
    14c0:	5f 92       	push	r5
    14c2:	4f 93       	push	r20
    14c4:	86 e9       	ldi	r24, 0x96	; 150
    14c6:	91 e0       	ldi	r25, 0x01	; 1
    14c8:	9f 93       	push	r25
    14ca:	8f 93       	push	r24
    14cc:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <printf_P>

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
    14d0:	0e 94 47 14 	call	0x288e	; 0x288e <Endpoint_WaitUntilReady>
    14d4:	2d b7       	in	r18, 0x3d	; 61
    14d6:	3e b7       	in	r19, 0x3e	; 62
    14d8:	28 5f       	subi	r18, 0xF8	; 248
    14da:	3f 4f       	sbci	r19, 0xFF	; 255
    14dc:	0f b6       	in	r0, 0x3f	; 63
    14de:	f8 94       	cli
    14e0:	3e bf       	out	0x3e, r19	; 62
    14e2:	0f be       	out	0x3f, r0	; 63
    14e4:	2d bf       	out	0x3d, r18	; 61
    14e6:	81 11       	cpse	r24, r1
    14e8:	37 c0       	rjmp	.+110    	; 0x1558 <SDCardManager_WriteBlocks+0xc4>
	  return;
	
	while (TotalBlocks)
    14ea:	c1 14       	cp	r12, r1
    14ec:	d1 04       	cpc	r13, r1
    14ee:	11 f5       	brne	.+68     	; 0x1534 <SDCardManager_WriteBlocks+0xa0>
    14f0:	2a c0       	rjmp	.+84     	; 0x1546 <SDCardManager_WriteBlocks+0xb2>
	{
		for (i = 0; i < 32; i++)
		{
			SDCardManager_WriteBlockHandler(buff_to_write + (16 * i), NULL, NULL);	
    14f2:	40 e0       	ldi	r20, 0x00	; 0
    14f4:	50 e0       	ldi	r21, 0x00	; 0
    14f6:	60 e0       	ldi	r22, 0x00	; 0
    14f8:	70 e0       	ldi	r23, 0x00	; 0
    14fa:	ce 01       	movw	r24, r28
    14fc:	91 df       	rcall	.-222    	; 0x1420 <SDCardManager_WriteBlockHandler>
    14fe:	60 96       	adiw	r28, 0x10	; 16
	if (Endpoint_WaitUntilReady())
	  return;
	
	while (TotalBlocks)
	{
		for (i = 0; i < 32; i++)
    1500:	ec 16       	cp	r14, r28
    1502:	fd 06       	cpc	r15, r29
    1504:	b1 f7       	brne	.-20     	; 0x14f2 <SDCardManager_WriteBlocks+0x5e>
		{
			SDCardManager_WriteBlockHandler(buff_to_write + (16 * i), NULL, NULL);	
		}
		
		disk_write(0, buff_to_write, BlockAddress, 1);
    1506:	01 e0       	ldi	r16, 0x01	; 1
    1508:	10 e0       	ldi	r17, 0x00	; 0
    150a:	a3 01       	movw	r20, r6
    150c:	92 01       	movw	r18, r4
    150e:	67 e5       	ldi	r22, 0x57	; 87
    1510:	74 e0       	ldi	r23, 0x04	; 4
    1512:	80 e0       	ldi	r24, 0x00	; 0
    1514:	0e 94 27 02 	call	0x44e	; 0x44e <disk_write>
				
		/* Check if the current command is being aborted by the host */
		if (MSInterfaceInfo->State.IsMassStoreReset)
    1518:	f5 01       	movw	r30, r10
    151a:	80 ad       	ldd	r24, Z+56	; 0x38
    151c:	81 11       	cpse	r24, r1
    151e:	1c c0       	rjmp	.+56     	; 0x1558 <SDCardManager_WriteBlocks+0xc4>
		  return;
			
		/* Decrement the blocks remaining counter and reset the sub block counter */
		BlockAddress++;
    1520:	ff ef       	ldi	r31, 0xFF	; 255
    1522:	4f 1a       	sub	r4, r31
    1524:	5f 0a       	sbc	r5, r31
    1526:	6f 0a       	sbc	r6, r31
    1528:	7f 0a       	sbc	r7, r31
		TotalBlocks--;
    152a:	21 e0       	ldi	r18, 0x01	; 1
    152c:	c2 1a       	sub	r12, r18
    152e:	d1 08       	sbc	r13, r1

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;
	
	while (TotalBlocks)
    1530:	39 f4       	brne	.+14     	; 0x1540 <SDCardManager_WriteBlocks+0xac>
    1532:	09 c0       	rjmp	.+18     	; 0x1546 <SDCardManager_WriteBlocks+0xb2>
    1534:	0f 2e       	mov	r0, r31
    1536:	f7 e5       	ldi	r31, 0x57	; 87
    1538:	ef 2e       	mov	r14, r31
    153a:	f6 e0       	ldi	r31, 0x06	; 6
    153c:	ff 2e       	mov	r15, r31
    153e:	f0 2d       	mov	r31, r0
    1540:	c7 e5       	ldi	r28, 0x57	; 87
    1542:	d4 e0       	ldi	r29, 0x04	; 4
    1544:	d6 cf       	rjmp	.-84     	; 0x14f2 <SDCardManager_WriteBlocks+0x5e>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1546:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		BlockAddress++;
		TotalBlocks--;
	}

	/* If the endpoint is empty, clear it ready for the next packet from the host */
	if (!(Endpoint_IsReadWriteAllowed()))
    154a:	85 fd       	sbrc	r24, 5
    154c:	05 c0       	rjmp	.+10     	; 0x1558 <SDCardManager_WriteBlocks+0xc4>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    154e:	e8 ee       	ldi	r30, 0xE8	; 232
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 81       	ld	r24, Z
    1554:	8b 77       	andi	r24, 0x7B	; 123
    1556:	80 83       	st	Z, r24
	  Endpoint_ClearOUT();
}
    1558:	df 91       	pop	r29
    155a:	cf 91       	pop	r28
    155c:	1f 91       	pop	r17
    155e:	0f 91       	pop	r16
    1560:	ff 90       	pop	r15
    1562:	ef 90       	pop	r14
    1564:	df 90       	pop	r13
    1566:	cf 90       	pop	r12
    1568:	bf 90       	pop	r11
    156a:	af 90       	pop	r10
    156c:	7f 90       	pop	r7
    156e:	6f 90       	pop	r6
    1570:	5f 90       	pop	r5
    1572:	4f 90       	pop	r4
    1574:	08 95       	ret

00001576 <SDCardManager_ReadBlocks>:
	
	return 1;
}

void SDCardManager_ReadBlocks(USB_ClassInfo_MS_Device_t* MSInterfaceInfo, uint32_t BlockAddress, uint16_t TotalBlocks)
{
    1576:	4f 92       	push	r4
    1578:	5f 92       	push	r5
    157a:	6f 92       	push	r6
    157c:	7f 92       	push	r7
    157e:	8f 92       	push	r8
    1580:	9f 92       	push	r9
    1582:	af 92       	push	r10
    1584:	bf 92       	push	r11
    1586:	cf 92       	push	r12
    1588:	df 92       	push	r13
    158a:	ef 92       	push	r14
    158c:	ff 92       	push	r15
    158e:	0f 93       	push	r16
    1590:	1f 93       	push	r17
    1592:	cf 93       	push	r28
    1594:	df 93       	push	r29
    1596:	2a 01       	movw	r4, r20
    1598:	3b 01       	movw	r6, r22
    159a:	49 01       	movw	r8, r18
	static uint8_t buff_rd[512];
	int i;
	
	printf_P(PSTR("R %li %i\r\n"), BlockAddress, TotalBlocks);
    159c:	9f 92       	push	r9
    159e:	2f 93       	push	r18
    15a0:	7f 92       	push	r7
    15a2:	6f 92       	push	r6
    15a4:	5f 92       	push	r5
    15a6:	4f 93       	push	r20
    15a8:	8b e8       	ldi	r24, 0x8B	; 139
    15aa:	91 e0       	ldi	r25, 0x01	; 1
    15ac:	9f 93       	push	r25
    15ae:	8f 93       	push	r24
    15b0:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <printf_P>
	
	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
    15b4:	0e 94 47 14 	call	0x288e	; 0x288e <Endpoint_WaitUntilReady>
    15b8:	2d b7       	in	r18, 0x3d	; 61
    15ba:	3e b7       	in	r19, 0x3e	; 62
    15bc:	28 5f       	subi	r18, 0xF8	; 248
    15be:	3f 4f       	sbci	r19, 0xFF	; 255
    15c0:	0f b6       	in	r0, 0x3f	; 63
    15c2:	f8 94       	cli
    15c4:	3e bf       	out	0x3e, r19	; 62
    15c6:	0f be       	out	0x3f, r0	; 63
    15c8:	2d bf       	out	0x3d, r18	; 61
    15ca:	81 11       	cpse	r24, r1
    15cc:	62 c0       	rjmp	.+196    	; 0x1692 <SDCardManager_ReadBlocks+0x11c>
	  return;
	
	while (TotalBlocks)
    15ce:	81 14       	cp	r8, r1
    15d0:	91 04       	cpc	r9, r1
    15d2:	09 f4       	brne	.+2      	; 0x15d6 <SDCardManager_ReadBlocks+0x60>
    15d4:	55 c0       	rjmp	.+170    	; 0x1680 <SDCardManager_ReadBlocks+0x10a>
    15d6:	0f 2e       	mov	r0, r31
    15d8:	f7 e5       	ldi	r31, 0x57	; 87
    15da:	af 2e       	mov	r10, r31
    15dc:	f4 e0       	ldi	r31, 0x04	; 4
    15de:	bf 2e       	mov	r11, r31
    15e0:	f0 2d       	mov	r31, r0
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    15e2:	0f 2e       	mov	r0, r31
    15e4:	f8 ee       	ldi	r31, 0xE8	; 232
    15e6:	cf 2e       	mov	r12, r31
    15e8:	d1 2c       	mov	r13, r1
    15ea:	f0 2d       	mov	r31, r0
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    15ec:	0f 2e       	mov	r0, r31
    15ee:	f1 ef       	ldi	r31, 0xF1	; 241
    15f0:	ef 2e       	mov	r14, r31
    15f2:	f1 2c       	mov	r15, r1
    15f4:	f0 2d       	mov	r31, r0
	{
		disk_read(0, buff_rd, BlockAddress, 1);
    15f6:	01 e0       	ldi	r16, 0x01	; 1
    15f8:	10 e0       	ldi	r17, 0x00	; 0
    15fa:	a3 01       	movw	r20, r6
    15fc:	92 01       	movw	r18, r4
    15fe:	67 e5       	ldi	r22, 0x57	; 87
    1600:	72 e0       	ldi	r23, 0x02	; 2
    1602:	80 e0       	ldi	r24, 0x00	; 0
    1604:	0e 94 18 02 	call	0x430	; 0x430 <disk_read>
    1608:	c7 e5       	ldi	r28, 0x57	; 87
    160a:	d2 e0       	ldi	r29, 0x02	; 2
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    160c:	f6 01       	movw	r30, r12
    160e:	80 81       	ld	r24, Z
 */

static inline uint8_t SDCardManager_ReadBlockHandler(uint8_t* buffer, void* a, void* p)
{
	/* Check if the endpoint is currently full */
	if (!(Endpoint_IsReadWriteAllowed()))
    1610:	85 fd       	sbrc	r24, 5
    1612:	07 c0       	rjmp	.+14     	; 0x1622 <SDCardManager_ReadBlocks+0xac>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1614:	80 81       	ld	r24, Z
    1616:	8e 77       	andi	r24, 0x7E	; 126
    1618:	80 83       	st	Z, r24
	{
		/* Clear the endpoint bank to send its contents to the host */
		Endpoint_ClearIN();
		
		/* Wait until the endpoint is ready for more data */
		if (Endpoint_WaitUntilReady())
    161a:	0e 94 47 14 	call	0x288e	; 0x288e <Endpoint_WaitUntilReady>
    161e:	81 11       	cpse	r24, r1
    1620:	21 c0       	rjmp	.+66     	; 0x1664 <SDCardManager_ReadBlocks+0xee>
		  return 0;
	}
		
	Endpoint_Write_8(buffer[0]);
    1622:	88 81       	ld	r24, Y
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1624:	f7 01       	movw	r30, r14
    1626:	80 83       	st	Z, r24
	Endpoint_Write_8(buffer[1]);
    1628:	89 81       	ldd	r24, Y+1	; 0x01
    162a:	80 83       	st	Z, r24
	Endpoint_Write_8(buffer[2]);
    162c:	8a 81       	ldd	r24, Y+2	; 0x02
    162e:	80 83       	st	Z, r24
	Endpoint_Write_8(buffer[3]);
    1630:	8b 81       	ldd	r24, Y+3	; 0x03
    1632:	80 83       	st	Z, r24
	Endpoint_Write_8(buffer[4]);
    1634:	8c 81       	ldd	r24, Y+4	; 0x04
    1636:	80 83       	st	Z, r24
	Endpoint_Write_8(buffer[5]);
    1638:	8d 81       	ldd	r24, Y+5	; 0x05
    163a:	80 83       	st	Z, r24
	Endpoint_Write_8(buffer[6]);
    163c:	8e 81       	ldd	r24, Y+6	; 0x06
    163e:	80 83       	st	Z, r24
	Endpoint_Write_8(buffer[7]);
    1640:	8f 81       	ldd	r24, Y+7	; 0x07
    1642:	80 83       	st	Z, r24
	Endpoint_Write_8(buffer[8]);
    1644:	88 85       	ldd	r24, Y+8	; 0x08
    1646:	80 83       	st	Z, r24
	Endpoint_Write_8(buffer[9]);
    1648:	89 85       	ldd	r24, Y+9	; 0x09
    164a:	80 83       	st	Z, r24
	Endpoint_Write_8(buffer[10]);
    164c:	8a 85       	ldd	r24, Y+10	; 0x0a
    164e:	80 83       	st	Z, r24
	Endpoint_Write_8(buffer[11]);
    1650:	8b 85       	ldd	r24, Y+11	; 0x0b
    1652:	80 83       	st	Z, r24
	Endpoint_Write_8(buffer[12]);
    1654:	8c 85       	ldd	r24, Y+12	; 0x0c
    1656:	80 83       	st	Z, r24
	Endpoint_Write_8(buffer[13]);
    1658:	8d 85       	ldd	r24, Y+13	; 0x0d
    165a:	80 83       	st	Z, r24
	Endpoint_Write_8(buffer[14]);
    165c:	8e 85       	ldd	r24, Y+14	; 0x0e
    165e:	80 83       	st	Z, r24
	Endpoint_Write_8(buffer[15]);
    1660:	8f 85       	ldd	r24, Y+15	; 0x0f
    1662:	80 83       	st	Z, r24
    1664:	60 96       	adiw	r28, 0x10	; 16
	  return;
	
	while (TotalBlocks)
	{
		disk_read(0, buff_rd, BlockAddress, 1);
		for (i = 0; i < 32; i++)
    1666:	ac 16       	cp	r10, r28
    1668:	bd 06       	cpc	r11, r29
    166a:	81 f6       	brne	.-96     	; 0x160c <SDCardManager_ReadBlocks+0x96>
		{
			SDCardManager_ReadBlockHandler(buff_rd + (16 * i), NULL, NULL);	
		}
		/* Decrement the blocks remaining counter */
		BlockAddress++;
    166c:	ff ef       	ldi	r31, 0xFF	; 255
    166e:	4f 1a       	sub	r4, r31
    1670:	5f 0a       	sbc	r5, r31
    1672:	6f 0a       	sbc	r6, r31
    1674:	7f 0a       	sbc	r7, r31
		TotalBlocks--;
    1676:	21 e0       	ldi	r18, 0x01	; 1
    1678:	82 1a       	sub	r8, r18
    167a:	91 08       	sbc	r9, r1
	
	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;
	
	while (TotalBlocks)
    167c:	09 f0       	breq	.+2      	; 0x1680 <SDCardManager_ReadBlocks+0x10a>
    167e:	bb cf       	rjmp	.-138    	; 0x15f6 <SDCardManager_ReadBlocks+0x80>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1680:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		BlockAddress++;
		TotalBlocks--;
	}
	
	/* If the endpoint is full, send its contents to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
    1684:	85 fd       	sbrc	r24, 5
    1686:	05 c0       	rjmp	.+10     	; 0x1692 <SDCardManager_ReadBlocks+0x11c>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1688:	e8 ee       	ldi	r30, 0xE8	; 232
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	80 81       	ld	r24, Z
    168e:	8e 77       	andi	r24, 0x7E	; 126
    1690:	80 83       	st	Z, r24
	  Endpoint_ClearIN();
}
    1692:	df 91       	pop	r29
    1694:	cf 91       	pop	r28
    1696:	1f 91       	pop	r17
    1698:	0f 91       	pop	r16
    169a:	ff 90       	pop	r15
    169c:	ef 90       	pop	r14
    169e:	df 90       	pop	r13
    16a0:	cf 90       	pop	r12
    16a2:	bf 90       	pop	r11
    16a4:	af 90       	pop	r10
    16a6:	9f 90       	pop	r9
    16a8:	8f 90       	pop	r8
    16aa:	7f 90       	pop	r7
    16ac:	6f 90       	pop	r6
    16ae:	5f 90       	pop	r5
    16b0:	4f 90       	pop	r4
    16b2:	08 95       	ret

000016b4 <SDCardManager_CheckDataflashOperation>:
 *  \return Boolean true if all media chips are working, false otherwise
 */
bool SDCardManager_CheckDataflashOperation(void)
{	
	return true;
}
    16b4:	81 e0       	ldi	r24, 0x01	; 1
    16b6:	08 95       	ret

000016b8 <__vector_17>:
	
	sei();
}

ISR(TIMER1_COMPA_vect)
{
    16b8:	1f 92       	push	r1
    16ba:	0f 92       	push	r0
    16bc:	0f b6       	in	r0, 0x3f	; 63
    16be:	0f 92       	push	r0
    16c0:	11 24       	eor	r1, r1
    16c2:	0b b6       	in	r0, 0x3b	; 59
    16c4:	0f 92       	push	r0
    16c6:	2f 93       	push	r18
    16c8:	3f 93       	push	r19
    16ca:	4f 93       	push	r20
    16cc:	5f 93       	push	r21
    16ce:	6f 93       	push	r22
    16d0:	7f 93       	push	r23
    16d2:	8f 93       	push	r24
    16d4:	9f 93       	push	r25
    16d6:	af 93       	push	r26
    16d8:	bf 93       	push	r27
    16da:	ef 93       	push	r30
    16dc:	ff 93       	push	r31
	Timer++;			/* Performance counter for this module */
    16de:	80 91 63 06 	lds	r24, 0x0663	; 0x800663 <Timer>
    16e2:	90 91 64 06 	lds	r25, 0x0664	; 0x800664 <Timer+0x1>
    16e6:	01 96       	adiw	r24, 0x01	; 1
    16e8:	90 93 64 06 	sts	0x0664, r25	; 0x800664 <Timer+0x1>
    16ec:	80 93 63 06 	sts	0x0663, r24	; 0x800663 <Timer>
	disk_timerproc();	/* Drive timer procedure of low level disk I/O module */
    16f0:	0e 94 3e 02 	call	0x47c	; 0x47c <disk_timerproc>
}
    16f4:	ff 91       	pop	r31
    16f6:	ef 91       	pop	r30
    16f8:	bf 91       	pop	r27
    16fa:	af 91       	pop	r26
    16fc:	9f 91       	pop	r25
    16fe:	8f 91       	pop	r24
    1700:	7f 91       	pop	r23
    1702:	6f 91       	pop	r22
    1704:	5f 91       	pop	r21
    1706:	4f 91       	pop	r20
    1708:	3f 91       	pop	r19
    170a:	2f 91       	pop	r18
    170c:	0f 90       	pop	r0
    170e:	0b be       	out	0x3b, r0	; 59
    1710:	0f 90       	pop	r0
    1712:	0f be       	out	0x3f, r0	; 63
    1714:	0f 90       	pop	r0
    1716:	1f 90       	pop	r1
    1718:	18 95       	reti

0000171a <SetupHardware>:
/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{	
#if (ARCH == ARCH_AVR8)
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
    171a:	84 b7       	in	r24, 0x34	; 52
    171c:	87 7f       	andi	r24, 0xF7	; 247
    171e:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    1720:	0f b6       	in	r0, 0x3f	; 63
    1722:	f8 94       	cli
    1724:	a8 95       	wdr
    1726:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    172a:	88 61       	ori	r24, 0x18	; 24
    172c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1730:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    1734:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	80 e8       	ldi	r24, 0x80	; 128
    173a:	0f b6       	in	r0, 0x3f	; 63
    173c:	f8 94       	cli
    173e:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    1742:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    1746:	0f be       	out	0x3f, r0	; 63
{
	//MCUCR = _BV(JTD); MCUCR = _BV(JTD);	/* Disable JTAG */

	//pull up 
	
	PORTA = 0b11111111;
    1748:	8f ef       	ldi	r24, 0xFF	; 255
    174a:	82 b9       	out	0x02, r24	; 2
	PORTB = 0b11111111;
    174c:	85 b9       	out	0x05, r24	; 5
	PORTC = 0b11111111;
    174e:	88 b9       	out	0x08, r24	; 8
	PORTD = 0b11111111;
    1750:	8b b9       	out	0x0b, r24	; 11
	//PORTE = 0b11111111;
	PORTF = 0b11111111;
    1752:	81 bb       	out	0x11, r24	; 17
	//PORTG = 0b00011111;
	
    TCCR1A = 0;     // set entire TCCR1A register to 0
    1754:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    TCCR1B = 0;
    1758:	e1 e8       	ldi	r30, 0x81	; 129
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	10 82       	st	Z, r1
    TCCR1B |=(1<<WGM12);      //CTC mode; clock timer comare
    175e:	80 81       	ld	r24, Z
    1760:	88 60       	ori	r24, 0x08	; 8
    1762:	80 83       	st	Z, r24
    TIMSK1 |= (1<<OCIE1A);  //ENABLE INTERUPTs
    1764:	af e6       	ldi	r26, 0x6F	; 111
    1766:	b0 e0       	ldi	r27, 0x00	; 0
    1768:	8c 91       	ld	r24, X
    176a:	82 60       	ori	r24, 0x02	; 2
    176c:	8c 93       	st	X, r24
    OCR1A = 0x4E20; 
    176e:	80 e2       	ldi	r24, 0x20	; 32
    1770:	9e e4       	ldi	r25, 0x4E	; 78
    1772:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1776:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    TCCR1B |=  (1<<CS11); //PRESCALER 
    177a:	80 81       	ld	r24, Z
    177c:	82 60       	ori	r24, 0x02	; 2
    177e:	80 83       	st	Z, r24
	
	sei();
    1780:	78 94       	sei
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed);
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
    1782:	83 e3       	ldi	r24, 0x33	; 51
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
    178a:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
    178e:	86 e0       	ldi	r24, 0x06	; 6
    1790:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
    1794:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
    1798:	88 e1       	ldi	r24, 0x18	; 24
    179a:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>

				DDRD  |= (1 << 3);
    179e:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
    17a0:	5a 9a       	sbi	0x0b, 2	; 11
		
	/* Hardware Initialization */
	ioinit();
	
	Serial_Init(9600, false);
	Serial_SendString("\r\n\r\nSetup mass storage sd and keyboard adapted by David Reguera Garcia aka Dreg https://github.com/David-Reguera-Garcia-Dreg - http://www.fr33project.org\r\n");
    17a2:	80 e8       	ldi	r24, 0x80	; 128
    17a4:	91 e0       	ldi	r25, 0x01	; 1
    17a6:	ee d0       	rcall	.+476    	; 0x1984 <Serial_SendString>
	Serial_CreateStream(NULL);
    17a8:	80 e0       	ldi	r24, 0x00	; 0
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	01 d1       	rcall	.+514    	; 0x19b0 <Serial_CreateStream>
	printf("using fatfs http://elm-chan.org/fsw/ff/00index_e.html\r\n");
    17ae:	8c e1       	ldi	r24, 0x1C	; 28
    17b0:	92 e0       	ldi	r25, 0x02	; 2
    17b2:	0e 94 f2 17 	call	0x2fe4	; 0x2fe4 <puts>
	printf_P(PSTR("ported from LUFA_091223 http://www.fourwalledcubicle.com/LUFA.php - based in Mathieu Sonet lufa-sdcard-mass-storage-demo for Teensy2 ATMEGA32U4 https://bitbucket.org/elasticsheep/lufa-sdcard-mass-storage-demo/src/default/ using http://www.roland-riegel.de/sd-reader/index.html MMC/SD/SDHC card reader library\r\n\r\n"));
    17b6:	8d e0       	ldi	r24, 0x0D	; 13
    17b8:	92 e0       	ldi	r25, 0x02	; 2
    17ba:	9f 93       	push	r25
    17bc:	8f 93       	push	r24
    17be:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <printf_P>

	SDCardManager_Init();
    17c2:	c5 dd       	rcall	.-1142   	; 0x134e <SDCardManager_Init>

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
    17c4:	8a b1       	in	r24, 0x0a	; 10
    17c6:	80 6f       	ori	r24, 0xF0	; 240
    17c8:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
    17ca:	8b b1       	in	r24, 0x0b	; 11
    17cc:	8f 70       	andi	r24, 0x0F	; 15
    17ce:	8b b9       	out	0x0b, r24	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Buttons_Init(void)
			{
				DDRE  &= ~BUTTONS_BUTTON1;
    17d0:	6a 98       	cbi	0x0d, 2	; 13
				PORTE |=  BUTTONS_BUTTON1;
    17d2:	72 9a       	sbi	0x0e, 2	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~JOY_BMASK;
    17d4:	84 b1       	in	r24, 0x04	; 4
    17d6:	8f 71       	andi	r24, 0x1F	; 31
    17d8:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~JOY_EMASK;
    17da:	8d b1       	in	r24, 0x0d	; 13
    17dc:	8f 7c       	andi	r24, 0xCF	; 207
    17de:	8d b9       	out	0x0d, r24	; 13

				PORTB |=  JOY_BMASK;
    17e0:	85 b1       	in	r24, 0x05	; 5
    17e2:	80 6e       	ori	r24, 0xE0	; 224
    17e4:	85 b9       	out	0x05, r24	; 5
				PORTE |=  JOY_EMASK;
    17e6:	8e b1       	in	r24, 0x0e	; 14
    17e8:	80 63       	ori	r24, 0x30	; 48
    17ea:	8e b9       	out	0x0e, r24	; 14
	#ifndef NO_JOYSTICK
	Buttons_Init();
	Joystick_Init();
	#endif 

	USB_Init();
    17ec:	0e 94 cd 14 	call	0x299a	; 0x299a <USB_Init>
}
    17f0:	0f 90       	pop	r0
    17f2:	0f 90       	pop	r0
    17f4:	08 95       	ret

000017f6 <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
    17f6:	91 df       	rcall	.-222    	; 0x171a <SetupHardware>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
    17f8:	8b b1       	in	r24, 0x0b	; 11
    17fa:	8f 70       	andi	r24, 0x0F	; 15
    17fc:	80 61       	ori	r24, 0x10	; 16
    17fe:	8b b9       	out	0x0b, r24	; 11
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    1800:	78 94       	sei

	GlobalInterruptEnable();

	for (;;)
	{
		MS_Device_USBTask(&Disk_MS_Interface);
    1802:	83 e2       	ldi	r24, 0x23	; 35
    1804:	91 e0       	ldi	r25, 0x01	; 1
    1806:	66 d3       	rcall	.+1740   	; 0x1ed4 <MS_Device_USBTask>
		HID_Device_USBTask(&Keyboard_HID_Interface);
    1808:	83 e1       	ldi	r24, 0x13	; 19
    180a:	91 e0       	ldi	r25, 0x01	; 1
    180c:	4c d2       	rcall	.+1176   	; 0x1ca6 <HID_Device_USBTask>
		USB_USBTask();
    180e:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <USB_USBTask>
    1812:	f7 cf       	rjmp	.-18     	; 0x1802 <main+0xc>

00001814 <EVENT_USB_Device_Connect>:
}

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	printf_P(PSTR("Connect\r\n"));
    1814:	83 e0       	ldi	r24, 0x03	; 3
    1816:	92 e0       	ldi	r25, 0x02	; 2
    1818:	9f 93       	push	r25
    181a:	8f 93       	push	r24
    181c:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <printf_P>
    1820:	8b b1       	in	r24, 0x0b	; 11
    1822:	8f 70       	andi	r24, 0x0F	; 15
    1824:	80 6a       	ori	r24, 0xA0	; 160
    1826:	8b b9       	out	0x0b, r24	; 11
	#ifndef NO_LEDS
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
	#endif
}
    1828:	0f 90       	pop	r0
    182a:	0f 90       	pop	r0
    182c:	08 95       	ret

0000182e <EVENT_USB_Device_Disconnect>:

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	printf_P(PSTR("Disconnect\r\n"));
    182e:	86 ef       	ldi	r24, 0xF6	; 246
    1830:	91 e0       	ldi	r25, 0x01	; 1
    1832:	9f 93       	push	r25
    1834:	8f 93       	push	r24
    1836:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <printf_P>
    183a:	8b b1       	in	r24, 0x0b	; 11
    183c:	8f 70       	andi	r24, 0x0F	; 15
    183e:	80 61       	ori	r24, 0x10	; 16
    1840:	8b b9       	out	0x0b, r24	; 11
	#ifndef NO_LEDS
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	#endif
}
    1842:	0f 90       	pop	r0
    1844:	0f 90       	pop	r0
    1846:	08 95       	ret

00001848 <EVENT_USB_Device_ConfigurationChanged>:

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
    1848:	cf 93       	push	r28
	bool ConfigSuccess = true;
	
	printf_P(PSTR("Ready\r\n"));
    184a:	8e ee       	ldi	r24, 0xEE	; 238
    184c:	91 e0       	ldi	r25, 0x01	; 1
    184e:	9f 93       	push	r25
    1850:	8f 93       	push	r24
    1852:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <printf_P>

	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Keyboard_HID_Interface);
    1856:	83 e1       	ldi	r24, 0x13	; 19
    1858:	91 e0       	ldi	r25, 0x01	; 1
    185a:	11 d2       	rcall	.+1058   	; 0x1c7e <HID_Device_ConfigureEndpoints>
    185c:	c8 2f       	mov	r28, r24
	ConfigSuccess &= MS_Device_ConfigureEndpoints(&Disk_MS_Interface);
    185e:	83 e2       	ldi	r24, 0x23	; 35
    1860:	91 e0       	ldi	r25, 0x01	; 1
    1862:	1e d3       	rcall	.+1596   	; 0x1ea0 <MS_Device_ConfigureEndpoints>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
    1864:	e2 ee       	ldi	r30, 0xE2	; 226
    1866:	f0 e0       	ldi	r31, 0x00	; 0
    1868:	90 81       	ld	r25, Z
    186a:	94 60       	ori	r25, 0x04	; 4
    186c:	90 83       	st	Z, r25

	USB_Device_EnableSOFEvents();

	#ifndef NO_LEDS
	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
    186e:	0f 90       	pop	r0
    1870:	0f 90       	pop	r0
    1872:	cc 23       	and	r28, r28
    1874:	11 f0       	breq	.+4      	; 0x187a <EVENT_USB_Device_ConfigurationChanged+0x32>
    1876:	81 11       	cpse	r24, r1
    1878:	02 c0       	rjmp	.+4      	; 0x187e <EVENT_USB_Device_ConfigurationChanged+0x36>
    187a:	90 e9       	ldi	r25, 0x90	; 144
    187c:	01 c0       	rjmp	.+2      	; 0x1880 <EVENT_USB_Device_ConfigurationChanged+0x38>
    187e:	90 e6       	ldi	r25, 0x60	; 96
    1880:	8b b1       	in	r24, 0x0b	; 11
    1882:	8f 70       	andi	r24, 0x0F	; 15
    1884:	89 2b       	or	r24, r25
    1886:	8b b9       	out	0x0b, r24	; 11
	#endif
}
    1888:	cf 91       	pop	r28
    188a:	08 95       	ret

0000188c <EVENT_USB_Device_ControlRequest>:

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	MS_Device_ProcessControlRequest(&Disk_MS_Interface);
    188c:	83 e2       	ldi	r24, 0x23	; 35
    188e:	91 e0       	ldi	r25, 0x01	; 1
    1890:	ca d2       	rcall	.+1428   	; 0x1e26 <MS_Device_ProcessControlRequest>
	HID_Device_ProcessControlRequest(&Keyboard_HID_Interface);
    1892:	83 e1       	ldi	r24, 0x13	; 19
    1894:	91 e0       	ldi	r25, 0x01	; 1
    1896:	a8 c0       	rjmp	.+336    	; 0x19e8 <HID_Device_ProcessControlRequest>
    1898:	08 95       	ret

0000189a <CALLBACK_MS_Device_SCSICommandReceived>:
    189a:	2b b1       	in	r18, 0x0b	; 11
    189c:	2f 70       	andi	r18, 0x0F	; 15
    189e:	20 62       	ori	r18, 0x20	; 32
    18a0:	2b b9       	out	0x0b, r18	; 11

	#ifndef NO_LEDS
	LEDs_SetAllLEDs(LEDMASK_USB_BUSY);
	#endif
	
	CommandSuccess = SCSI_DecodeSCSICommand(MSInterfaceInfo);
    18a2:	06 dc       	rcall	.-2036   	; 0x10b0 <SCSI_DecodeSCSICommand>
    18a4:	9b b1       	in	r25, 0x0b	; 11
    18a6:	9f 70       	andi	r25, 0x0F	; 15
    18a8:	90 66       	ori	r25, 0x60	; 96
    18aa:	9b b9       	out	0x0b, r25	; 11
	#ifndef NO_LEDS
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
	#endif

	return CommandSuccess;
}
    18ac:	08 95       	ret

000018ae <EVENT_USB_Device_StartOfFrame>:
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
    18ae:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <Keyboard_HID_Interface+0xe>
    18b2:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <Keyboard_HID_Interface+0xf>
    18b6:	00 97       	sbiw	r24, 0x00	; 0
    18b8:	29 f0       	breq	.+10     	; 0x18c4 <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
    18ba:	01 97       	sbiw	r24, 0x01	; 1
    18bc:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <Keyboard_HID_Interface+0xf>
    18c0:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <Keyboard_HID_Interface+0xe>
    18c4:	08 95       	ret

000018c6 <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                         uint8_t* const ReportID,
                                         const uint8_t ReportType,
                                         void* ReportData,
                                         uint16_t* const ReportSize)
{
    18c6:	0f 93       	push	r16
    18c8:	1f 93       	push	r17
    18ca:	f9 01       	movw	r30, r18
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> JOY_PORTE_MASK_SHIFT));
    18cc:	83 b1       	in	r24, 0x03	; 3
    18ce:	9c b1       	in	r25, 0x0c	; 12
    18d0:	90 95       	com	r25
    18d2:	90 73       	andi	r25, 0x30	; 48
    18d4:	96 95       	lsr	r25
    18d6:	80 95       	com	r24
    18d8:	80 7e       	andi	r24, 0xE0	; 224
    18da:	89 2b       	or	r24, r25
			}

			static inline uint8_t Buttons_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Buttons_GetStatus(void)
			{
				return ((PINE & BUTTONS_BUTTON1) ^ BUTTONS_BUTTON1);
    18dc:	9c b1       	in	r25, 0x0c	; 12
    18de:	90 95       	com	r25
    18e0:	94 70       	andi	r25, 0x04	; 4

	#ifndef NO_JOYSTICK
	uint8_t JoyStatus_LCL    = Joystick_GetStatus();
	uint8_t ButtonStatus_LCL = Buttons_GetStatus();

	KeyboardReport->Modifier = HID_KEYBOARD_MODIFIER_LEFTSHIFT;
    18e2:	22 e0       	ldi	r18, 0x02	; 2
    18e4:	20 83       	st	Z, r18

	if (JoyStatus_LCL & JOY_UP)
    18e6:	88 23       	and	r24, r24
    18e8:	1c f4       	brge	.+6      	; 0x18f0 <CALLBACK_HID_Device_CreateHIDReport+0x2a>
	  KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_A;
    18ea:	24 e0       	ldi	r18, 0x04	; 4
    18ec:	22 83       	std	Z+2, r18	; 0x02
    18ee:	04 c0       	rjmp	.+8      	; 0x18f8 <CALLBACK_HID_Device_CreateHIDReport+0x32>
	else if (JoyStatus_LCL & JOY_DOWN)
    18f0:	84 ff       	sbrs	r24, 4
    18f2:	02 c0       	rjmp	.+4      	; 0x18f8 <CALLBACK_HID_Device_CreateHIDReport+0x32>
	  KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_B;
    18f4:	25 e0       	ldi	r18, 0x05	; 5
    18f6:	22 83       	std	Z+2, r18	; 0x02

	if (JoyStatus_LCL & JOY_LEFT)
    18f8:	86 ff       	sbrs	r24, 6
    18fa:	03 c0       	rjmp	.+6      	; 0x1902 <CALLBACK_HID_Device_CreateHIDReport+0x3c>
	  KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_C;
    18fc:	26 e0       	ldi	r18, 0x06	; 6
    18fe:	22 83       	std	Z+2, r18	; 0x02
    1900:	04 c0       	rjmp	.+8      	; 0x190a <CALLBACK_HID_Device_CreateHIDReport+0x44>
	else if (JoyStatus_LCL & JOY_RIGHT)
    1902:	83 ff       	sbrs	r24, 3
    1904:	02 c0       	rjmp	.+4      	; 0x190a <CALLBACK_HID_Device_CreateHIDReport+0x44>
	  KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_D;
    1906:	27 e0       	ldi	r18, 0x07	; 7
    1908:	22 83       	std	Z+2, r18	; 0x02

	if (JoyStatus_LCL & JOY_PRESS)
    190a:	85 ff       	sbrs	r24, 5
    190c:	02 c0       	rjmp	.+4      	; 0x1912 <CALLBACK_HID_Device_CreateHIDReport+0x4c>
	  KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_E;
    190e:	88 e0       	ldi	r24, 0x08	; 8
    1910:	82 83       	std	Z+2, r24	; 0x02

	if (ButtonStatus_LCL & BUTTONS_BUTTON1)
    1912:	99 23       	and	r25, r25
    1914:	11 f0       	breq	.+4      	; 0x191a <CALLBACK_HID_Device_CreateHIDReport+0x54>
	  KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_F;
    1916:	89 e0       	ldi	r24, 0x09	; 9
    1918:	82 83       	std	Z+2, r24	; 0x02
	#endif 

	*ReportSize = sizeof(USB_KeyboardReport_Data_t);
    191a:	88 e0       	ldi	r24, 0x08	; 8
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	f8 01       	movw	r30, r16
    1920:	91 83       	std	Z+1, r25	; 0x01
    1922:	80 83       	st	Z, r24
	return false;
}
    1924:	80 e0       	ldi	r24, 0x00	; 0
    1926:	1f 91       	pop	r17
    1928:	0f 91       	pop	r16
    192a:	08 95       	ret

0000192c <CALLBACK_HID_Device_ProcessHIDReport>:
{
	#ifndef NO_LEDS
	uint8_t  LEDMask   = LEDS_NO_LEDS;
	uint8_t* LEDReport = (uint8_t*)ReportData;

	if (*LEDReport & HID_KEYBOARD_LED_NUMLOCK)
    192c:	f9 01       	movw	r30, r18
    192e:	90 81       	ld	r25, Z
    1930:	90 ff       	sbrs	r25, 0
    1932:	02 c0       	rjmp	.+4      	; 0x1938 <CALLBACK_HID_Device_ProcessHIDReport+0xc>
	  LEDMask |= LEDS_LED1;
    1934:	80 e1       	ldi	r24, 0x10	; 16
    1936:	01 c0       	rjmp	.+2      	; 0x193a <CALLBACK_HID_Device_ProcessHIDReport+0xe>
                                          const uint8_t ReportType,
                                          const void* ReportData,
                                          const uint16_t ReportSize)
{
	#ifndef NO_LEDS
	uint8_t  LEDMask   = LEDS_NO_LEDS;
    1938:	80 e0       	ldi	r24, 0x00	; 0
	uint8_t* LEDReport = (uint8_t*)ReportData;

	if (*LEDReport & HID_KEYBOARD_LED_NUMLOCK)
	  LEDMask |= LEDS_LED1;

	if (*LEDReport & HID_KEYBOARD_LED_CAPSLOCK)
    193a:	91 fd       	sbrc	r25, 1
	  LEDMask |= LEDS_LED3;
    193c:	80 68       	ori	r24, 0x80	; 128

	if (*LEDReport & HID_KEYBOARD_LED_SCROLLLOCK)
    193e:	92 fd       	sbrc	r25, 2
	  LEDMask |= LEDS_LED4;
    1940:	80 64       	ori	r24, 0x40	; 64
    1942:	9b b1       	in	r25, 0x0b	; 11
    1944:	9f 70       	andi	r25, 0x0F	; 15
    1946:	89 2b       	or	r24, r25
    1948:	8b b9       	out	0x0b, r24	; 11
    194a:	08 95       	ret

0000194c <Serial_putchar>:
{
	uint8_t* CurrByte = (uint8_t*)Buffer;

	while (Length--)
	  Serial_SendByte(*(CurrByte++));
}
    194c:	e8 ec       	ldi	r30, 0xC8	; 200
    194e:	f0 e0       	ldi	r31, 0x00	; 0
    1950:	90 81       	ld	r25, Z
    1952:	95 ff       	sbrs	r25, 5
    1954:	fd cf       	rjmp	.-6      	; 0x1950 <Serial_putchar+0x4>
    1956:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    195a:	80 e0       	ldi	r24, 0x00	; 0
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	08 95       	ret

00001960 <Serial_getchar>:
    1960:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    1964:	88 23       	and	r24, r24
    1966:	44 f4       	brge	.+16     	; 0x1978 <Serial_getchar+0x18>
    1968:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    196c:	88 23       	and	r24, r24
    196e:	3c f4       	brge	.+14     	; 0x197e <Serial_getchar+0x1e>
    1970:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	08 95       	ret
    1978:	8e ef       	ldi	r24, 0xFE	; 254
    197a:	9f ef       	ldi	r25, 0xFF	; 255
    197c:	08 95       	ret
    197e:	8f ef       	ldi	r24, 0xFF	; 255
    1980:	9f ef       	ldi	r25, 0xFF	; 255
    1982:	08 95       	ret

00001984 <Serial_SendString>:
    1984:	cf 93       	push	r28
    1986:	df 93       	push	r29
    1988:	fc 01       	movw	r30, r24
    198a:	20 81       	ld	r18, Z
    198c:	22 23       	and	r18, r18
    198e:	69 f0       	breq	.+26     	; 0x19aa <Serial_SendString+0x26>
    1990:	dc 01       	movw	r26, r24
    1992:	11 96       	adiw	r26, 0x01	; 1
    1994:	e8 ec       	ldi	r30, 0xC8	; 200
    1996:	f0 e0       	ldi	r31, 0x00	; 0
    1998:	ce ec       	ldi	r28, 0xCE	; 206
    199a:	d0 e0       	ldi	r29, 0x00	; 0
    199c:	90 81       	ld	r25, Z
    199e:	95 ff       	sbrs	r25, 5
    19a0:	fd cf       	rjmp	.-6      	; 0x199c <Serial_SendString+0x18>
    19a2:	28 83       	st	Y, r18
    19a4:	2d 91       	ld	r18, X+
    19a6:	21 11       	cpse	r18, r1
    19a8:	f9 cf       	rjmp	.-14     	; 0x199c <Serial_SendString+0x18>
    19aa:	df 91       	pop	r29
    19ac:	cf 91       	pop	r28
    19ae:	08 95       	ret

000019b0 <Serial_CreateStream>:

void Serial_CreateStream(FILE* Stream)
{
    19b0:	fc 01       	movw	r30, r24
	if (!(Stream))
    19b2:	89 2b       	or	r24, r25
    19b4:	49 f4       	brne	.+18     	; 0x19c8 <Serial_CreateStream+0x18>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    19b6:	e0 e8       	ldi	r30, 0x80	; 128
    19b8:	f6 e0       	ldi	r31, 0x06	; 6
    19ba:	85 e6       	ldi	r24, 0x65	; 101
    19bc:	96 e0       	ldi	r25, 0x06	; 6
    19be:	91 83       	std	Z+1, r25	; 0x01
    19c0:	80 83       	st	Z, r24
		stdout = Stream;
    19c2:	93 83       	std	Z+3, r25	; 0x03
    19c4:	82 83       	std	Z+2, r24	; 0x02

void Serial_CreateStream(FILE* Stream)
{
	if (!(Stream))
	{
		Stream = &USARTSerialStream;
    19c6:	fc 01       	movw	r30, r24
		stdin  = Stream;
		stdout = Stream;
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    19c8:	8e e0       	ldi	r24, 0x0E	; 14
    19ca:	df 01       	movw	r26, r30
    19cc:	1d 92       	st	X+, r1
    19ce:	8a 95       	dec	r24
    19d0:	e9 f7       	brne	.-6      	; 0x19cc <Serial_CreateStream+0x1c>
    19d2:	83 e0       	ldi	r24, 0x03	; 3
    19d4:	83 83       	std	Z+3, r24	; 0x03
    19d6:	86 ea       	ldi	r24, 0xA6	; 166
    19d8:	9c e0       	ldi	r25, 0x0C	; 12
    19da:	91 87       	std	Z+9, r25	; 0x09
    19dc:	80 87       	std	Z+8, r24	; 0x08
    19de:	80 eb       	ldi	r24, 0xB0	; 176
    19e0:	9c e0       	ldi	r25, 0x0C	; 12
    19e2:	93 87       	std	Z+11, r25	; 0x0b
    19e4:	82 87       	std	Z+10, r24	; 0x0a
    19e6:	08 95       	ret

000019e8 <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    19e8:	3f 92       	push	r3
    19ea:	4f 92       	push	r4
    19ec:	5f 92       	push	r5
    19ee:	6f 92       	push	r6
    19f0:	7f 92       	push	r7
    19f2:	8f 92       	push	r8
    19f4:	9f 92       	push	r9
    19f6:	af 92       	push	r10
    19f8:	bf 92       	push	r11
    19fa:	cf 92       	push	r12
    19fc:	df 92       	push	r13
    19fe:	ef 92       	push	r14
    1a00:	ff 92       	push	r15
    1a02:	0f 93       	push	r16
    1a04:	1f 93       	push	r17
    1a06:	cf 93       	push	r28
    1a08:	df 93       	push	r29
    1a0a:	00 d0       	rcall	.+0      	; 0x1a0c <HID_Device_ProcessControlRequest+0x24>
    1a0c:	1f 92       	push	r1
    1a0e:	cd b7       	in	r28, 0x3d	; 61
    1a10:	de b7       	in	r29, 0x3e	; 62
    1a12:	6c 01       	movw	r12, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
    1a14:	ed b6       	in	r14, 0x3d	; 61
    1a16:	fe b6       	in	r15, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1a18:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
    1a1c:	83 ff       	sbrs	r24, 3
    1a1e:	15 c1       	rjmp	.+554    	; 0x1c4a <HID_Device_ProcessControlRequest+0x262>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
    1a20:	f6 01       	movw	r30, r12
    1a22:	80 81       	ld	r24, Z
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	20 91 7c 06 	lds	r18, 0x067C	; 0x80067c <USB_ControlRequest+0x4>
    1a2a:	30 91 7d 06 	lds	r19, 0x067D	; 0x80067d <USB_ControlRequest+0x5>
    1a2e:	28 17       	cp	r18, r24
    1a30:	39 07       	cpc	r19, r25
    1a32:	09 f0       	breq	.+2      	; 0x1a36 <HID_Device_ProcessControlRequest+0x4e>
    1a34:	0a c1       	rjmp	.+532    	; 0x1c4a <HID_Device_ProcessControlRequest+0x262>
	  return;

	switch (USB_ControlRequest.bRequest)
    1a36:	80 91 79 06 	lds	r24, 0x0679	; 0x800679 <USB_ControlRequest+0x1>
    1a3a:	83 30       	cpi	r24, 0x03	; 3
    1a3c:	09 f4       	brne	.+2      	; 0x1a40 <HID_Device_ProcessControlRequest+0x58>
    1a3e:	a2 c0       	rjmp	.+324    	; 0x1b84 <HID_Device_ProcessControlRequest+0x19c>
    1a40:	30 f4       	brcc	.+12     	; 0x1a4e <HID_Device_ProcessControlRequest+0x66>
    1a42:	81 30       	cpi	r24, 0x01	; 1
    1a44:	71 f0       	breq	.+28     	; 0x1a62 <HID_Device_ProcessControlRequest+0x7a>
    1a46:	82 30       	cpi	r24, 0x02	; 2
    1a48:	09 f4       	brne	.+2      	; 0x1a4c <HID_Device_ProcessControlRequest+0x64>
    1a4a:	e4 c0       	rjmp	.+456    	; 0x1c14 <HID_Device_ProcessControlRequest+0x22c>
    1a4c:	fe c0       	rjmp	.+508    	; 0x1c4a <HID_Device_ProcessControlRequest+0x262>
    1a4e:	8a 30       	cpi	r24, 0x0A	; 10
    1a50:	09 f4       	brne	.+2      	; 0x1a54 <HID_Device_ProcessControlRequest+0x6c>
    1a52:	c4 c0       	rjmp	.+392    	; 0x1bdc <HID_Device_ProcessControlRequest+0x1f4>
    1a54:	8b 30       	cpi	r24, 0x0B	; 11
    1a56:	09 f4       	brne	.+2      	; 0x1a5a <HID_Device_ProcessControlRequest+0x72>
    1a58:	ad c0       	rjmp	.+346    	; 0x1bb4 <HID_Device_ProcessControlRequest+0x1cc>
    1a5a:	89 30       	cpi	r24, 0x09	; 9
    1a5c:	09 f0       	breq	.+2      	; 0x1a60 <HID_Device_ProcessControlRequest+0x78>
    1a5e:	f5 c0       	rjmp	.+490    	; 0x1c4a <HID_Device_ProcessControlRequest+0x262>
    1a60:	53 c0       	rjmp	.+166    	; 0x1b08 <HID_Device_ProcessControlRequest+0x120>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1a62:	80 91 78 06 	lds	r24, 0x0678	; 0x800678 <USB_ControlRequest>
    1a66:	81 3a       	cpi	r24, 0xA1	; 161
    1a68:	09 f0       	breq	.+2      	; 0x1a6c <HID_Device_ProcessControlRequest+0x84>
    1a6a:	ef c0       	rjmp	.+478    	; 0x1c4a <HID_Device_ProcessControlRequest+0x262>
			{
    1a6c:	ad b6       	in	r10, 0x3d	; 61
    1a6e:	be b6       	in	r11, 0x3e	; 62
				uint16_t ReportSize = 0;
    1a70:	1a 82       	std	Y+2, r1	; 0x02
    1a72:	19 82       	std	Y+1, r1	; 0x01
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    1a74:	e8 e7       	ldi	r30, 0x78	; 120
    1a76:	f6 e0       	ldi	r31, 0x06	; 6
    1a78:	82 81       	ldd	r24, Z+2	; 0x02
    1a7a:	13 81       	ldd	r17, Z+3	; 0x03
    1a7c:	8b 83       	std	Y+3, r24	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    1a7e:	f6 01       	movw	r30, r12
    1a80:	80 85       	ldd	r24, Z+8	; 0x08
    1a82:	48 2f       	mov	r20, r24
    1a84:	50 e0       	ldi	r21, 0x00	; 0
    1a86:	8d b7       	in	r24, 0x3d	; 61
    1a88:	9e b7       	in	r25, 0x3e	; 62
    1a8a:	84 1b       	sub	r24, r20
    1a8c:	95 0b       	sbc	r25, r21
    1a8e:	0f b6       	in	r0, 0x3f	; 63
    1a90:	f8 94       	cli
    1a92:	9e bf       	out	0x3e, r25	; 62
    1a94:	0f be       	out	0x3f, r0	; 63
    1a96:	8d bf       	out	0x3d, r24	; 61
    1a98:	ed b7       	in	r30, 0x3d	; 61
    1a9a:	fe b7       	in	r31, 0x3e	; 62
    1a9c:	31 96       	adiw	r30, 0x01	; 1
    1a9e:	4f 01       	movw	r8, r30

				memset(ReportData, 0, sizeof(ReportData));
    1aa0:	60 e0       	ldi	r22, 0x00	; 0
    1aa2:	70 e0       	ldi	r23, 0x00	; 0
    1aa4:	cf 01       	movw	r24, r30
    1aa6:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <memset>

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
    1aaa:	4f ef       	ldi	r20, 0xFF	; 255
    1aac:	41 0f       	add	r20, r17
    1aae:	8e 01       	movw	r16, r28
    1ab0:	0f 5f       	subi	r16, 0xFF	; 255
    1ab2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ab4:	94 01       	movw	r18, r8
    1ab6:	be 01       	movw	r22, r28
    1ab8:	6d 5f       	subi	r22, 0xFD	; 253
    1aba:	7f 4f       	sbci	r23, 0xFF	; 255
    1abc:	c6 01       	movw	r24, r12
    1abe:	03 df       	rcall	.-506    	; 0x18c6 <CALLBACK_HID_Device_CreateHIDReport>

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    1ac0:	f6 01       	movw	r30, r12
    1ac2:	86 81       	ldd	r24, Z+6	; 0x06
    1ac4:	97 81       	ldd	r25, Z+7	; 0x07
    1ac6:	00 97       	sbiw	r24, 0x00	; 0
    1ac8:	29 f0       	breq	.+10     	; 0x1ad4 <HID_Device_ProcessControlRequest+0xec>
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
    1aca:	40 85       	ldd	r20, Z+8	; 0x08
    1acc:	50 e0       	ldi	r21, 0x00	; 0
    1ace:	b4 01       	movw	r22, r8
    1ad0:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <memcpy>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1ad4:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1ad8:	e8 ee       	ldi	r30, 0xE8	; 232
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	80 81       	ld	r24, Z
    1ade:	87 7f       	andi	r24, 0xF7	; 247
    1ae0:	80 83       	st	Z, r24

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();

				if (ReportID)
    1ae2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae4:	81 11       	cpse	r24, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1ae6:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				  Endpoint_Write_8(ReportID);

				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    1aea:	69 81       	ldd	r22, Y+1	; 0x01
    1aec:	7a 81       	ldd	r23, Y+2	; 0x02
    1aee:	c4 01       	movw	r24, r8
    1af0:	8d d4       	rcall	.+2330   	; 0x240c <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1af2:	e8 ee       	ldi	r30, 0xE8	; 232
    1af4:	f0 e0       	ldi	r31, 0x00	; 0
    1af6:	80 81       	ld	r24, Z
    1af8:	8b 77       	andi	r24, 0x7B	; 123
    1afa:	80 83       	st	Z, r24
    1afc:	0f b6       	in	r0, 0x3f	; 63
    1afe:	f8 94       	cli
    1b00:	be be       	out	0x3e, r11	; 62
    1b02:	0f be       	out	0x3f, r0	; 63
    1b04:	ad be       	out	0x3d, r10	; 61
    1b06:	a1 c0       	rjmp	.+322    	; 0x1c4a <HID_Device_ProcessControlRequest+0x262>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1b08:	80 91 78 06 	lds	r24, 0x0678	; 0x800678 <USB_ControlRequest>
    1b0c:	81 32       	cpi	r24, 0x21	; 33
    1b0e:	09 f0       	breq	.+2      	; 0x1b12 <HID_Device_ProcessControlRequest+0x12a>
    1b10:	9c c0       	rjmp	.+312    	; 0x1c4a <HID_Device_ProcessControlRequest+0x262>
			{
    1b12:	6d b6       	in	r6, 0x3d	; 61
    1b14:	7e b6       	in	r7, 0x3e	; 62
				uint16_t ReportSize = USB_ControlRequest.wLength;
    1b16:	e8 e7       	ldi	r30, 0x78	; 120
    1b18:	f6 e0       	ldi	r31, 0x06	; 6
    1b1a:	06 81       	ldd	r16, Z+6	; 0x06
    1b1c:	17 81       	ldd	r17, Z+7	; 0x07
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    1b1e:	52 80       	ldd	r5, Z+2	; 0x02
    1b20:	43 80       	ldd	r4, Z+3	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
    1b22:	8d b7       	in	r24, 0x3d	; 61
    1b24:	9e b7       	in	r25, 0x3e	; 62
    1b26:	80 1b       	sub	r24, r16
    1b28:	91 0b       	sbc	r25, r17
    1b2a:	0f b6       	in	r0, 0x3f	; 63
    1b2c:	f8 94       	cli
    1b2e:	9e bf       	out	0x3e, r25	; 62
    1b30:	0f be       	out	0x3f, r0	; 63
    1b32:	8d bf       	out	0x3d, r24	; 61
    1b34:	ed b7       	in	r30, 0x3d	; 61
    1b36:	fe b7       	in	r31, 0x3e	; 62
    1b38:	31 96       	adiw	r30, 0x01	; 1
    1b3a:	4f 01       	movw	r8, r30
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1b3c:	0f 2e       	mov	r0, r31
    1b3e:	f8 ee       	ldi	r31, 0xE8	; 232
    1b40:	af 2e       	mov	r10, r31
    1b42:	b1 2c       	mov	r11, r1
    1b44:	f0 2d       	mov	r31, r0
    1b46:	f5 01       	movw	r30, r10
    1b48:	80 81       	ld	r24, Z
    1b4a:	87 7f       	andi	r24, 0xF7	; 247
    1b4c:	80 83       	st	Z, r24

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
    1b4e:	b8 01       	movw	r22, r16
    1b50:	c4 01       	movw	r24, r8
    1b52:	db d4       	rcall	.+2486   	; 0x250a <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1b54:	f5 01       	movw	r30, r10
    1b56:	80 81       	ld	r24, Z
    1b58:	8e 77       	andi	r24, 0x7E	; 126
    1b5a:	80 83       	st	Z, r24
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    1b5c:	21 e0       	ldi	r18, 0x01	; 1
    1b5e:	51 10       	cpse	r5, r1
    1b60:	01 c0       	rjmp	.+2      	; 0x1b64 <HID_Device_ProcessControlRequest+0x17c>
    1b62:	20 e0       	ldi	r18, 0x00	; 0
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	02 1b       	sub	r16, r18
    1b68:	13 0b       	sbc	r17, r19
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
    1b6a:	28 0d       	add	r18, r8
    1b6c:	39 1d       	adc	r19, r9

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    1b6e:	4f ef       	ldi	r20, 0xFF	; 255
    1b70:	44 0d       	add	r20, r4
    1b72:	65 2d       	mov	r22, r5
    1b74:	c6 01       	movw	r24, r12
    1b76:	da de       	rcall	.-588    	; 0x192c <CALLBACK_HID_Device_ProcessHIDReport>
    1b78:	0f b6       	in	r0, 0x3f	; 63
    1b7a:	f8 94       	cli
    1b7c:	7e be       	out	0x3e, r7	; 62
    1b7e:	0f be       	out	0x3f, r0	; 63
    1b80:	6d be       	out	0x3d, r6	; 61
    1b82:	63 c0       	rjmp	.+198    	; 0x1c4a <HID_Device_ProcessControlRequest+0x262>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1b84:	80 91 78 06 	lds	r24, 0x0678	; 0x800678 <USB_ControlRequest>
    1b88:	81 3a       	cpi	r24, 0xA1	; 161
    1b8a:	09 f0       	breq	.+2      	; 0x1b8e <HID_Device_ProcessControlRequest+0x1a6>
    1b8c:	5e c0       	rjmp	.+188    	; 0x1c4a <HID_Device_ProcessControlRequest+0x262>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1b8e:	e8 ee       	ldi	r30, 0xE8	; 232
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	80 81       	ld	r24, Z
    1b94:	87 7f       	andi	r24, 0xF7	; 247
    1b96:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1b98:	80 81       	ld	r24, Z
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    1b9a:	80 ff       	sbrs	r24, 0
    1b9c:	fd cf       	rjmp	.-6      	; 0x1b98 <HID_Device_ProcessControlRequest+0x1b0>
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
    1b9e:	f6 01       	movw	r30, r12
    1ba0:	81 85       	ldd	r24, Z+9	; 0x09
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1ba2:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1ba6:	e8 ee       	ldi	r30, 0xE8	; 232
    1ba8:	f0 e0       	ldi	r31, 0x00	; 0
    1baa:	80 81       	ld	r24, Z
    1bac:	8e 77       	andi	r24, 0x7E	; 126
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    1bae:	80 83       	st	Z, r24
    1bb0:	4a d6       	rcall	.+3220   	; 0x2846 <Endpoint_ClearStatusStage>
    1bb2:	4b c0       	rjmp	.+150    	; 0x1c4a <HID_Device_ProcessControlRequest+0x262>
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1bb4:	80 91 78 06 	lds	r24, 0x0678	; 0x800678 <USB_ControlRequest>
    1bb8:	81 32       	cpi	r24, 0x21	; 33
    1bba:	09 f0       	breq	.+2      	; 0x1bbe <HID_Device_ProcessControlRequest+0x1d6>
    1bbc:	46 c0       	rjmp	.+140    	; 0x1c4a <HID_Device_ProcessControlRequest+0x262>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1bbe:	e8 ee       	ldi	r30, 0xE8	; 232
    1bc0:	f0 e0       	ldi	r31, 0x00	; 0
    1bc2:	80 81       	ld	r24, Z
    1bc4:	87 7f       	andi	r24, 0xF7	; 247
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1bc6:	80 83       	st	Z, r24
    1bc8:	3e d6       	rcall	.+3196   	; 0x2846 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    1bca:	90 91 7a 06 	lds	r25, 0x067A	; 0x80067a <USB_ControlRequest+0x2>
    1bce:	81 e0       	ldi	r24, 0x01	; 1
    1bd0:	91 11       	cpse	r25, r1
    1bd2:	01 c0       	rjmp	.+2      	; 0x1bd6 <HID_Device_ProcessControlRequest+0x1ee>
    1bd4:	80 e0       	ldi	r24, 0x00	; 0
    1bd6:	f6 01       	movw	r30, r12
    1bd8:	81 87       	std	Z+9, r24	; 0x09
    1bda:	37 c0       	rjmp	.+110    	; 0x1c4a <HID_Device_ProcessControlRequest+0x262>
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1bdc:	80 91 78 06 	lds	r24, 0x0678	; 0x800678 <USB_ControlRequest>
    1be0:	81 32       	cpi	r24, 0x21	; 33
    1be2:	99 f5       	brne	.+102    	; 0x1c4a <HID_Device_ProcessControlRequest+0x262>
    1be4:	e8 ee       	ldi	r30, 0xE8	; 232
    1be6:	f0 e0       	ldi	r31, 0x00	; 0
    1be8:	80 81       	ld	r24, Z
    1bea:	87 7f       	andi	r24, 0xF7	; 247
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1bec:	80 83       	st	Z, r24
    1bee:	2b d6       	rcall	.+3158   	; 0x2846 <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
    1bf0:	80 91 7a 06 	lds	r24, 0x067A	; 0x80067a <USB_ControlRequest+0x2>
    1bf4:	90 91 7b 06 	lds	r25, 0x067B	; 0x80067b <USB_ControlRequest+0x3>
    1bf8:	88 27       	eor	r24, r24
    1bfa:	00 24       	eor	r0, r0
    1bfc:	88 0f       	add	r24, r24
    1bfe:	99 1f       	adc	r25, r25
    1c00:	00 1c       	adc	r0, r0
    1c02:	88 0f       	add	r24, r24
    1c04:	99 1f       	adc	r25, r25
    1c06:	00 1c       	adc	r0, r0
    1c08:	89 2f       	mov	r24, r25
    1c0a:	90 2d       	mov	r25, r0
    1c0c:	f6 01       	movw	r30, r12
    1c0e:	95 87       	std	Z+13, r25	; 0x0d
    1c10:	84 87       	std	Z+12, r24	; 0x0c
    1c12:	1b c0       	rjmp	.+54     	; 0x1c4a <HID_Device_ProcessControlRequest+0x262>
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1c14:	80 91 78 06 	lds	r24, 0x0678	; 0x800678 <USB_ControlRequest>
    1c18:	81 3a       	cpi	r24, 0xA1	; 161
    1c1a:	b9 f4       	brne	.+46     	; 0x1c4a <HID_Device_ProcessControlRequest+0x262>
    1c1c:	e8 ee       	ldi	r30, 0xE8	; 232
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	80 81       	ld	r24, Z
    1c22:	87 7f       	andi	r24, 0xF7	; 247
    1c24:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1c26:	80 81       	ld	r24, Z
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    1c28:	80 ff       	sbrs	r24, 0
    1c2a:	fd cf       	rjmp	.-6      	; 0x1c26 <HID_Device_ProcessControlRequest+0x23e>
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
    1c2c:	f6 01       	movw	r30, r12
    1c2e:	84 85       	ldd	r24, Z+12	; 0x0c
    1c30:	95 85       	ldd	r25, Z+13	; 0x0d
    1c32:	96 95       	lsr	r25
    1c34:	87 95       	ror	r24
    1c36:	96 95       	lsr	r25
    1c38:	87 95       	ror	r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1c3a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1c3e:	e8 ee       	ldi	r30, 0xE8	; 232
    1c40:	f0 e0       	ldi	r31, 0x00	; 0
    1c42:	80 81       	ld	r24, Z
    1c44:	8e 77       	andi	r24, 0x7E	; 126
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    1c46:	80 83       	st	Z, r24
    1c48:	fe d5       	rcall	.+3068   	; 0x2846 <Endpoint_ClearStatusStage>
			}

			break;
	}
}
    1c4a:	0f b6       	in	r0, 0x3f	; 63
    1c4c:	f8 94       	cli
    1c4e:	fe be       	out	0x3e, r15	; 62
    1c50:	0f be       	out	0x3f, r0	; 63
    1c52:	ed be       	out	0x3d, r14	; 61
    1c54:	0f 90       	pop	r0
    1c56:	0f 90       	pop	r0
    1c58:	0f 90       	pop	r0
    1c5a:	df 91       	pop	r29
    1c5c:	cf 91       	pop	r28
    1c5e:	1f 91       	pop	r17
    1c60:	0f 91       	pop	r16
    1c62:	ff 90       	pop	r15
    1c64:	ef 90       	pop	r14
    1c66:	df 90       	pop	r13
    1c68:	cf 90       	pop	r12
    1c6a:	bf 90       	pop	r11
    1c6c:	af 90       	pop	r10
    1c6e:	9f 90       	pop	r9
    1c70:	8f 90       	pop	r8
    1c72:	7f 90       	pop	r7
    1c74:	6f 90       	pop	r6
    1c76:	5f 90       	pop	r5
    1c78:	4f 90       	pop	r4
    1c7a:	3f 90       	pop	r3
    1c7c:	08 95       	ret

00001c7e <HID_Device_ConfigureEndpoints>:

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    1c7e:	fc 01       	movw	r30, r24
    1c80:	39 96       	adiw	r30, 0x09	; 9
    1c82:	27 e0       	ldi	r18, 0x07	; 7
    1c84:	df 01       	movw	r26, r30
    1c86:	1d 92       	st	X+, r1
    1c88:	2a 95       	dec	r18
    1c8a:	e9 f7       	brne	.-6      	; 0x1c86 <HID_Device_ConfigureEndpoints+0x8>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
    1c8c:	21 e0       	ldi	r18, 0x01	; 1
    1c8e:	fc 01       	movw	r30, r24
    1c90:	21 87       	std	Z+9, r18	; 0x09
	HIDInterfaceInfo->State.IdleCount           = 500;
    1c92:	24 ef       	ldi	r18, 0xF4	; 244
    1c94:	31 e0       	ldi	r19, 0x01	; 1
    1c96:	35 87       	std	Z+13, r19	; 0x0d
    1c98:	24 87       	std	Z+12, r18	; 0x0c

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
    1c9a:	23 e0       	ldi	r18, 0x03	; 3
    1c9c:	24 83       	std	Z+4, r18	; 0x04

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
    1c9e:	61 e0       	ldi	r22, 0x01	; 1
    1ca0:	01 96       	adiw	r24, 0x01	; 1
    1ca2:	82 c5       	rjmp	.+2820   	; 0x27a8 <Endpoint_ConfigureEndpointTable>
	  return false;

	return true;
}
    1ca4:	08 95       	ret

00001ca6 <HID_Device_USBTask>:

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    1ca6:	5f 92       	push	r5
    1ca8:	6f 92       	push	r6
    1caa:	7f 92       	push	r7
    1cac:	8f 92       	push	r8
    1cae:	9f 92       	push	r9
    1cb0:	af 92       	push	r10
    1cb2:	bf 92       	push	r11
    1cb4:	cf 92       	push	r12
    1cb6:	df 92       	push	r13
    1cb8:	ef 92       	push	r14
    1cba:	ff 92       	push	r15
    1cbc:	0f 93       	push	r16
    1cbe:	1f 93       	push	r17
    1cc0:	cf 93       	push	r28
    1cc2:	df 93       	push	r29
    1cc4:	00 d0       	rcall	.+0      	; 0x1cc6 <HID_Device_USBTask+0x20>
    1cc6:	1f 92       	push	r1
    1cc8:	cd b7       	in	r28, 0x3d	; 61
    1cca:	de b7       	in	r29, 0x3e	; 62
    1ccc:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
    1cce:	ad b6       	in	r10, 0x3d	; 61
    1cd0:	be b6       	in	r11, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
    1cd2:	80 91 77 06 	lds	r24, 0x0677	; 0x800677 <USB_DeviceState>
    1cd6:	84 30       	cpi	r24, 0x04	; 4
    1cd8:	09 f0       	breq	.+2      	; 0x1cdc <HID_Device_USBTask+0x36>
    1cda:	8d c0       	rjmp	.+282    	; 0x1df6 <HID_Device_USBTask+0x150>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1cdc:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    1ce0:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
    1ce4:	f7 01       	movw	r30, r14
    1ce6:	22 85       	ldd	r18, Z+10	; 0x0a
    1ce8:	33 85       	ldd	r19, Z+11	; 0x0b
    1cea:	28 17       	cp	r18, r24
    1cec:	39 07       	cpc	r19, r25
    1cee:	09 f4       	brne	.+2      	; 0x1cf2 <HID_Device_USBTask+0x4c>
    1cf0:	82 c0       	rjmp	.+260    	; 0x1df6 <HID_Device_USBTask+0x150>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1cf2:	81 81       	ldd	r24, Z+1	; 0x01
    1cf4:	8f 70       	andi	r24, 0x0F	; 15
    1cf6:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1cfa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		#endif
	}

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

	if (Endpoint_IsReadWriteAllowed())
    1cfe:	85 ff       	sbrs	r24, 5
    1d00:	7a c0       	rjmp	.+244    	; 0x1df6 <HID_Device_USBTask+0x150>
	{
    1d02:	8d b6       	in	r8, 0x3d	; 61
    1d04:	9e b6       	in	r9, 0x3e	; 62
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    1d06:	40 85       	ldd	r20, Z+8	; 0x08
    1d08:	50 e0       	ldi	r21, 0x00	; 0
    1d0a:	8d b7       	in	r24, 0x3d	; 61
    1d0c:	9e b7       	in	r25, 0x3e	; 62
    1d0e:	84 1b       	sub	r24, r20
    1d10:	95 0b       	sbc	r25, r21
    1d12:	0f b6       	in	r0, 0x3f	; 63
    1d14:	f8 94       	cli
    1d16:	9e bf       	out	0x3e, r25	; 62
    1d18:	0f be       	out	0x3f, r0	; 63
    1d1a:	8d bf       	out	0x3d, r24	; 61
    1d1c:	ed b7       	in	r30, 0x3d	; 61
    1d1e:	fe b7       	in	r31, 0x3e	; 62
    1d20:	31 96       	adiw	r30, 0x01	; 1
    1d22:	6f 01       	movw	r12, r30
		uint8_t  ReportID     = 0;
    1d24:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t ReportINSize = 0;
    1d26:	1a 82       	std	Y+2, r1	; 0x02
    1d28:	19 82       	std	Y+1, r1	; 0x01

		memset(ReportINData, 0, sizeof(ReportINData));
    1d2a:	60 e0       	ldi	r22, 0x00	; 0
    1d2c:	70 e0       	ldi	r23, 0x00	; 0
    1d2e:	cf 01       	movw	r24, r30
    1d30:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <memset>

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
    1d34:	8e 01       	movw	r16, r28
    1d36:	0f 5f       	subi	r16, 0xFF	; 255
    1d38:	1f 4f       	sbci	r17, 0xFF	; 255
    1d3a:	96 01       	movw	r18, r12
    1d3c:	40 e0       	ldi	r20, 0x00	; 0
    1d3e:	be 01       	movw	r22, r28
    1d40:	6d 5f       	subi	r22, 0xFD	; 253
    1d42:	7f 4f       	sbci	r23, 0xFF	; 255
    1d44:	c7 01       	movw	r24, r14
    1d46:	bf dd       	rcall	.-1154   	; 0x18c6 <CALLBACK_HID_Device_CreateHIDReport>
    1d48:	58 2e       	mov	r5, r24
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    1d4a:	f7 01       	movw	r30, r14
    1d4c:	84 85       	ldd	r24, Z+12	; 0x0c
    1d4e:	95 85       	ldd	r25, Z+13	; 0x0d
    1d50:	89 2b       	or	r24, r25
    1d52:	41 f0       	breq	.+16     	; 0x1d64 <HID_Device_USBTask+0xbe>
    1d54:	81 e0       	ldi	r24, 0x01	; 1
    1d56:	26 85       	ldd	r18, Z+14	; 0x0e
    1d58:	37 85       	ldd	r19, Z+15	; 0x0f
    1d5a:	23 2b       	or	r18, r19
    1d5c:	09 f0       	breq	.+2      	; 0x1d60 <HID_Device_USBTask+0xba>
    1d5e:	80 e0       	ldi	r24, 0x00	; 0
    1d60:	78 2e       	mov	r7, r24
    1d62:	01 c0       	rjmp	.+2      	; 0x1d66 <HID_Device_USBTask+0xc0>
    1d64:	71 2c       	mov	r7, r1

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    1d66:	f7 01       	movw	r30, r14
    1d68:	06 81       	ldd	r16, Z+6	; 0x06
    1d6a:	17 81       	ldd	r17, Z+7	; 0x07
    1d6c:	01 15       	cp	r16, r1
    1d6e:	11 05       	cpc	r17, r1
    1d70:	99 f0       	breq	.+38     	; 0x1d98 <HID_Device_USBTask+0xf2>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
    1d72:	49 81       	ldd	r20, Y+1	; 0x01
    1d74:	5a 81       	ldd	r21, Y+2	; 0x02
    1d76:	b8 01       	movw	r22, r16
    1d78:	c6 01       	movw	r24, r12
    1d7a:	0e 94 ae 17 	call	0x2f5c	; 0x2f5c <memcmp>
    1d7e:	66 24       	eor	r6, r6
    1d80:	63 94       	inc	r6
    1d82:	89 2b       	or	r24, r25
    1d84:	09 f4       	brne	.+2      	; 0x1d88 <HID_Device_USBTask+0xe2>
    1d86:	61 2c       	mov	r6, r1
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    1d88:	f7 01       	movw	r30, r14
    1d8a:	40 85       	ldd	r20, Z+8	; 0x08
    1d8c:	50 e0       	ldi	r21, 0x00	; 0
    1d8e:	b6 01       	movw	r22, r12
    1d90:	c8 01       	movw	r24, r16
    1d92:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <memcpy>
    1d96:	01 c0       	rjmp	.+2      	; 0x1d9a <HID_Device_USBTask+0xf4>

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
    1d98:	61 2c       	mov	r6, r1
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    1d9a:	89 81       	ldd	r24, Y+1	; 0x01
    1d9c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d9e:	89 2b       	or	r24, r25
    1da0:	f1 f0       	breq	.+60     	; 0x1dde <HID_Device_USBTask+0x138>
    1da2:	51 10       	cpse	r5, r1
    1da4:	04 c0       	rjmp	.+8      	; 0x1dae <HID_Device_USBTask+0x108>
    1da6:	61 10       	cpse	r6, r1
    1da8:	02 c0       	rjmp	.+4      	; 0x1dae <HID_Device_USBTask+0x108>
    1daa:	70 fe       	sbrs	r7, 0
    1dac:	18 c0       	rjmp	.+48     	; 0x1dde <HID_Device_USBTask+0x138>
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    1dae:	f7 01       	movw	r30, r14
    1db0:	84 85       	ldd	r24, Z+12	; 0x0c
    1db2:	95 85       	ldd	r25, Z+13	; 0x0d
    1db4:	97 87       	std	Z+15, r25	; 0x0f
    1db6:	86 87       	std	Z+14, r24	; 0x0e
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1db8:	81 81       	ldd	r24, Z+1	; 0x01
    1dba:	8f 70       	andi	r24, 0x0F	; 15
    1dbc:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

			if (ReportID)
    1dc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc2:	81 11       	cpse	r24, r1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1dc4:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
    1dc8:	69 81       	ldd	r22, Y+1	; 0x01
    1dca:	7a 81       	ldd	r23, Y+2	; 0x02
    1dcc:	40 e0       	ldi	r20, 0x00	; 0
    1dce:	50 e0       	ldi	r21, 0x00	; 0
    1dd0:	c6 01       	movw	r24, r12
    1dd2:	03 d2       	rcall	.+1030   	; 0x21da <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1dd4:	e8 ee       	ldi	r30, 0xE8	; 232
    1dd6:	f0 e0       	ldi	r31, 0x00	; 0
    1dd8:	80 81       	ld	r24, Z
    1dda:	8e 77       	andi	r24, 0x7E	; 126
    1ddc:	80 83       	st	Z, r24
    1dde:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    1de2:	90 91 e5 00 	lds	r25, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>

			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
    1de6:	f7 01       	movw	r30, r14
    1de8:	93 87       	std	Z+11, r25	; 0x0b
    1dea:	82 87       	std	Z+10, r24	; 0x0a
    1dec:	0f b6       	in	r0, 0x3f	; 63
    1dee:	f8 94       	cli
    1df0:	9e be       	out	0x3e, r9	; 62
    1df2:	0f be       	out	0x3f, r0	; 63
    1df4:	8d be       	out	0x3d, r8	; 61
	}
}
    1df6:	0f b6       	in	r0, 0x3f	; 63
    1df8:	f8 94       	cli
    1dfa:	be be       	out	0x3e, r11	; 62
    1dfc:	0f be       	out	0x3f, r0	; 63
    1dfe:	ad be       	out	0x3d, r10	; 61
    1e00:	0f 90       	pop	r0
    1e02:	0f 90       	pop	r0
    1e04:	0f 90       	pop	r0
    1e06:	df 91       	pop	r29
    1e08:	cf 91       	pop	r28
    1e0a:	1f 91       	pop	r17
    1e0c:	0f 91       	pop	r16
    1e0e:	ff 90       	pop	r15
    1e10:	ef 90       	pop	r14
    1e12:	df 90       	pop	r13
    1e14:	cf 90       	pop	r12
    1e16:	bf 90       	pop	r11
    1e18:	af 90       	pop	r10
    1e1a:	9f 90       	pop	r9
    1e1c:	8f 90       	pop	r8
    1e1e:	7f 90       	pop	r7
    1e20:	6f 90       	pop	r6
    1e22:	5f 90       	pop	r5
    1e24:	08 95       	ret

00001e26 <MS_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_MS_DRIVER
#define  __INCLUDE_FROM_MASSSTORAGE_DEVICE_C
#include "MassStorageClassDevice.h"

void MS_Device_ProcessControlRequest(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    1e26:	cf 93       	push	r28
    1e28:	df 93       	push	r29
    1e2a:	fc 01       	movw	r30, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1e2c:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	if (!(Endpoint_IsSETUPReceived()))
    1e30:	93 ff       	sbrs	r25, 3
    1e32:	33 c0       	rjmp	.+102    	; 0x1e9a <MS_Device_ProcessControlRequest+0x74>
	  return;

	if (USB_ControlRequest.wIndex != MSInterfaceInfo->Config.InterfaceNumber)
    1e34:	20 81       	ld	r18, Z
    1e36:	30 e0       	ldi	r19, 0x00	; 0
    1e38:	80 91 7c 06 	lds	r24, 0x067C	; 0x80067c <USB_ControlRequest+0x4>
    1e3c:	90 91 7d 06 	lds	r25, 0x067D	; 0x80067d <USB_ControlRequest+0x5>
    1e40:	82 17       	cp	r24, r18
    1e42:	93 07       	cpc	r25, r19
    1e44:	51 f5       	brne	.+84     	; 0x1e9a <MS_Device_ProcessControlRequest+0x74>
    1e46:	ef 01       	movw	r28, r30
	  return;

	switch (USB_ControlRequest.bRequest)
    1e48:	80 91 79 06 	lds	r24, 0x0679	; 0x800679 <USB_ControlRequest+0x1>
    1e4c:	8e 3f       	cpi	r24, 0xFE	; 254
    1e4e:	79 f0       	breq	.+30     	; 0x1e6e <MS_Device_ProcessControlRequest+0x48>
    1e50:	8f 3f       	cpi	r24, 0xFF	; 255
    1e52:	19 f5       	brne	.+70     	; 0x1e9a <MS_Device_ProcessControlRequest+0x74>
	{
		case MS_REQ_MassStorageReset:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1e54:	80 91 78 06 	lds	r24, 0x0678	; 0x800678 <USB_ControlRequest>
    1e58:	81 32       	cpi	r24, 0x21	; 33
    1e5a:	f9 f4       	brne	.+62     	; 0x1e9a <MS_Device_ProcessControlRequest+0x74>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1e5c:	e8 ee       	ldi	r30, 0xE8	; 232
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	80 81       	ld	r24, Z
    1e62:	87 7f       	andi	r24, 0xF7	; 247
    1e64:	80 83       	st	Z, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1e66:	ef d4       	rcall	.+2526   	; 0x2846 <Endpoint_ClearStatusStage>

				MSInterfaceInfo->State.IsMassStoreReset = true;
    1e68:	81 e0       	ldi	r24, 0x01	; 1
    1e6a:	88 af       	std	Y+56, r24	; 0x38
    1e6c:	16 c0       	rjmp	.+44     	; 0x1e9a <MS_Device_ProcessControlRequest+0x74>
			}

			break;
		case MS_REQ_GetMaxLUN:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1e6e:	80 91 78 06 	lds	r24, 0x0678	; 0x800678 <USB_ControlRequest>
    1e72:	81 3a       	cpi	r24, 0xA1	; 161
    1e74:	91 f4       	brne	.+36     	; 0x1e9a <MS_Device_ProcessControlRequest+0x74>
    1e76:	e8 ee       	ldi	r30, 0xE8	; 232
    1e78:	f0 e0       	ldi	r31, 0x00	; 0
    1e7a:	80 81       	ld	r24, Z
    1e7c:	87 7f       	andi	r24, 0xF7	; 247
    1e7e:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1e80:	80 81       	ld	r24, Z
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    1e82:	80 ff       	sbrs	r24, 0
    1e84:	fd cf       	rjmp	.-6      	; 0x1e80 <MS_Device_ProcessControlRequest+0x5a>
				Endpoint_Write_8(MSInterfaceInfo->Config.TotalLUNs - 1);
    1e86:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e88:	81 50       	subi	r24, 0x01	; 1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1e8a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1e8e:	e8 ee       	ldi	r30, 0xE8	; 232
    1e90:	f0 e0       	ldi	r31, 0x00	; 0
    1e92:	80 81       	ld	r24, Z
    1e94:	8e 77       	andi	r24, 0x7E	; 126
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    1e96:	80 83       	st	Z, r24
    1e98:	d6 d4       	rcall	.+2476   	; 0x2846 <Endpoint_ClearStatusStage>
			}

			break;
	}
}
    1e9a:	df 91       	pop	r29
    1e9c:	cf 91       	pop	r28
    1e9e:	08 95       	ret

00001ea0 <MS_Device_ConfigureEndpoints>:

bool MS_Device_ConfigureEndpoints(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    1ea0:	cf 93       	push	r28
    1ea2:	df 93       	push	r29
    1ea4:	ec 01       	movw	r28, r24
	memset(&MSInterfaceInfo->State, 0x00, sizeof(MSInterfaceInfo->State));
    1ea6:	fc 01       	movw	r30, r24
    1ea8:	3c 96       	adiw	r30, 0x0c	; 12
    1eaa:	8d e2       	ldi	r24, 0x2D	; 45
    1eac:	df 01       	movw	r26, r30
    1eae:	1d 92       	st	X+, r1
    1eb0:	8a 95       	dec	r24
    1eb2:	e9 f7       	brne	.-6      	; 0x1eae <MS_Device_ConfigureEndpoints+0xe>

	MSInterfaceInfo->Config.DataINEndpoint.Type  = EP_TYPE_BULK;
    1eb4:	82 e0       	ldi	r24, 0x02	; 2
    1eb6:	8c 83       	std	Y+4, r24	; 0x04
	MSInterfaceInfo->Config.DataOUTEndpoint.Type = EP_TYPE_BULK;
    1eb8:	89 87       	std	Y+9, r24	; 0x09

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataINEndpoint, 1)))
    1eba:	61 e0       	ldi	r22, 0x01	; 1
    1ebc:	ce 01       	movw	r24, r28
    1ebe:	01 96       	adiw	r24, 0x01	; 1
    1ec0:	73 d4       	rcall	.+2278   	; 0x27a8 <Endpoint_ConfigureEndpointTable>
    1ec2:	88 23       	and	r24, r24
    1ec4:	21 f0       	breq	.+8      	; 0x1ece <MS_Device_ConfigureEndpoints+0x2e>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataOUTEndpoint, 1)))
    1ec6:	61 e0       	ldi	r22, 0x01	; 1
    1ec8:	ce 01       	movw	r24, r28
    1eca:	06 96       	adiw	r24, 0x06	; 6
    1ecc:	6d d4       	rcall	.+2266   	; 0x27a8 <Endpoint_ConfigureEndpointTable>
	  return false;

	return true;
}
    1ece:	df 91       	pop	r29
    1ed0:	cf 91       	pop	r28
    1ed2:	08 95       	ret

00001ed4 <MS_Device_USBTask>:

void MS_Device_USBTask(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    1ed4:	ef 92       	push	r14
    1ed6:	ff 92       	push	r15
    1ed8:	0f 93       	push	r16
    1eda:	1f 93       	push	r17
    1edc:	cf 93       	push	r28
    1ede:	df 93       	push	r29
    1ee0:	00 d0       	rcall	.+0      	; 0x1ee2 <MS_Device_USBTask+0xe>
    1ee2:	cd b7       	in	r28, 0x3d	; 61
    1ee4:	de b7       	in	r29, 0x3e	; 62
    1ee6:	8c 01       	movw	r16, r24
	if (USB_DeviceState != DEVICE_STATE_Configured)
    1ee8:	90 91 77 06 	lds	r25, 0x0677	; 0x800677 <USB_DeviceState>
    1eec:	94 30       	cpi	r25, 0x04	; 4
    1eee:	09 f0       	breq	.+2      	; 0x1ef2 <MS_Device_USBTask+0x1e>
    1ef0:	1c c1       	rjmp	.+568    	; 0x212a <__stack+0x2b>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1ef2:	d8 01       	movw	r26, r16
    1ef4:	16 96       	adiw	r26, 0x06	; 6
    1ef6:	8c 91       	ld	r24, X
    1ef8:	16 97       	sbiw	r26, 0x06	; 6
    1efa:	8f 70       	andi	r24, 0x0F	; 15
    1efc:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1f00:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	  return;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
    1f04:	82 ff       	sbrs	r24, 2
    1f06:	d2 c0       	rjmp	.+420    	; 0x20ac <MS_Device_USBTask+0x1d8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1f08:	16 96       	adiw	r26, 0x06	; 6
    1f0a:	8c 91       	ld	r24, X
    1f0c:	8f 70       	andi	r24, 0x0F	; 15
    1f0e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
{
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);

	BytesProcessed = 0;
    1f12:	1a 82       	std	Y+2, r1	; 0x02
    1f14:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    1f16:	78 01       	movw	r14, r16
    1f18:	bc e0       	ldi	r27, 0x0C	; 12
    1f1a:	eb 0e       	add	r14, r27
    1f1c:	f1 1c       	adc	r15, r1
    1f1e:	04 c0       	rjmp	.+8      	; 0x1f28 <MS_Device_USBTask+0x54>
	                               (sizeof(MS_CommandBlockWrapper_t) - 16), &BytesProcessed) ==
	                               ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    1f20:	f8 01       	movw	r30, r16
    1f22:	80 ad       	ldd	r24, Z+56	; 0x38
    1f24:	81 11       	cpse	r24, r1
    1f26:	c2 c0       	rjmp	.+388    	; 0x20ac <MS_Device_USBTask+0x1d8>
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);

	BytesProcessed = 0;
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    1f28:	ae 01       	movw	r20, r28
    1f2a:	4f 5f       	subi	r20, 0xFF	; 255
    1f2c:	5f 4f       	sbci	r21, 0xFF	; 255
    1f2e:	6f e0       	ldi	r22, 0x0F	; 15
    1f30:	70 e0       	ldi	r23, 0x00	; 0
    1f32:	c7 01       	movw	r24, r14
    1f34:	0f d2       	rcall	.+1054   	; 0x2354 <Endpoint_Read_Stream_LE>
    1f36:	85 30       	cpi	r24, 0x05	; 5
    1f38:	99 f3       	breq	.-26     	; 0x1f20 <MS_Device_USBTask+0x4c>
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != CPU_TO_LE32(MS_CBW_SIGNATURE))     ||
    1f3a:	f8 01       	movw	r30, r16
    1f3c:	84 85       	ldd	r24, Z+12	; 0x0c
    1f3e:	95 85       	ldd	r25, Z+13	; 0x0d
    1f40:	a6 85       	ldd	r26, Z+14	; 0x0e
    1f42:	b7 85       	ldd	r27, Z+15	; 0x0f
    1f44:	85 35       	cpi	r24, 0x55	; 85
    1f46:	93 45       	sbci	r25, 0x53	; 83
    1f48:	a2 44       	sbci	r26, 0x42	; 66
    1f4a:	b3 44       	sbci	r27, 0x43	; 67
    1f4c:	99 f4       	brne	.+38     	; 0x1f74 <MS_Device_USBTask+0xa0>
    1f4e:	d8 01       	movw	r26, r16
    1f50:	59 96       	adiw	r26, 0x19	; 25
    1f52:	9c 91       	ld	r25, X
    1f54:	59 97       	sbiw	r26, 0x19	; 25
    1f56:	1b 96       	adiw	r26, 0x0b	; 11
    1f58:	8c 91       	ld	r24, X
    1f5a:	1b 97       	sbiw	r26, 0x0b	; 11
    1f5c:	98 17       	cp	r25, r24
    1f5e:	50 f4       	brcc	.+20     	; 0x1f74 <MS_Device_USBTask+0xa0>
	    (MSInterfaceInfo->State.CommandBlock.LUN               >= MSInterfaceInfo->Config.TotalLUNs) ||
    1f60:	58 96       	adiw	r26, 0x18	; 24
    1f62:	8c 91       	ld	r24, X
    1f64:	58 97       	sbiw	r26, 0x18	; 24
    1f66:	8f 71       	andi	r24, 0x1F	; 31
    1f68:	29 f4       	brne	.+10     	; 0x1f74 <MS_Device_USBTask+0xa0>
		(MSInterfaceInfo->State.CommandBlock.Flags              & 0x1F)                              ||
    1f6a:	5a 96       	adiw	r26, 0x1a	; 26
    1f6c:	8c 91       	ld	r24, X
    1f6e:	81 50       	subi	r24, 0x01	; 1
    1f70:	80 31       	cpi	r24, 0x10	; 16
    1f72:	78 f0       	brcs	.+30     	; 0x1f92 <MS_Device_USBTask+0xbe>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1f74:	eb ee       	ldi	r30, 0xEB	; 235
    1f76:	f0 e0       	ldi	r31, 0x00	; 0
    1f78:	80 81       	ld	r24, Z
    1f7a:	80 62       	ori	r24, 0x20	; 32
    1f7c:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1f7e:	d8 01       	movw	r26, r16
    1f80:	11 96       	adiw	r26, 0x01	; 1
    1f82:	8c 91       	ld	r24, X
    1f84:	8f 70       	andi	r24, 0x0F	; 15
    1f86:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1f8a:	80 81       	ld	r24, Z
    1f8c:	80 62       	ori	r24, 0x20	; 32
    1f8e:	80 83       	st	Z, r24
    1f90:	8d c0       	rjmp	.+282    	; 0x20ac <MS_Device_USBTask+0x1d8>
		Endpoint_StallTransaction();

		return false;
	}

	BytesProcessed = 0;
    1f92:	1a 82       	std	Y+2, r1	; 0x02
    1f94:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock.SCSICommandData,
    1f96:	78 01       	movw	r14, r16
    1f98:	bb e1       	ldi	r27, 0x1B	; 27
    1f9a:	eb 0e       	add	r14, r27
    1f9c:	f1 1c       	adc	r15, r1
    1f9e:	04 c0       	rjmp	.+8      	; 0x1fa8 <MS_Device_USBTask+0xd4>
	                                MSInterfaceInfo->State.CommandBlock.SCSICommandLength, &BytesProcessed) ==
	                                ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    1fa0:	f8 01       	movw	r30, r16
    1fa2:	80 ad       	ldd	r24, Z+56	; 0x38
    1fa4:	81 11       	cpse	r24, r1
    1fa6:	82 c0       	rjmp	.+260    	; 0x20ac <MS_Device_USBTask+0x1d8>

		return false;
	}

	BytesProcessed = 0;
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock.SCSICommandData,
    1fa8:	d8 01       	movw	r26, r16
    1faa:	5a 96       	adiw	r26, 0x1a	; 26
    1fac:	6c 91       	ld	r22, X
    1fae:	70 e0       	ldi	r23, 0x00	; 0
    1fb0:	ae 01       	movw	r20, r28
    1fb2:	4f 5f       	subi	r20, 0xFF	; 255
    1fb4:	5f 4f       	sbci	r21, 0xFF	; 255
    1fb6:	c7 01       	movw	r24, r14
    1fb8:	cd d1       	rcall	.+922    	; 0x2354 <Endpoint_Read_Stream_LE>
    1fba:	85 30       	cpi	r24, 0x05	; 5
    1fbc:	89 f3       	breq	.-30     	; 0x1fa0 <MS_Device_USBTask+0xcc>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1fbe:	e8 ee       	ldi	r30, 0xE8	; 232
    1fc0:	f0 e0       	ldi	r31, 0x00	; 0
    1fc2:	80 81       	ld	r24, Z
    1fc4:	8b 77       	andi	r24, 0x7B	; 123
    1fc6:	80 83       	st	Z, r24

	if (Endpoint_IsOUTReceived())
	{
		if (MS_Device_ReadInCommandBlock(MSInterfaceInfo))
		{
			if (MSInterfaceInfo->State.CommandBlock.Flags & MS_COMMAND_DIR_DATA_IN)
    1fc8:	f8 01       	movw	r30, r16
    1fca:	80 8d       	ldd	r24, Z+24	; 0x18
    1fcc:	88 23       	and	r24, r24
    1fce:	24 f4       	brge	.+8      	; 0x1fd8 <MS_Device_USBTask+0x104>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1fd0:	81 81       	ldd	r24, Z+1	; 0x01
    1fd2:	8f 70       	andi	r24, 0x0F	; 15
    1fd4:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			  Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);

			bool SCSICommandResult = CALLBACK_MS_Device_SCSICommandReceived(MSInterfaceInfo);
    1fd8:	c8 01       	movw	r24, r16
    1fda:	5f dc       	rcall	.-1858   	; 0x189a <CALLBACK_MS_Device_SCSICommandReceived>

			MSInterfaceInfo->State.CommandStatus.Status              = (SCSICommandResult) ? MS_SCSI_COMMAND_Pass : MS_SCSI_COMMAND_Fail;
    1fdc:	91 e0       	ldi	r25, 0x01	; 1
    1fde:	98 27       	eor	r25, r24
    1fe0:	d8 01       	movw	r26, r16
    1fe2:	d7 96       	adiw	r26, 0x37	; 55
    1fe4:	9c 93       	st	X, r25
    1fe6:	d7 97       	sbiw	r26, 0x37	; 55
			MSInterfaceInfo->State.CommandStatus.Signature           = CPU_TO_LE32(MS_CSW_SIGNATURE);
    1fe8:	45 e5       	ldi	r20, 0x55	; 85
    1fea:	53 e5       	ldi	r21, 0x53	; 83
    1fec:	62 e4       	ldi	r22, 0x42	; 66
    1fee:	73 e5       	ldi	r23, 0x53	; 83
    1ff0:	f8 01       	movw	r30, r16
    1ff2:	43 a7       	std	Z+43, r20	; 0x2b
    1ff4:	54 a7       	std	Z+44, r21	; 0x2c
    1ff6:	65 a7       	std	Z+45, r22	; 0x2d
    1ff8:	76 a7       	std	Z+46, r23	; 0x2e
			MSInterfaceInfo->State.CommandStatus.Tag                 = MSInterfaceInfo->State.CommandBlock.Tag;
    1ffa:	40 89       	ldd	r20, Z+16	; 0x10
    1ffc:	51 89       	ldd	r21, Z+17	; 0x11
    1ffe:	62 89       	ldd	r22, Z+18	; 0x12
    2000:	73 89       	ldd	r23, Z+19	; 0x13
    2002:	9f 96       	adiw	r26, 0x2f	; 47
    2004:	4d 93       	st	X+, r20
    2006:	5d 93       	st	X+, r21
    2008:	6d 93       	st	X+, r22
    200a:	7c 93       	st	X, r23
    200c:	d2 97       	sbiw	r26, 0x32	; 50
			MSInterfaceInfo->State.CommandStatus.DataTransferResidue = MSInterfaceInfo->State.CommandBlock.DataTransferLength;
    200e:	54 96       	adiw	r26, 0x14	; 20
    2010:	4d 91       	ld	r20, X+
    2012:	5d 91       	ld	r21, X+
    2014:	6d 91       	ld	r22, X+
    2016:	7c 91       	ld	r23, X
    2018:	57 97       	sbiw	r26, 0x17	; 23
    201a:	43 ab       	std	Z+51, r20	; 0x33
    201c:	54 ab       	std	Z+52, r21	; 0x34
    201e:	65 ab       	std	Z+53, r22	; 0x35
    2020:	76 ab       	std	Z+54, r23	; 0x36

			if (!(SCSICommandResult) && (le32_to_cpu(MSInterfaceInfo->State.CommandStatus.DataTransferResidue)))
    2022:	81 11       	cpse	r24, r1
    2024:	09 c0       	rjmp	.+18     	; 0x2038 <MS_Device_USBTask+0x164>
    2026:	45 2b       	or	r20, r21
    2028:	46 2b       	or	r20, r22
    202a:	47 2b       	or	r20, r23
    202c:	29 f0       	breq	.+10     	; 0x2038 <MS_Device_USBTask+0x164>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    202e:	eb ee       	ldi	r30, 0xEB	; 235
    2030:	f0 e0       	ldi	r31, 0x00	; 0
    2032:	80 81       	ld	r24, Z
    2034:	80 62       	ori	r24, 0x20	; 32
    2036:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2038:	d8 01       	movw	r26, r16
    203a:	16 96       	adiw	r26, 0x06	; 6
    203c:	8c 91       	ld	r24, X
    203e:	8f 70       	andi	r24, 0x0F	; 15
    2040:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    2044:	eb ee       	ldi	r30, 0xEB	; 235
    2046:	f0 e0       	ldi	r31, 0x00	; 0
    2048:	05 c0       	rjmp	.+10     	; 0x2054 <MS_Device_USBTask+0x180>
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    204a:	d8 01       	movw	r26, r16
    204c:	d8 96       	adiw	r26, 0x38	; 56
    204e:	8c 91       	ld	r24, X
    2050:	81 11       	cpse	r24, r1
    2052:	2c c0       	rjmp	.+88     	; 0x20ac <MS_Device_USBTask+0x1d8>
    2054:	80 81       	ld	r24, Z

static void MS_Device_ReturnCommandStatus(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);

	while (Endpoint_IsStalled())
    2056:	85 fd       	sbrc	r24, 5
    2058:	f8 cf       	rjmp	.-16     	; 0x204a <MS_Device_USBTask+0x176>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    205a:	f8 01       	movw	r30, r16
    205c:	81 81       	ldd	r24, Z+1	; 0x01
    205e:	8f 70       	andi	r24, 0x0F	; 15
    2060:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    2064:	eb ee       	ldi	r30, 0xEB	; 235
    2066:	f0 e0       	ldi	r31, 0x00	; 0
    2068:	05 c0       	rjmp	.+10     	; 0x2074 <MS_Device_USBTask+0x1a0>
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    206a:	d8 01       	movw	r26, r16
    206c:	d8 96       	adiw	r26, 0x38	; 56
    206e:	8c 91       	ld	r24, X
    2070:	81 11       	cpse	r24, r1
    2072:	1c c0       	rjmp	.+56     	; 0x20ac <MS_Device_USBTask+0x1d8>
    2074:	80 81       	ld	r24, Z
		  return;
	}

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);

	while (Endpoint_IsStalled())
    2076:	85 fd       	sbrc	r24, 5
    2078:	f8 cf       	rjmp	.-16     	; 0x206a <MS_Device_USBTask+0x196>

		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	uint16_t BytesProcessed = 0;
    207a:	1a 82       	std	Y+2, r1	; 0x02
    207c:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Write_Stream_LE(&MSInterfaceInfo->State.CommandStatus,
    207e:	78 01       	movw	r14, r16
    2080:	bb e2       	ldi	r27, 0x2B	; 43
    2082:	eb 0e       	add	r14, r27
    2084:	f1 1c       	adc	r15, r1
    2086:	04 c0       	rjmp	.+8      	; 0x2090 <MS_Device_USBTask+0x1bc>
	                                sizeof(MS_CommandStatusWrapper_t), &BytesProcessed) ==
	                                ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    2088:	f8 01       	movw	r30, r16
    208a:	80 ad       	ldd	r24, Z+56	; 0x38
    208c:	81 11       	cpse	r24, r1
    208e:	0e c0       	rjmp	.+28     	; 0x20ac <MS_Device_USBTask+0x1d8>
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	uint16_t BytesProcessed = 0;
	while (Endpoint_Write_Stream_LE(&MSInterfaceInfo->State.CommandStatus,
    2090:	ae 01       	movw	r20, r28
    2092:	4f 5f       	subi	r20, 0xFF	; 255
    2094:	5f 4f       	sbci	r21, 0xFF	; 255
    2096:	6d e0       	ldi	r22, 0x0D	; 13
    2098:	70 e0       	ldi	r23, 0x00	; 0
    209a:	c7 01       	movw	r24, r14
    209c:	9e d0       	rcall	.+316    	; 0x21da <Endpoint_Write_Stream_LE>
    209e:	85 30       	cpi	r24, 0x05	; 5
    20a0:	99 f3       	breq	.-26     	; 0x2088 <MS_Device_USBTask+0x1b4>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    20a2:	e8 ee       	ldi	r30, 0xE8	; 232
    20a4:	f0 e0       	ldi	r31, 0x00	; 0
    20a6:	80 81       	ld	r24, Z
    20a8:	8e 77       	andi	r24, 0x7E	; 126
    20aa:	80 83       	st	Z, r24

			MS_Device_ReturnCommandStatus(MSInterfaceInfo);
		}
	}

	if (MSInterfaceInfo->State.IsMassStoreReset)
    20ac:	d8 01       	movw	r26, r16
    20ae:	d8 96       	adiw	r26, 0x38	; 56
    20b0:	8c 91       	ld	r24, X
    20b2:	d8 97       	sbiw	r26, 0x38	; 56
    20b4:	88 23       	and	r24, r24
    20b6:	c9 f1       	breq	.+114    	; 0x212a <__stack+0x2b>
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    20b8:	16 96       	adiw	r26, 0x06	; 6
    20ba:	2c 91       	ld	r18, X
    20bc:	16 97       	sbiw	r26, 0x06	; 6
    20be:	2f 70       	andi	r18, 0x0F	; 15
    20c0:	81 e0       	ldi	r24, 0x01	; 1
    20c2:	90 e0       	ldi	r25, 0x00	; 0
    20c4:	fc 01       	movw	r30, r24
    20c6:	02 c0       	rjmp	.+4      	; 0x20cc <MS_Device_USBTask+0x1f8>
    20c8:	ee 0f       	add	r30, r30
    20ca:	ff 1f       	adc	r31, r31
    20cc:	2a 95       	dec	r18
    20ce:	e2 f7       	brpl	.-8      	; 0x20c8 <MS_Device_USBTask+0x1f4>
    20d0:	9f 01       	movw	r18, r30
    20d2:	ea ee       	ldi	r30, 0xEA	; 234
    20d4:	f0 e0       	ldi	r31, 0x00	; 0
    20d6:	20 83       	st	Z, r18
				UERST = 0;
    20d8:	10 82       	st	Z, r1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    20da:	11 96       	adiw	r26, 0x01	; 1
    20dc:	2c 91       	ld	r18, X
    20de:	11 97       	sbiw	r26, 0x01	; 1
    20e0:	2f 70       	andi	r18, 0x0F	; 15
    20e2:	02 c0       	rjmp	.+4      	; 0x20e8 <MS_Device_USBTask+0x214>
    20e4:	88 0f       	add	r24, r24
    20e6:	99 1f       	adc	r25, r25
    20e8:	2a 95       	dec	r18
    20ea:	e2 f7       	brpl	.-8      	; 0x20e4 <MS_Device_USBTask+0x210>
    20ec:	80 83       	st	Z, r24
				UERST = 0;
    20ee:	10 82       	st	Z, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    20f0:	16 96       	adiw	r26, 0x06	; 6
    20f2:	8c 91       	ld	r24, X
    20f4:	8f 70       	andi	r24, 0x0F	; 15
    20f6:	29 ee       	ldi	r18, 0xE9	; 233
    20f8:	30 e0       	ldi	r19, 0x00	; 0
    20fa:	d9 01       	movw	r26, r18
    20fc:	8c 93       	st	X, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    20fe:	eb ee       	ldi	r30, 0xEB	; 235
    2100:	f0 e0       	ldi	r31, 0x00	; 0
    2102:	80 81       	ld	r24, Z
    2104:	80 61       	ori	r24, 0x10	; 16
    2106:	80 83       	st	Z, r24

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    2108:	80 81       	ld	r24, Z
    210a:	88 60       	ori	r24, 0x08	; 8
    210c:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    210e:	d8 01       	movw	r26, r16
    2110:	11 96       	adiw	r26, 0x01	; 1
    2112:	8c 91       	ld	r24, X
    2114:	8f 70       	andi	r24, 0x0F	; 15
    2116:	d9 01       	movw	r26, r18
    2118:	8c 93       	st	X, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    211a:	80 81       	ld	r24, Z
    211c:	80 61       	ori	r24, 0x10	; 16
    211e:	80 83       	st	Z, r24

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    2120:	80 81       	ld	r24, Z
    2122:	88 60       	ori	r24, 0x08	; 8
    2124:	80 83       	st	Z, r24
		Endpoint_ResetDataToggle();
		Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);
		Endpoint_ClearStall();
		Endpoint_ResetDataToggle();

		MSInterfaceInfo->State.IsMassStoreReset = false;
    2126:	f8 01       	movw	r30, r16
    2128:	10 ae       	std	Z+56, r1	; 0x38
	}
}
    212a:	0f 90       	pop	r0
    212c:	0f 90       	pop	r0
    212e:	df 91       	pop	r29
    2130:	cf 91       	pop	r28
    2132:	1f 91       	pop	r17
    2134:	0f 91       	pop	r16
    2136:	ff 90       	pop	r15
    2138:	ef 90       	pop	r14
    213a:	08 95       	ret

0000213c <Endpoint_Null_Stream>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    213c:	af 92       	push	r10
    213e:	bf 92       	push	r11
    2140:	cf 92       	push	r12
    2142:	df 92       	push	r13
    2144:	ef 92       	push	r14
    2146:	ff 92       	push	r15
    2148:	0f 93       	push	r16
    214a:	1f 93       	push	r17
    214c:	cf 93       	push	r28
    214e:	df 93       	push	r29
    2150:	ec 01       	movw	r28, r24
    2152:	6b 01       	movw	r12, r22
    2154:	9c d3       	rcall	.+1848   	; 0x288e <Endpoint_WaitUntilReady>
    2156:	81 11       	cpse	r24, r1
    2158:	35 c0       	rjmp	.+106    	; 0x21c4 <Endpoint_Null_Stream+0x88>
    215a:	c1 14       	cp	r12, r1
    215c:	d1 04       	cpc	r13, r1
    215e:	29 f0       	breq	.+10     	; 0x216a <Endpoint_Null_Stream+0x2e>
    2160:	f6 01       	movw	r30, r12
    2162:	80 81       	ld	r24, Z
    2164:	91 81       	ldd	r25, Z+1	; 0x01
    2166:	c8 1b       	sub	r28, r24
    2168:	d9 0b       	sbc	r29, r25
    216a:	20 97       	sbiw	r28, 0x00	; 0
    216c:	51 f1       	breq	.+84     	; 0x21c2 <Endpoint_Null_Stream+0x86>
    216e:	e1 2c       	mov	r14, r1
    2170:	f1 2c       	mov	r15, r1
    2172:	08 ee       	ldi	r16, 0xE8	; 232
    2174:	10 e0       	ldi	r17, 0x00	; 0
    2176:	0f 2e       	mov	r0, r31
    2178:	f1 ef       	ldi	r31, 0xF1	; 241
    217a:	af 2e       	mov	r10, r31
    217c:	b1 2c       	mov	r11, r1
    217e:	f0 2d       	mov	r31, r0
    2180:	f8 01       	movw	r30, r16
    2182:	80 81       	ld	r24, Z
    2184:	85 fd       	sbrc	r24, 5
    2186:	13 c0       	rjmp	.+38     	; 0x21ae <Endpoint_Null_Stream+0x72>
    2188:	80 81       	ld	r24, Z
    218a:	8e 77       	andi	r24, 0x7E	; 126
    218c:	80 83       	st	Z, r24
    218e:	c1 14       	cp	r12, r1
    2190:	d1 04       	cpc	r13, r1
    2192:	49 f0       	breq	.+18     	; 0x21a6 <Endpoint_Null_Stream+0x6a>
    2194:	f6 01       	movw	r30, r12
    2196:	80 81       	ld	r24, Z
    2198:	91 81       	ldd	r25, Z+1	; 0x01
    219a:	e8 0e       	add	r14, r24
    219c:	f9 1e       	adc	r15, r25
    219e:	f1 82       	std	Z+1, r15	; 0x01
    21a0:	e0 82       	st	Z, r14
    21a2:	85 e0       	ldi	r24, 0x05	; 5
    21a4:	0f c0       	rjmp	.+30     	; 0x21c4 <Endpoint_Null_Stream+0x88>
    21a6:	73 d3       	rcall	.+1766   	; 0x288e <Endpoint_WaitUntilReady>
    21a8:	88 23       	and	r24, r24
    21aa:	39 f0       	breq	.+14     	; 0x21ba <Endpoint_Null_Stream+0x7e>
    21ac:	0b c0       	rjmp	.+22     	; 0x21c4 <Endpoint_Null_Stream+0x88>
    21ae:	f5 01       	movw	r30, r10
    21b0:	10 82       	st	Z, r1
    21b2:	21 97       	sbiw	r28, 0x01	; 1
    21b4:	ff ef       	ldi	r31, 0xFF	; 255
    21b6:	ef 1a       	sub	r14, r31
    21b8:	ff 0a       	sbc	r15, r31
    21ba:	20 97       	sbiw	r28, 0x00	; 0
    21bc:	09 f7       	brne	.-62     	; 0x2180 <Endpoint_Null_Stream+0x44>
    21be:	80 e0       	ldi	r24, 0x00	; 0
    21c0:	01 c0       	rjmp	.+2      	; 0x21c4 <Endpoint_Null_Stream+0x88>
    21c2:	80 e0       	ldi	r24, 0x00	; 0
    21c4:	df 91       	pop	r29
    21c6:	cf 91       	pop	r28
    21c8:	1f 91       	pop	r17
    21ca:	0f 91       	pop	r16
    21cc:	ff 90       	pop	r15
    21ce:	ef 90       	pop	r14
    21d0:	df 90       	pop	r13
    21d2:	cf 90       	pop	r12
    21d4:	bf 90       	pop	r11
    21d6:	af 90       	pop	r10
    21d8:	08 95       	ret

000021da <Endpoint_Write_Stream_LE>:
    21da:	8f 92       	push	r8
    21dc:	9f 92       	push	r9
    21de:	af 92       	push	r10
    21e0:	bf 92       	push	r11
    21e2:	cf 92       	push	r12
    21e4:	df 92       	push	r13
    21e6:	ef 92       	push	r14
    21e8:	ff 92       	push	r15
    21ea:	0f 93       	push	r16
    21ec:	1f 93       	push	r17
    21ee:	cf 93       	push	r28
    21f0:	df 93       	push	r29
    21f2:	8c 01       	movw	r16, r24
    21f4:	eb 01       	movw	r28, r22
    21f6:	6a 01       	movw	r12, r20
    21f8:	4a d3       	rcall	.+1684   	; 0x288e <Endpoint_WaitUntilReady>
    21fa:	81 11       	cpse	r24, r1
    21fc:	3d c0       	rjmp	.+122    	; 0x2278 <Endpoint_Write_Stream_LE+0x9e>
    21fe:	c1 14       	cp	r12, r1
    2200:	d1 04       	cpc	r13, r1
    2202:	39 f0       	breq	.+14     	; 0x2212 <Endpoint_Write_Stream_LE+0x38>
    2204:	f6 01       	movw	r30, r12
    2206:	80 81       	ld	r24, Z
    2208:	91 81       	ldd	r25, Z+1	; 0x01
    220a:	c8 1b       	sub	r28, r24
    220c:	d9 0b       	sbc	r29, r25
    220e:	08 0f       	add	r16, r24
    2210:	19 1f       	adc	r17, r25
    2212:	20 97       	sbiw	r28, 0x00	; 0
    2214:	81 f1       	breq	.+96     	; 0x2276 <Endpoint_Write_Stream_LE+0x9c>
    2216:	e1 2c       	mov	r14, r1
    2218:	f1 2c       	mov	r15, r1
    221a:	0f 2e       	mov	r0, r31
    221c:	f8 ee       	ldi	r31, 0xE8	; 232
    221e:	8f 2e       	mov	r8, r31
    2220:	91 2c       	mov	r9, r1
    2222:	f0 2d       	mov	r31, r0
    2224:	0f 2e       	mov	r0, r31
    2226:	f1 ef       	ldi	r31, 0xF1	; 241
    2228:	af 2e       	mov	r10, r31
    222a:	b1 2c       	mov	r11, r1
    222c:	f0 2d       	mov	r31, r0
    222e:	f4 01       	movw	r30, r8
    2230:	80 81       	ld	r24, Z
    2232:	85 fd       	sbrc	r24, 5
    2234:	13 c0       	rjmp	.+38     	; 0x225c <Endpoint_Write_Stream_LE+0x82>
    2236:	80 81       	ld	r24, Z
    2238:	8e 77       	andi	r24, 0x7E	; 126
    223a:	80 83       	st	Z, r24
    223c:	c1 14       	cp	r12, r1
    223e:	d1 04       	cpc	r13, r1
    2240:	49 f0       	breq	.+18     	; 0x2254 <Endpoint_Write_Stream_LE+0x7a>
    2242:	f6 01       	movw	r30, r12
    2244:	80 81       	ld	r24, Z
    2246:	91 81       	ldd	r25, Z+1	; 0x01
    2248:	e8 0e       	add	r14, r24
    224a:	f9 1e       	adc	r15, r25
    224c:	f1 82       	std	Z+1, r15	; 0x01
    224e:	e0 82       	st	Z, r14
    2250:	85 e0       	ldi	r24, 0x05	; 5
    2252:	12 c0       	rjmp	.+36     	; 0x2278 <Endpoint_Write_Stream_LE+0x9e>
    2254:	1c d3       	rcall	.+1592   	; 0x288e <Endpoint_WaitUntilReady>
    2256:	88 23       	and	r24, r24
    2258:	51 f0       	breq	.+20     	; 0x226e <Endpoint_Write_Stream_LE+0x94>
    225a:	0e c0       	rjmp	.+28     	; 0x2278 <Endpoint_Write_Stream_LE+0x9e>
    225c:	f8 01       	movw	r30, r16
    225e:	81 91       	ld	r24, Z+
    2260:	8f 01       	movw	r16, r30
    2262:	f5 01       	movw	r30, r10
    2264:	80 83       	st	Z, r24
    2266:	21 97       	sbiw	r28, 0x01	; 1
    2268:	ff ef       	ldi	r31, 0xFF	; 255
    226a:	ef 1a       	sub	r14, r31
    226c:	ff 0a       	sbc	r15, r31
    226e:	20 97       	sbiw	r28, 0x00	; 0
    2270:	f1 f6       	brne	.-68     	; 0x222e <Endpoint_Write_Stream_LE+0x54>
    2272:	80 e0       	ldi	r24, 0x00	; 0
    2274:	01 c0       	rjmp	.+2      	; 0x2278 <Endpoint_Write_Stream_LE+0x9e>
    2276:	80 e0       	ldi	r24, 0x00	; 0
    2278:	df 91       	pop	r29
    227a:	cf 91       	pop	r28
    227c:	1f 91       	pop	r17
    227e:	0f 91       	pop	r16
    2280:	ff 90       	pop	r15
    2282:	ef 90       	pop	r14
    2284:	df 90       	pop	r13
    2286:	cf 90       	pop	r12
    2288:	bf 90       	pop	r11
    228a:	af 90       	pop	r10
    228c:	9f 90       	pop	r9
    228e:	8f 90       	pop	r8
    2290:	08 95       	ret

00002292 <Endpoint_Write_Stream_BE>:
    2292:	8f 92       	push	r8
    2294:	9f 92       	push	r9
    2296:	af 92       	push	r10
    2298:	bf 92       	push	r11
    229a:	cf 92       	push	r12
    229c:	df 92       	push	r13
    229e:	ef 92       	push	r14
    22a0:	ff 92       	push	r15
    22a2:	0f 93       	push	r16
    22a4:	1f 93       	push	r17
    22a6:	cf 93       	push	r28
    22a8:	df 93       	push	r29
    22aa:	8c 01       	movw	r16, r24
    22ac:	eb 01       	movw	r28, r22
    22ae:	6a 01       	movw	r12, r20
    22b0:	ee d2       	rcall	.+1500   	; 0x288e <Endpoint_WaitUntilReady>
    22b2:	81 11       	cpse	r24, r1
    22b4:	42 c0       	rjmp	.+132    	; 0x233a <Endpoint_Write_Stream_BE+0xa8>
    22b6:	4e 01       	movw	r8, r28
    22b8:	81 e0       	ldi	r24, 0x01	; 1
    22ba:	88 1a       	sub	r8, r24
    22bc:	91 08       	sbc	r9, r1
    22be:	80 0e       	add	r8, r16
    22c0:	91 1e       	adc	r9, r17
    22c2:	c1 14       	cp	r12, r1
    22c4:	d1 04       	cpc	r13, r1
    22c6:	39 f0       	breq	.+14     	; 0x22d6 <Endpoint_Write_Stream_BE+0x44>
    22c8:	f6 01       	movw	r30, r12
    22ca:	80 81       	ld	r24, Z
    22cc:	91 81       	ldd	r25, Z+1	; 0x01
    22ce:	c8 1b       	sub	r28, r24
    22d0:	d9 0b       	sbc	r29, r25
    22d2:	88 1a       	sub	r8, r24
    22d4:	99 0a       	sbc	r9, r25
    22d6:	20 97       	sbiw	r28, 0x00	; 0
    22d8:	79 f1       	breq	.+94     	; 0x2338 <Endpoint_Write_Stream_BE+0xa6>
    22da:	e1 2c       	mov	r14, r1
    22dc:	f1 2c       	mov	r15, r1
    22de:	08 ee       	ldi	r16, 0xE8	; 232
    22e0:	10 e0       	ldi	r17, 0x00	; 0
    22e2:	0f 2e       	mov	r0, r31
    22e4:	f1 ef       	ldi	r31, 0xF1	; 241
    22e6:	af 2e       	mov	r10, r31
    22e8:	b1 2c       	mov	r11, r1
    22ea:	f0 2d       	mov	r31, r0
    22ec:	f8 01       	movw	r30, r16
    22ee:	80 81       	ld	r24, Z
    22f0:	85 fd       	sbrc	r24, 5
    22f2:	13 c0       	rjmp	.+38     	; 0x231a <Endpoint_Write_Stream_BE+0x88>
    22f4:	80 81       	ld	r24, Z
    22f6:	8e 77       	andi	r24, 0x7E	; 126
    22f8:	80 83       	st	Z, r24
    22fa:	c1 14       	cp	r12, r1
    22fc:	d1 04       	cpc	r13, r1
    22fe:	49 f0       	breq	.+18     	; 0x2312 <Endpoint_Write_Stream_BE+0x80>
    2300:	f6 01       	movw	r30, r12
    2302:	80 81       	ld	r24, Z
    2304:	91 81       	ldd	r25, Z+1	; 0x01
    2306:	e8 0e       	add	r14, r24
    2308:	f9 1e       	adc	r15, r25
    230a:	f1 82       	std	Z+1, r15	; 0x01
    230c:	e0 82       	st	Z, r14
    230e:	85 e0       	ldi	r24, 0x05	; 5
    2310:	14 c0       	rjmp	.+40     	; 0x233a <Endpoint_Write_Stream_BE+0xa8>
    2312:	bd d2       	rcall	.+1402   	; 0x288e <Endpoint_WaitUntilReady>
    2314:	88 23       	and	r24, r24
    2316:	61 f0       	breq	.+24     	; 0x2330 <Endpoint_Write_Stream_BE+0x9e>
    2318:	10 c0       	rjmp	.+32     	; 0x233a <Endpoint_Write_Stream_BE+0xa8>
    231a:	f4 01       	movw	r30, r8
    231c:	80 81       	ld	r24, Z
    231e:	f5 01       	movw	r30, r10
    2320:	80 83       	st	Z, r24
    2322:	f1 e0       	ldi	r31, 0x01	; 1
    2324:	8f 1a       	sub	r8, r31
    2326:	91 08       	sbc	r9, r1
    2328:	21 97       	sbiw	r28, 0x01	; 1
    232a:	8f ef       	ldi	r24, 0xFF	; 255
    232c:	e8 1a       	sub	r14, r24
    232e:	f8 0a       	sbc	r15, r24
    2330:	20 97       	sbiw	r28, 0x00	; 0
    2332:	e1 f6       	brne	.-72     	; 0x22ec <Endpoint_Write_Stream_BE+0x5a>
    2334:	80 e0       	ldi	r24, 0x00	; 0
    2336:	01 c0       	rjmp	.+2      	; 0x233a <Endpoint_Write_Stream_BE+0xa8>
    2338:	80 e0       	ldi	r24, 0x00	; 0
    233a:	df 91       	pop	r29
    233c:	cf 91       	pop	r28
    233e:	1f 91       	pop	r17
    2340:	0f 91       	pop	r16
    2342:	ff 90       	pop	r15
    2344:	ef 90       	pop	r14
    2346:	df 90       	pop	r13
    2348:	cf 90       	pop	r12
    234a:	bf 90       	pop	r11
    234c:	af 90       	pop	r10
    234e:	9f 90       	pop	r9
    2350:	8f 90       	pop	r8
    2352:	08 95       	ret

00002354 <Endpoint_Read_Stream_LE>:
    2354:	8f 92       	push	r8
    2356:	9f 92       	push	r9
    2358:	af 92       	push	r10
    235a:	bf 92       	push	r11
    235c:	cf 92       	push	r12
    235e:	df 92       	push	r13
    2360:	ef 92       	push	r14
    2362:	ff 92       	push	r15
    2364:	0f 93       	push	r16
    2366:	1f 93       	push	r17
    2368:	cf 93       	push	r28
    236a:	df 93       	push	r29
    236c:	8c 01       	movw	r16, r24
    236e:	eb 01       	movw	r28, r22
    2370:	6a 01       	movw	r12, r20
    2372:	8d d2       	rcall	.+1306   	; 0x288e <Endpoint_WaitUntilReady>
    2374:	81 11       	cpse	r24, r1
    2376:	3d c0       	rjmp	.+122    	; 0x23f2 <Endpoint_Read_Stream_LE+0x9e>
    2378:	c1 14       	cp	r12, r1
    237a:	d1 04       	cpc	r13, r1
    237c:	39 f0       	breq	.+14     	; 0x238c <Endpoint_Read_Stream_LE+0x38>
    237e:	f6 01       	movw	r30, r12
    2380:	80 81       	ld	r24, Z
    2382:	91 81       	ldd	r25, Z+1	; 0x01
    2384:	c8 1b       	sub	r28, r24
    2386:	d9 0b       	sbc	r29, r25
    2388:	08 0f       	add	r16, r24
    238a:	19 1f       	adc	r17, r25
    238c:	20 97       	sbiw	r28, 0x00	; 0
    238e:	81 f1       	breq	.+96     	; 0x23f0 <Endpoint_Read_Stream_LE+0x9c>
    2390:	e1 2c       	mov	r14, r1
    2392:	f1 2c       	mov	r15, r1
    2394:	0f 2e       	mov	r0, r31
    2396:	f8 ee       	ldi	r31, 0xE8	; 232
    2398:	8f 2e       	mov	r8, r31
    239a:	91 2c       	mov	r9, r1
    239c:	f0 2d       	mov	r31, r0
    239e:	0f 2e       	mov	r0, r31
    23a0:	f1 ef       	ldi	r31, 0xF1	; 241
    23a2:	af 2e       	mov	r10, r31
    23a4:	b1 2c       	mov	r11, r1
    23a6:	f0 2d       	mov	r31, r0
    23a8:	f4 01       	movw	r30, r8
    23aa:	80 81       	ld	r24, Z
    23ac:	85 fd       	sbrc	r24, 5
    23ae:	13 c0       	rjmp	.+38     	; 0x23d6 <Endpoint_Read_Stream_LE+0x82>
    23b0:	80 81       	ld	r24, Z
    23b2:	8b 77       	andi	r24, 0x7B	; 123
    23b4:	80 83       	st	Z, r24
    23b6:	c1 14       	cp	r12, r1
    23b8:	d1 04       	cpc	r13, r1
    23ba:	49 f0       	breq	.+18     	; 0x23ce <Endpoint_Read_Stream_LE+0x7a>
    23bc:	f6 01       	movw	r30, r12
    23be:	80 81       	ld	r24, Z
    23c0:	91 81       	ldd	r25, Z+1	; 0x01
    23c2:	e8 0e       	add	r14, r24
    23c4:	f9 1e       	adc	r15, r25
    23c6:	f1 82       	std	Z+1, r15	; 0x01
    23c8:	e0 82       	st	Z, r14
    23ca:	85 e0       	ldi	r24, 0x05	; 5
    23cc:	12 c0       	rjmp	.+36     	; 0x23f2 <Endpoint_Read_Stream_LE+0x9e>
    23ce:	5f d2       	rcall	.+1214   	; 0x288e <Endpoint_WaitUntilReady>
    23d0:	88 23       	and	r24, r24
    23d2:	51 f0       	breq	.+20     	; 0x23e8 <Endpoint_Read_Stream_LE+0x94>
    23d4:	0e c0       	rjmp	.+28     	; 0x23f2 <Endpoint_Read_Stream_LE+0x9e>
    23d6:	f5 01       	movw	r30, r10
    23d8:	80 81       	ld	r24, Z
    23da:	f8 01       	movw	r30, r16
    23dc:	81 93       	st	Z+, r24
    23de:	8f 01       	movw	r16, r30
    23e0:	21 97       	sbiw	r28, 0x01	; 1
    23e2:	ff ef       	ldi	r31, 0xFF	; 255
    23e4:	ef 1a       	sub	r14, r31
    23e6:	ff 0a       	sbc	r15, r31
    23e8:	20 97       	sbiw	r28, 0x00	; 0
    23ea:	f1 f6       	brne	.-68     	; 0x23a8 <Endpoint_Read_Stream_LE+0x54>
    23ec:	80 e0       	ldi	r24, 0x00	; 0
    23ee:	01 c0       	rjmp	.+2      	; 0x23f2 <Endpoint_Read_Stream_LE+0x9e>
    23f0:	80 e0       	ldi	r24, 0x00	; 0
    23f2:	df 91       	pop	r29
    23f4:	cf 91       	pop	r28
    23f6:	1f 91       	pop	r17
    23f8:	0f 91       	pop	r16
    23fa:	ff 90       	pop	r15
    23fc:	ef 90       	pop	r14
    23fe:	df 90       	pop	r13
    2400:	cf 90       	pop	r12
    2402:	bf 90       	pop	r11
    2404:	af 90       	pop	r10
    2406:	9f 90       	pop	r9
    2408:	8f 90       	pop	r8
    240a:	08 95       	ret

0000240c <Endpoint_Write_Control_Stream_LE>:
    240c:	ef 92       	push	r14
    240e:	ff 92       	push	r15
    2410:	0f 93       	push	r16
    2412:	1f 93       	push	r17
    2414:	cf 93       	push	r28
    2416:	df 93       	push	r29
    2418:	20 91 7e 06 	lds	r18, 0x067E	; 0x80067e <USB_ControlRequest+0x6>
    241c:	30 91 7f 06 	lds	r19, 0x067F	; 0x80067f <USB_ControlRequest+0x7>
    2420:	26 17       	cp	r18, r22
    2422:	37 07       	cpc	r19, r23
    2424:	58 f0       	brcs	.+22     	; 0x243c <Endpoint_Write_Control_Stream_LE+0x30>
    2426:	61 15       	cp	r22, r1
    2428:	71 05       	cpc	r23, r1
    242a:	39 f4       	brne	.+14     	; 0x243a <Endpoint_Write_Control_Stream_LE+0x2e>
    242c:	e8 ee       	ldi	r30, 0xE8	; 232
    242e:	f0 e0       	ldi	r31, 0x00	; 0
    2430:	20 81       	ld	r18, Z
    2432:	2e 77       	andi	r18, 0x7E	; 126
    2434:	20 83       	st	Z, r18
    2436:	9b 01       	movw	r18, r22
    2438:	01 c0       	rjmp	.+2      	; 0x243c <Endpoint_Write_Control_Stream_LE+0x30>
    243a:	9b 01       	movw	r18, r22
    243c:	a8 2f       	mov	r26, r24
    243e:	b9 2f       	mov	r27, r25
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	e8 ee       	ldi	r30, 0xE8	; 232
    2444:	f0 e0       	ldi	r31, 0x00	; 0
    2446:	62 ef       	ldi	r22, 0xF2	; 242
    2448:	70 e0       	ldi	r23, 0x00	; 0
    244a:	0f 2e       	mov	r0, r31
    244c:	f1 ef       	ldi	r31, 0xF1	; 241
    244e:	ef 2e       	mov	r14, r31
    2450:	f1 2c       	mov	r15, r1
    2452:	f0 2d       	mov	r31, r0
    2454:	11 e0       	ldi	r17, 0x01	; 1
    2456:	00 e0       	ldi	r16, 0x00	; 0
    2458:	2f c0       	rjmp	.+94     	; 0x24b8 <Endpoint_Write_Control_Stream_LE+0xac>
    245a:	80 91 77 06 	lds	r24, 0x0677	; 0x800677 <USB_DeviceState>
    245e:	88 23       	and	r24, r24
    2460:	09 f4       	brne	.+2      	; 0x2464 <Endpoint_Write_Control_Stream_LE+0x58>
    2462:	41 c0       	rjmp	.+130    	; 0x24e6 <Endpoint_Write_Control_Stream_LE+0xda>
    2464:	85 30       	cpi	r24, 0x05	; 5
    2466:	09 f4       	brne	.+2      	; 0x246a <Endpoint_Write_Control_Stream_LE+0x5e>
    2468:	40 c0       	rjmp	.+128    	; 0x24ea <Endpoint_Write_Control_Stream_LE+0xde>
    246a:	80 81       	ld	r24, Z
    246c:	83 fd       	sbrc	r24, 3
    246e:	3f c0       	rjmp	.+126    	; 0x24ee <Endpoint_Write_Control_Stream_LE+0xe2>
    2470:	80 81       	ld	r24, Z
    2472:	82 fd       	sbrc	r24, 2
    2474:	31 c0       	rjmp	.+98     	; 0x24d8 <Endpoint_Write_Control_Stream_LE+0xcc>
    2476:	80 81       	ld	r24, Z
    2478:	80 ff       	sbrs	r24, 0
    247a:	1e c0       	rjmp	.+60     	; 0x24b8 <Endpoint_Write_Control_Stream_LE+0xac>
    247c:	eb 01       	movw	r28, r22
    247e:	48 81       	ld	r20, Y
    2480:	59 81       	ldd	r21, Y+1	; 0x01
    2482:	21 15       	cp	r18, r1
    2484:	31 05       	cpc	r19, r1
    2486:	81 f0       	breq	.+32     	; 0x24a8 <Endpoint_Write_Control_Stream_LE+0x9c>
    2488:	48 30       	cpi	r20, 0x08	; 8
    248a:	51 05       	cpc	r21, r1
    248c:	68 f4       	brcc	.+26     	; 0x24a8 <Endpoint_Write_Control_Stream_LE+0x9c>
    248e:	8d 91       	ld	r24, X+
    2490:	e7 01       	movw	r28, r14
    2492:	88 83       	st	Y, r24
    2494:	21 50       	subi	r18, 0x01	; 1
    2496:	31 09       	sbc	r19, r1
    2498:	4f 5f       	subi	r20, 0xFF	; 255
    249a:	5f 4f       	sbci	r21, 0xFF	; 255
    249c:	21 15       	cp	r18, r1
    249e:	31 05       	cpc	r19, r1
    24a0:	19 f0       	breq	.+6      	; 0x24a8 <Endpoint_Write_Control_Stream_LE+0x9c>
    24a2:	48 30       	cpi	r20, 0x08	; 8
    24a4:	51 05       	cpc	r21, r1
    24a6:	99 f7       	brne	.-26     	; 0x248e <Endpoint_Write_Control_Stream_LE+0x82>
    24a8:	91 2f       	mov	r25, r17
    24aa:	48 30       	cpi	r20, 0x08	; 8
    24ac:	51 05       	cpc	r21, r1
    24ae:	09 f0       	breq	.+2      	; 0x24b2 <Endpoint_Write_Control_Stream_LE+0xa6>
    24b0:	90 2f       	mov	r25, r16
    24b2:	80 81       	ld	r24, Z
    24b4:	8e 77       	andi	r24, 0x7E	; 126
    24b6:	80 83       	st	Z, r24
    24b8:	21 15       	cp	r18, r1
    24ba:	31 05       	cpc	r19, r1
    24bc:	71 f6       	brne	.-100    	; 0x245a <Endpoint_Write_Control_Stream_LE+0x4e>
    24be:	91 11       	cpse	r25, r1
    24c0:	cc cf       	rjmp	.-104    	; 0x245a <Endpoint_Write_Control_Stream_LE+0x4e>
    24c2:	0a c0       	rjmp	.+20     	; 0x24d8 <Endpoint_Write_Control_Stream_LE+0xcc>
    24c4:	80 91 77 06 	lds	r24, 0x0677	; 0x800677 <USB_DeviceState>
    24c8:	88 23       	and	r24, r24
    24ca:	99 f0       	breq	.+38     	; 0x24f2 <Endpoint_Write_Control_Stream_LE+0xe6>
    24cc:	85 30       	cpi	r24, 0x05	; 5
    24ce:	99 f0       	breq	.+38     	; 0x24f6 <Endpoint_Write_Control_Stream_LE+0xea>
    24d0:	80 81       	ld	r24, Z
    24d2:	83 ff       	sbrs	r24, 3
    24d4:	03 c0       	rjmp	.+6      	; 0x24dc <Endpoint_Write_Control_Stream_LE+0xd0>
    24d6:	11 c0       	rjmp	.+34     	; 0x24fa <Endpoint_Write_Control_Stream_LE+0xee>
    24d8:	e8 ee       	ldi	r30, 0xE8	; 232
    24da:	f0 e0       	ldi	r31, 0x00	; 0
    24dc:	80 81       	ld	r24, Z
    24de:	82 ff       	sbrs	r24, 2
    24e0:	f1 cf       	rjmp	.-30     	; 0x24c4 <Endpoint_Write_Control_Stream_LE+0xb8>
    24e2:	80 e0       	ldi	r24, 0x00	; 0
    24e4:	0b c0       	rjmp	.+22     	; 0x24fc <Endpoint_Write_Control_Stream_LE+0xf0>
    24e6:	82 e0       	ldi	r24, 0x02	; 2
    24e8:	09 c0       	rjmp	.+18     	; 0x24fc <Endpoint_Write_Control_Stream_LE+0xf0>
    24ea:	83 e0       	ldi	r24, 0x03	; 3
    24ec:	07 c0       	rjmp	.+14     	; 0x24fc <Endpoint_Write_Control_Stream_LE+0xf0>
    24ee:	81 e0       	ldi	r24, 0x01	; 1
    24f0:	05 c0       	rjmp	.+10     	; 0x24fc <Endpoint_Write_Control_Stream_LE+0xf0>
    24f2:	82 e0       	ldi	r24, 0x02	; 2
    24f4:	03 c0       	rjmp	.+6      	; 0x24fc <Endpoint_Write_Control_Stream_LE+0xf0>
    24f6:	83 e0       	ldi	r24, 0x03	; 3
    24f8:	01 c0       	rjmp	.+2      	; 0x24fc <Endpoint_Write_Control_Stream_LE+0xf0>
    24fa:	81 e0       	ldi	r24, 0x01	; 1
    24fc:	df 91       	pop	r29
    24fe:	cf 91       	pop	r28
    2500:	1f 91       	pop	r17
    2502:	0f 91       	pop	r16
    2504:	ff 90       	pop	r15
    2506:	ef 90       	pop	r14
    2508:	08 95       	ret

0000250a <Endpoint_Read_Control_Stream_LE>:
    250a:	cf 93       	push	r28
    250c:	df 93       	push	r29
    250e:	61 15       	cp	r22, r1
    2510:	71 05       	cpc	r23, r1
    2512:	39 f5       	brne	.+78     	; 0x2562 <Endpoint_Read_Control_Stream_LE+0x58>
    2514:	e8 ee       	ldi	r30, 0xE8	; 232
    2516:	f0 e0       	ldi	r31, 0x00	; 0
    2518:	80 81       	ld	r24, Z
    251a:	8b 77       	andi	r24, 0x7B	; 123
    251c:	80 83       	st	Z, r24
    251e:	3d c0       	rjmp	.+122    	; 0x259a <Endpoint_Read_Control_Stream_LE+0x90>
    2520:	80 91 77 06 	lds	r24, 0x0677	; 0x800677 <USB_DeviceState>
    2524:	88 23       	and	r24, r24
    2526:	09 f4       	brne	.+2      	; 0x252a <Endpoint_Read_Control_Stream_LE+0x20>
    2528:	3f c0       	rjmp	.+126    	; 0x25a8 <Endpoint_Read_Control_Stream_LE+0x9e>
    252a:	85 30       	cpi	r24, 0x05	; 5
    252c:	09 f4       	brne	.+2      	; 0x2530 <Endpoint_Read_Control_Stream_LE+0x26>
    252e:	3e c0       	rjmp	.+124    	; 0x25ac <Endpoint_Read_Control_Stream_LE+0xa2>
    2530:	80 81       	ld	r24, Z
    2532:	83 fd       	sbrc	r24, 3
    2534:	3d c0       	rjmp	.+122    	; 0x25b0 <Endpoint_Read_Control_Stream_LE+0xa6>
    2536:	80 81       	ld	r24, Z
    2538:	82 ff       	sbrs	r24, 2
    253a:	f2 cf       	rjmp	.-28     	; 0x2520 <Endpoint_Read_Control_Stream_LE+0x16>
    253c:	45 c0       	rjmp	.+138    	; 0x25c8 <Endpoint_Read_Control_Stream_LE+0xbe>
    253e:	e9 01       	movw	r28, r18
    2540:	88 81       	ld	r24, Y
    2542:	8d 93       	st	X+, r24
    2544:	61 50       	subi	r22, 0x01	; 1
    2546:	71 09       	sbc	r23, r1
    2548:	29 f0       	breq	.+10     	; 0x2554 <Endpoint_Read_Control_Stream_LE+0x4a>
    254a:	ea 01       	movw	r28, r20
    254c:	88 81       	ld	r24, Y
    254e:	99 81       	ldd	r25, Y+1	; 0x01
    2550:	89 2b       	or	r24, r25
    2552:	a9 f7       	brne	.-22     	; 0x253e <Endpoint_Read_Control_Stream_LE+0x34>
    2554:	80 81       	ld	r24, Z
    2556:	8b 77       	andi	r24, 0x7B	; 123
    2558:	80 83       	st	Z, r24
    255a:	61 15       	cp	r22, r1
    255c:	71 05       	cpc	r23, r1
    255e:	49 f4       	brne	.+18     	; 0x2572 <Endpoint_Read_Control_Stream_LE+0x68>
    2560:	1c c0       	rjmp	.+56     	; 0x259a <Endpoint_Read_Control_Stream_LE+0x90>
    2562:	a8 2f       	mov	r26, r24
    2564:	b9 2f       	mov	r27, r25
    2566:	e8 ee       	ldi	r30, 0xE8	; 232
    2568:	f0 e0       	ldi	r31, 0x00	; 0
    256a:	42 ef       	ldi	r20, 0xF2	; 242
    256c:	50 e0       	ldi	r21, 0x00	; 0
    256e:	21 ef       	ldi	r18, 0xF1	; 241
    2570:	30 e0       	ldi	r19, 0x00	; 0
    2572:	80 91 77 06 	lds	r24, 0x0677	; 0x800677 <USB_DeviceState>
    2576:	88 23       	and	r24, r24
    2578:	e9 f0       	breq	.+58     	; 0x25b4 <Endpoint_Read_Control_Stream_LE+0xaa>
    257a:	85 30       	cpi	r24, 0x05	; 5
    257c:	e9 f0       	breq	.+58     	; 0x25b8 <Endpoint_Read_Control_Stream_LE+0xae>
    257e:	80 81       	ld	r24, Z
    2580:	83 fd       	sbrc	r24, 3
    2582:	1c c0       	rjmp	.+56     	; 0x25bc <Endpoint_Read_Control_Stream_LE+0xb2>
    2584:	80 81       	ld	r24, Z
    2586:	82 fd       	sbrc	r24, 2
    2588:	1f c0       	rjmp	.+62     	; 0x25c8 <Endpoint_Read_Control_Stream_LE+0xbe>
    258a:	ca cf       	rjmp	.-108    	; 0x2520 <Endpoint_Read_Control_Stream_LE+0x16>
    258c:	80 91 77 06 	lds	r24, 0x0677	; 0x800677 <USB_DeviceState>
    2590:	88 23       	and	r24, r24
    2592:	b1 f0       	breq	.+44     	; 0x25c0 <Endpoint_Read_Control_Stream_LE+0xb6>
    2594:	85 30       	cpi	r24, 0x05	; 5
    2596:	19 f4       	brne	.+6      	; 0x259e <Endpoint_Read_Control_Stream_LE+0x94>
    2598:	15 c0       	rjmp	.+42     	; 0x25c4 <Endpoint_Read_Control_Stream_LE+0xba>
    259a:	e8 ee       	ldi	r30, 0xE8	; 232
    259c:	f0 e0       	ldi	r31, 0x00	; 0
    259e:	80 81       	ld	r24, Z
    25a0:	80 ff       	sbrs	r24, 0
    25a2:	f4 cf       	rjmp	.-24     	; 0x258c <Endpoint_Read_Control_Stream_LE+0x82>
    25a4:	80 e0       	ldi	r24, 0x00	; 0
    25a6:	17 c0       	rjmp	.+46     	; 0x25d6 <Endpoint_Read_Control_Stream_LE+0xcc>
    25a8:	82 e0       	ldi	r24, 0x02	; 2
    25aa:	15 c0       	rjmp	.+42     	; 0x25d6 <Endpoint_Read_Control_Stream_LE+0xcc>
    25ac:	83 e0       	ldi	r24, 0x03	; 3
    25ae:	13 c0       	rjmp	.+38     	; 0x25d6 <Endpoint_Read_Control_Stream_LE+0xcc>
    25b0:	81 e0       	ldi	r24, 0x01	; 1
    25b2:	11 c0       	rjmp	.+34     	; 0x25d6 <Endpoint_Read_Control_Stream_LE+0xcc>
    25b4:	82 e0       	ldi	r24, 0x02	; 2
    25b6:	0f c0       	rjmp	.+30     	; 0x25d6 <Endpoint_Read_Control_Stream_LE+0xcc>
    25b8:	83 e0       	ldi	r24, 0x03	; 3
    25ba:	0d c0       	rjmp	.+26     	; 0x25d6 <Endpoint_Read_Control_Stream_LE+0xcc>
    25bc:	81 e0       	ldi	r24, 0x01	; 1
    25be:	0b c0       	rjmp	.+22     	; 0x25d6 <Endpoint_Read_Control_Stream_LE+0xcc>
    25c0:	82 e0       	ldi	r24, 0x02	; 2
    25c2:	09 c0       	rjmp	.+18     	; 0x25d6 <Endpoint_Read_Control_Stream_LE+0xcc>
    25c4:	83 e0       	ldi	r24, 0x03	; 3
    25c6:	07 c0       	rjmp	.+14     	; 0x25d6 <Endpoint_Read_Control_Stream_LE+0xcc>
    25c8:	ea 01       	movw	r28, r20
    25ca:	88 81       	ld	r24, Y
    25cc:	99 81       	ldd	r25, Y+1	; 0x01
    25ce:	89 2b       	or	r24, r25
    25d0:	09 f0       	breq	.+2      	; 0x25d4 <Endpoint_Read_Control_Stream_LE+0xca>
    25d2:	b5 cf       	rjmp	.-150    	; 0x253e <Endpoint_Read_Control_Stream_LE+0x34>
    25d4:	bf cf       	rjmp	.-130    	; 0x2554 <Endpoint_Read_Control_Stream_LE+0x4a>
    25d6:	df 91       	pop	r29
    25d8:	cf 91       	pop	r28
    25da:	08 95       	ret

000025dc <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    25dc:	ef 92       	push	r14
    25de:	ff 92       	push	r15
    25e0:	0f 93       	push	r16
    25e2:	1f 93       	push	r17
    25e4:	cf 93       	push	r28
    25e6:	df 93       	push	r29
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    25e8:	20 91 7e 06 	lds	r18, 0x067E	; 0x80067e <USB_ControlRequest+0x6>
    25ec:	30 91 7f 06 	lds	r19, 0x067F	; 0x80067f <USB_ControlRequest+0x7>
    25f0:	26 17       	cp	r18, r22
    25f2:	37 07       	cpc	r19, r23
    25f4:	58 f0       	brcs	.+22     	; 0x260c <Endpoint_Write_Control_PStream_LE+0x30>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    25f6:	61 15       	cp	r22, r1
    25f8:	71 05       	cpc	r23, r1
    25fa:	39 f4       	brne	.+14     	; 0x260a <Endpoint_Write_Control_PStream_LE+0x2e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    25fc:	e8 ee       	ldi	r30, 0xE8	; 232
    25fe:	f0 e0       	ldi	r31, 0x00	; 0
    2600:	20 81       	ld	r18, Z
    2602:	2e 77       	andi	r18, 0x7E	; 126
    2604:	20 83       	st	Z, r18
    2606:	9b 01       	movw	r18, r22
    2608:	01 c0       	rjmp	.+2      	; 0x260c <Endpoint_Write_Control_PStream_LE+0x30>
    260a:	9b 01       	movw	r18, r22
    260c:	e8 2f       	mov	r30, r24
    260e:	f9 2f       	mov	r31, r25
    2610:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2612:	a8 ee       	ldi	r26, 0xE8	; 232
    2614:	b0 e0       	ldi	r27, 0x00	; 0
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    2616:	62 ef       	ldi	r22, 0xF2	; 242
    2618:	70 e0       	ldi	r23, 0x00	; 0
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    261a:	0f 2e       	mov	r0, r31
    261c:	f1 ef       	ldi	r31, 0xF1	; 241
    261e:	ef 2e       	mov	r14, r31
    2620:	f1 2c       	mov	r15, r1
    2622:	f0 2d       	mov	r31, r0
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    2624:	11 e0       	ldi	r17, 0x01	; 1
    2626:	00 e0       	ldi	r16, 0x00	; 0
    2628:	30 c0       	rjmp	.+96     	; 0x268a <Endpoint_Write_Control_PStream_LE+0xae>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    262a:	80 91 77 06 	lds	r24, 0x0677	; 0x800677 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    262e:	88 23       	and	r24, r24
    2630:	09 f4       	brne	.+2      	; 0x2634 <Endpoint_Write_Control_PStream_LE+0x58>
    2632:	42 c0       	rjmp	.+132    	; 0x26b8 <Endpoint_Write_Control_PStream_LE+0xdc>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    2634:	85 30       	cpi	r24, 0x05	; 5
    2636:	09 f4       	brne	.+2      	; 0x263a <Endpoint_Write_Control_PStream_LE+0x5e>
    2638:	41 c0       	rjmp	.+130    	; 0x26bc <Endpoint_Write_Control_PStream_LE+0xe0>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    263a:	8c 91       	ld	r24, X
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    263c:	83 fd       	sbrc	r24, 3
    263e:	40 c0       	rjmp	.+128    	; 0x26c0 <Endpoint_Write_Control_PStream_LE+0xe4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2640:	8c 91       	ld	r24, X
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    2642:	82 fd       	sbrc	r24, 2
    2644:	32 c0       	rjmp	.+100    	; 0x26aa <Endpoint_Write_Control_PStream_LE+0xce>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2646:	8c 91       	ld	r24, X
		  break;

		if (Endpoint_IsINReady())
    2648:	80 ff       	sbrs	r24, 0
    264a:	1f c0       	rjmp	.+62     	; 0x268a <Endpoint_Write_Control_PStream_LE+0xae>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    264c:	eb 01       	movw	r28, r22
    264e:	48 81       	ld	r20, Y
    2650:	59 81       	ldd	r21, Y+1	; 0x01
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    2652:	21 15       	cp	r18, r1
    2654:	31 05       	cpc	r19, r1
    2656:	89 f0       	breq	.+34     	; 0x267a <Endpoint_Write_Control_PStream_LE+0x9e>
    2658:	48 30       	cpi	r20, 0x08	; 8
    265a:	51 05       	cpc	r21, r1
    265c:	70 f4       	brcc	.+28     	; 0x267a <Endpoint_Write_Control_PStream_LE+0x9e>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    265e:	84 91       	lpm	r24, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2660:	e7 01       	movw	r28, r14
    2662:	88 83       	st	Y, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    2664:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    2666:	21 50       	subi	r18, 0x01	; 1
    2668:	31 09       	sbc	r19, r1
				BytesInEndpoint++;
    266a:	4f 5f       	subi	r20, 0xFF	; 255
    266c:	5f 4f       	sbci	r21, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    266e:	21 15       	cp	r18, r1
    2670:	31 05       	cpc	r19, r1
    2672:	19 f0       	breq	.+6      	; 0x267a <Endpoint_Write_Control_PStream_LE+0x9e>
    2674:	48 30       	cpi	r20, 0x08	; 8
    2676:	51 05       	cpc	r21, r1
    2678:	91 f7       	brne	.-28     	; 0x265e <Endpoint_Write_Control_PStream_LE+0x82>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    267a:	91 2f       	mov	r25, r17
    267c:	48 30       	cpi	r20, 0x08	; 8
    267e:	51 05       	cpc	r21, r1
    2680:	09 f0       	breq	.+2      	; 0x2684 <Endpoint_Write_Control_PStream_LE+0xa8>
    2682:	90 2f       	mov	r25, r16
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2684:	8c 91       	ld	r24, X
    2686:	8e 77       	andi	r24, 0x7E	; 126
    2688:	8c 93       	st	X, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    268a:	21 15       	cp	r18, r1
    268c:	31 05       	cpc	r19, r1
    268e:	69 f6       	brne	.-102    	; 0x262a <Endpoint_Write_Control_PStream_LE+0x4e>
    2690:	91 11       	cpse	r25, r1
    2692:	cb cf       	rjmp	.-106    	; 0x262a <Endpoint_Write_Control_PStream_LE+0x4e>
    2694:	0a c0       	rjmp	.+20     	; 0x26aa <Endpoint_Write_Control_PStream_LE+0xce>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    2696:	80 91 77 06 	lds	r24, 0x0677	; 0x800677 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    269a:	88 23       	and	r24, r24
    269c:	99 f0       	breq	.+38     	; 0x26c4 <Endpoint_Write_Control_PStream_LE+0xe8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    269e:	85 30       	cpi	r24, 0x05	; 5
    26a0:	99 f0       	breq	.+38     	; 0x26c8 <Endpoint_Write_Control_PStream_LE+0xec>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    26a2:	80 81       	ld	r24, Z
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    26a4:	83 ff       	sbrs	r24, 3
    26a6:	03 c0       	rjmp	.+6      	; 0x26ae <Endpoint_Write_Control_PStream_LE+0xd2>
    26a8:	11 c0       	rjmp	.+34     	; 0x26cc <Endpoint_Write_Control_PStream_LE+0xf0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    26aa:	e8 ee       	ldi	r30, 0xE8	; 232
    26ac:	f0 e0       	ldi	r31, 0x00	; 0
    26ae:	80 81       	ld	r24, Z
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    26b0:	82 ff       	sbrs	r24, 2
    26b2:	f1 cf       	rjmp	.-30     	; 0x2696 <Endpoint_Write_Control_PStream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    26b4:	80 e0       	ldi	r24, 0x00	; 0
    26b6:	0b c0       	rjmp	.+22     	; 0x26ce <Endpoint_Write_Control_PStream_LE+0xf2>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    26b8:	82 e0       	ldi	r24, 0x02	; 2
    26ba:	09 c0       	rjmp	.+18     	; 0x26ce <Endpoint_Write_Control_PStream_LE+0xf2>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    26bc:	83 e0       	ldi	r24, 0x03	; 3
    26be:	07 c0       	rjmp	.+14     	; 0x26ce <Endpoint_Write_Control_PStream_LE+0xf2>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    26c0:	81 e0       	ldi	r24, 0x01	; 1
    26c2:	05 c0       	rjmp	.+10     	; 0x26ce <Endpoint_Write_Control_PStream_LE+0xf2>
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    26c4:	82 e0       	ldi	r24, 0x02	; 2
    26c6:	03 c0       	rjmp	.+6      	; 0x26ce <Endpoint_Write_Control_PStream_LE+0xf2>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    26c8:	83 e0       	ldi	r24, 0x03	; 3
    26ca:	01 c0       	rjmp	.+2      	; 0x26ce <Endpoint_Write_Control_PStream_LE+0xf2>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    26cc:	81 e0       	ldi	r24, 0x01	; 1
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    26ce:	df 91       	pop	r29
    26d0:	cf 91       	pop	r28
    26d2:	1f 91       	pop	r17
    26d4:	0f 91       	pop	r16
    26d6:	ff 90       	pop	r15
    26d8:	ef 90       	pop	r14
    26da:	08 95       	ret

000026dc <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
    26dc:	8f 92       	push	r8
    26de:	9f 92       	push	r9
    26e0:	bf 92       	push	r11
    26e2:	cf 92       	push	r12
    26e4:	df 92       	push	r13
    26e6:	ef 92       	push	r14
    26e8:	ff 92       	push	r15
    26ea:	0f 93       	push	r16
    26ec:	1f 93       	push	r17
    26ee:	cf 93       	push	r28
    26f0:	df 93       	push	r29
    26f2:	87 30       	cpi	r24, 0x07	; 7
    26f4:	70 f1       	brcs	.+92     	; 0x2752 <Endpoint_ConfigureEndpoint_Prv+0x76>
    26f6:	26 c0       	rjmp	.+76     	; 0x2744 <Endpoint_ConfigureEndpoint_Prv+0x68>
    26f8:	29 2f       	mov	r18, r25
    26fa:	2f 70       	andi	r18, 0x0F	; 15
    26fc:	e7 01       	movw	r28, r14
    26fe:	28 83       	st	Y, r18
    2700:	89 17       	cp	r24, r25
    2702:	31 f0       	breq	.+12     	; 0x2710 <Endpoint_ConfigureEndpoint_Prv+0x34>
    2704:	e8 01       	movw	r28, r16
    2706:	78 81       	ld	r23, Y
    2708:	20 81       	ld	r18, Z
    270a:	e4 01       	movw	r28, r8
    270c:	58 81       	ld	r21, Y
    270e:	03 c0       	rjmp	.+6      	; 0x2716 <Endpoint_ConfigureEndpoint_Prv+0x3a>
    2710:	24 2f       	mov	r18, r20
    2712:	76 2f       	mov	r23, r22
    2714:	5b 2d       	mov	r21, r11
    2716:	21 ff       	sbrs	r18, 1
    2718:	12 c0       	rjmp	.+36     	; 0x273e <Endpoint_ConfigureEndpoint_Prv+0x62>
    271a:	3c 91       	ld	r19, X
    271c:	3e 7f       	andi	r19, 0xFE	; 254
    271e:	3c 93       	st	X, r19
    2720:	30 81       	ld	r19, Z
    2722:	3d 7f       	andi	r19, 0xFD	; 253
    2724:	30 83       	st	Z, r19
    2726:	3c 91       	ld	r19, X
    2728:	31 60       	ori	r19, 0x01	; 1
    272a:	3c 93       	st	X, r19
    272c:	e8 01       	movw	r28, r16
    272e:	78 83       	st	Y, r23
    2730:	20 83       	st	Z, r18
    2732:	e4 01       	movw	r28, r8
    2734:	58 83       	st	Y, r21
    2736:	e6 01       	movw	r28, r12
    2738:	28 81       	ld	r18, Y
    273a:	22 23       	and	r18, r18
    273c:	44 f4       	brge	.+16     	; 0x274e <Endpoint_ConfigureEndpoint_Prv+0x72>
    273e:	9f 5f       	subi	r25, 0xFF	; 255
    2740:	97 30       	cpi	r25, 0x07	; 7
    2742:	d1 f6       	brne	.-76     	; 0x26f8 <Endpoint_ConfigureEndpoint_Prv+0x1c>
    2744:	8f 70       	andi	r24, 0x0F	; 15
    2746:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    274a:	81 e0       	ldi	r24, 0x01	; 1
    274c:	21 c0       	rjmp	.+66     	; 0x2790 <Endpoint_ConfigureEndpoint_Prv+0xb4>
    274e:	80 e0       	ldi	r24, 0x00	; 0
    2750:	1f c0       	rjmp	.+62     	; 0x2790 <Endpoint_ConfigureEndpoint_Prv+0xb4>
    2752:	98 2f       	mov	r25, r24
    2754:	9f 70       	andi	r25, 0x0F	; 15
    2756:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    275a:	98 2f       	mov	r25, r24
    275c:	24 2f       	mov	r18, r20
    275e:	76 2f       	mov	r23, r22
    2760:	50 e0       	ldi	r21, 0x00	; 0
    2762:	ab ee       	ldi	r26, 0xEB	; 235
    2764:	b0 e0       	ldi	r27, 0x00	; 0
    2766:	ed ee       	ldi	r30, 0xED	; 237
    2768:	f0 e0       	ldi	r31, 0x00	; 0
    276a:	0c ee       	ldi	r16, 0xEC	; 236
    276c:	10 e0       	ldi	r17, 0x00	; 0
    276e:	0f 2e       	mov	r0, r31
    2770:	f0 ef       	ldi	r31, 0xF0	; 240
    2772:	8f 2e       	mov	r8, r31
    2774:	91 2c       	mov	r9, r1
    2776:	f0 2d       	mov	r31, r0
    2778:	0f 2e       	mov	r0, r31
    277a:	fe ee       	ldi	r31, 0xEE	; 238
    277c:	cf 2e       	mov	r12, r31
    277e:	d1 2c       	mov	r13, r1
    2780:	f0 2d       	mov	r31, r0
    2782:	0f 2e       	mov	r0, r31
    2784:	f9 ee       	ldi	r31, 0xE9	; 233
    2786:	ef 2e       	mov	r14, r31
    2788:	f1 2c       	mov	r15, r1
    278a:	f0 2d       	mov	r31, r0
    278c:	b1 2c       	mov	r11, r1
    278e:	c3 cf       	rjmp	.-122    	; 0x2716 <Endpoint_ConfigureEndpoint_Prv+0x3a>
    2790:	df 91       	pop	r29
    2792:	cf 91       	pop	r28
    2794:	1f 91       	pop	r17
    2796:	0f 91       	pop	r16
    2798:	ff 90       	pop	r15
    279a:	ef 90       	pop	r14
    279c:	df 90       	pop	r13
    279e:	cf 90       	pop	r12
    27a0:	bf 90       	pop	r11
    27a2:	9f 90       	pop	r9
    27a4:	8f 90       	pop	r8
    27a6:	08 95       	ret

000027a8 <Endpoint_ConfigureEndpointTable>:
    27a8:	ef 92       	push	r14
    27aa:	ff 92       	push	r15
    27ac:	0f 93       	push	r16
    27ae:	1f 93       	push	r17
    27b0:	cf 93       	push	r28
    27b2:	df 93       	push	r29
    27b4:	66 23       	and	r22, r22
    27b6:	e9 f1       	breq	.+122    	; 0x2832 <Endpoint_ConfigureEndpointTable+0x8a>
    27b8:	06 2f       	mov	r16, r22
    27ba:	c8 2f       	mov	r28, r24
    27bc:	d9 2f       	mov	r29, r25
    27be:	10 e0       	ldi	r17, 0x00	; 0
    27c0:	0f 2e       	mov	r0, r31
    27c2:	f6 e0       	ldi	r31, 0x06	; 6
    27c4:	ff 2e       	mov	r15, r31
    27c6:	f0 2d       	mov	r31, r0
    27c8:	68 94       	set
    27ca:	ee 24       	eor	r14, r14
    27cc:	e1 f8       	bld	r14, 1
    27ce:	58 81       	ld	r21, Y
    27d0:	55 23       	and	r21, r21
    27d2:	49 f1       	breq	.+82     	; 0x2826 <Endpoint_ConfigureEndpointTable+0x7e>
    27d4:	9c 81       	ldd	r25, Y+4	; 0x04
    27d6:	e9 81       	ldd	r30, Y+1	; 0x01
    27d8:	fa 81       	ldd	r31, Y+2	; 0x02
    27da:	6b 81       	ldd	r22, Y+3	; 0x03
    27dc:	85 2f       	mov	r24, r21
    27de:	8f 70       	andi	r24, 0x0F	; 15
    27e0:	87 30       	cpi	r24, 0x07	; 7
    27e2:	48 f5       	brcc	.+82     	; 0x2836 <Endpoint_ConfigureEndpointTable+0x8e>
    27e4:	92 30       	cpi	r25, 0x02	; 2
    27e6:	10 f4       	brcc	.+4      	; 0x27ec <Endpoint_ConfigureEndpointTable+0x44>
    27e8:	4e 2d       	mov	r20, r14
    27ea:	01 c0       	rjmp	.+2      	; 0x27ee <Endpoint_ConfigureEndpointTable+0x46>
    27ec:	4f 2d       	mov	r20, r15
    27ee:	e9 30       	cpi	r30, 0x09	; 9
    27f0:	f1 05       	cpc	r31, r1
    27f2:	50 f0       	brcs	.+20     	; 0x2808 <Endpoint_ConfigureEndpointTable+0x60>
    27f4:	28 e0       	ldi	r18, 0x08	; 8
    27f6:	30 e0       	ldi	r19, 0x00	; 0
    27f8:	90 e0       	ldi	r25, 0x00	; 0
    27fa:	9f 5f       	subi	r25, 0xFF	; 255
    27fc:	22 0f       	add	r18, r18
    27fe:	33 1f       	adc	r19, r19
    2800:	2e 17       	cp	r18, r30
    2802:	3f 07       	cpc	r19, r31
    2804:	d0 f3       	brcs	.-12     	; 0x27fa <Endpoint_ConfigureEndpointTable+0x52>
    2806:	01 c0       	rjmp	.+2      	; 0x280a <Endpoint_ConfigureEndpointTable+0x62>
    2808:	90 e0       	ldi	r25, 0x00	; 0
    280a:	92 95       	swap	r25
    280c:	90 7f       	andi	r25, 0xF0	; 240
    280e:	49 2b       	or	r20, r25
    2810:	90 e4       	ldi	r25, 0x40	; 64
    2812:	69 9f       	mul	r22, r25
    2814:	b0 01       	movw	r22, r0
    2816:	11 24       	eor	r1, r1
    2818:	55 1f       	adc	r21, r21
    281a:	55 27       	eor	r21, r21
    281c:	55 1f       	adc	r21, r21
    281e:	65 2b       	or	r22, r21
    2820:	5d df       	rcall	.-326    	; 0x26dc <Endpoint_ConfigureEndpoint_Prv>
    2822:	88 23       	and	r24, r24
    2824:	49 f0       	breq	.+18     	; 0x2838 <Endpoint_ConfigureEndpointTable+0x90>
    2826:	1f 5f       	subi	r17, 0xFF	; 255
    2828:	25 96       	adiw	r28, 0x05	; 5
    282a:	01 13       	cpse	r16, r17
    282c:	d0 cf       	rjmp	.-96     	; 0x27ce <Endpoint_ConfigureEndpointTable+0x26>
    282e:	81 e0       	ldi	r24, 0x01	; 1
    2830:	03 c0       	rjmp	.+6      	; 0x2838 <Endpoint_ConfigureEndpointTable+0x90>
    2832:	81 e0       	ldi	r24, 0x01	; 1
    2834:	01 c0       	rjmp	.+2      	; 0x2838 <Endpoint_ConfigureEndpointTable+0x90>
    2836:	80 e0       	ldi	r24, 0x00	; 0
    2838:	df 91       	pop	r29
    283a:	cf 91       	pop	r28
    283c:	1f 91       	pop	r17
    283e:	0f 91       	pop	r16
    2840:	ff 90       	pop	r15
    2842:	ef 90       	pop	r14
    2844:	08 95       	ret

00002846 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    2846:	80 91 78 06 	lds	r24, 0x0678	; 0x800678 <USB_ControlRequest>
    284a:	88 23       	and	r24, r24
    284c:	44 f0       	brlt	.+16     	; 0x285e <Endpoint_ClearStatusStage+0x18>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    284e:	e8 ee       	ldi	r30, 0xE8	; 232
    2850:	f0 e0       	ldi	r31, 0x00	; 0
    2852:	14 c0       	rjmp	.+40     	; 0x287c <Endpoint_ClearStatusStage+0x36>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    2854:	80 91 77 06 	lds	r24, 0x0677	; 0x800677 <USB_DeviceState>
    2858:	81 11       	cpse	r24, r1
    285a:	03 c0       	rjmp	.+6      	; 0x2862 <Endpoint_ClearStatusStage+0x1c>
    285c:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    285e:	e8 ee       	ldi	r30, 0xE8	; 232
    2860:	f0 e0       	ldi	r31, 0x00	; 0
    2862:	80 81       	ld	r24, Z

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    2864:	82 ff       	sbrs	r24, 2
    2866:	f6 cf       	rjmp	.-20     	; 0x2854 <Endpoint_ClearStatusStage+0xe>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2868:	e8 ee       	ldi	r30, 0xE8	; 232
    286a:	f0 e0       	ldi	r31, 0x00	; 0
    286c:	80 81       	ld	r24, Z
    286e:	8b 77       	andi	r24, 0x7B	; 123
    2870:	80 83       	st	Z, r24
    2872:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    2874:	80 91 77 06 	lds	r24, 0x0677	; 0x800677 <USB_DeviceState>
    2878:	88 23       	and	r24, r24
    287a:	41 f0       	breq	.+16     	; 0x288c <Endpoint_ClearStatusStage+0x46>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    287c:	80 81       	ld	r24, Z

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    287e:	80 ff       	sbrs	r24, 0
    2880:	f9 cf       	rjmp	.-14     	; 0x2874 <Endpoint_ClearStatusStage+0x2e>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2882:	e8 ee       	ldi	r30, 0xE8	; 232
    2884:	f0 e0       	ldi	r31, 0x00	; 0
    2886:	80 81       	ld	r24, Z
    2888:	8e 77       	andi	r24, 0x7E	; 126
    288a:	80 83       	st	Z, r24
    288c:	08 95       	ret

0000288e <Endpoint_WaitUntilReady>:
	}
}

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
    288e:	0f 93       	push	r16
    2890:	1f 93       	push	r17
    2892:	cf 93       	push	r28
    2894:	df 93       	push	r29
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    2896:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    289a:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
    289e:	65 e6       	ldi	r22, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    28a0:	ac ee       	ldi	r26, 0xEC	; 236
    28a2:	b0 e0       	ldi	r27, 0x00	; 0
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    28a4:	e8 ee       	ldi	r30, 0xE8	; 232
    28a6:	f0 e0       	ldi	r31, 0x00	; 0
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    28a8:	0b ee       	ldi	r16, 0xEB	; 235
    28aa:	10 e0       	ldi	r17, 0x00	; 0
    28ac:	44 ee       	ldi	r20, 0xE4	; 228
    28ae:	50 e0       	ldi	r21, 0x00	; 0
    28b0:	01 c0       	rjmp	.+2      	; 0x28b4 <Endpoint_WaitUntilReady+0x26>
    28b2:	9c 01       	movw	r18, r24
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    28b4:	9c 91       	ld	r25, X
    28b6:	89 2f       	mov	r24, r25
    28b8:	81 70       	andi	r24, 0x01	; 1
    28ba:	90 fd       	sbrc	r25, 0
    28bc:	1d c0       	rjmp	.+58     	; 0x28f8 <Endpoint_WaitUntilReady+0x6a>
    28be:	20 c0       	rjmp	.+64     	; 0x2900 <Endpoint_WaitUntilReady+0x72>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    28c0:	80 91 77 06 	lds	r24, 0x0677	; 0x800677 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    28c4:	88 23       	and	r24, r24
    28c6:	81 f0       	breq	.+32     	; 0x28e8 <Endpoint_WaitUntilReady+0x5a>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    28c8:	85 30       	cpi	r24, 0x05	; 5
    28ca:	81 f0       	breq	.+32     	; 0x28ec <Endpoint_WaitUntilReady+0x5e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    28cc:	e8 01       	movw	r28, r16
    28ce:	88 81       	ld	r24, Y
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    28d0:	85 fd       	sbrc	r24, 5
    28d2:	0e c0       	rjmp	.+28     	; 0x28f0 <Endpoint_WaitUntilReady+0x62>
    28d4:	ea 01       	movw	r28, r20
    28d6:	88 81       	ld	r24, Y
    28d8:	99 81       	ldd	r25, Y+1	; 0x01
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    28da:	28 17       	cp	r18, r24
    28dc:	39 07       	cpc	r19, r25
    28de:	51 f3       	breq	.-44     	; 0x28b4 <Endpoint_WaitUntilReady+0x26>
    28e0:	61 50       	subi	r22, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    28e2:	39 f7       	brne	.-50     	; 0x28b2 <Endpoint_WaitUntilReady+0x24>
			  return ENDPOINT_READYWAIT_Timeout;
    28e4:	84 e0       	ldi	r24, 0x04	; 4
    28e6:	0f c0       	rjmp	.+30     	; 0x2906 <Endpoint_WaitUntilReady+0x78>
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    28e8:	82 e0       	ldi	r24, 0x02	; 2
    28ea:	0d c0       	rjmp	.+26     	; 0x2906 <Endpoint_WaitUntilReady+0x78>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    28ec:	83 e0       	ldi	r24, 0x03	; 3
    28ee:	0b c0       	rjmp	.+22     	; 0x2906 <Endpoint_WaitUntilReady+0x78>
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    28f0:	81 e0       	ldi	r24, 0x01	; 1
    28f2:	09 c0       	rjmp	.+18     	; 0x2906 <Endpoint_WaitUntilReady+0x78>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    28f4:	80 e0       	ldi	r24, 0x00	; 0
    28f6:	07 c0       	rjmp	.+14     	; 0x2906 <Endpoint_WaitUntilReady+0x78>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    28f8:	80 81       	ld	r24, Z

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    28fa:	80 ff       	sbrs	r24, 0
    28fc:	e1 cf       	rjmp	.-62     	; 0x28c0 <Endpoint_WaitUntilReady+0x32>
    28fe:	fa cf       	rjmp	.-12     	; 0x28f4 <Endpoint_WaitUntilReady+0x66>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2900:	90 81       	ld	r25, Z
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    2902:	92 ff       	sbrs	r25, 2
    2904:	dd cf       	rjmp	.-70     	; 0x28c0 <Endpoint_WaitUntilReady+0x32>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    2906:	df 91       	pop	r29
    2908:	cf 91       	pop	r28
    290a:	1f 91       	pop	r17
    290c:	0f 91       	pop	r16
    290e:	08 95       	ret

00002910 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
    2910:	0f 93       	push	r16
    2912:	1f 93       	push	r17
    2914:	cf 93       	push	r28
    2916:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    2918:	4f d0       	rcall	.+158    	; 0x29b8 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    291a:	56 d0       	rcall	.+172    	; 0x29c8 <USB_INT_ClearAllInterrupts>
    291c:	c8 ed       	ldi	r28, 0xD8	; 216
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    291e:	d0 e0       	ldi	r29, 0x00	; 0
    2920:	88 81       	ld	r24, Y
    2922:	8f 77       	andi	r24, 0x7F	; 127
    2924:	88 83       	st	Y, r24
    2926:	88 81       	ld	r24, Y
				USBCON |=  (1 << USBE);
    2928:	80 68       	ori	r24, 0x80	; 128
    292a:	88 83       	st	Y, r24
    292c:	88 81       	ld	r24, Y
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    292e:	8f 7d       	andi	r24, 0xDF	; 223
    2930:	88 83       	st	Y, r24
    2932:	e7 ed       	ldi	r30, 0xD7	; 215

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
    2934:	f0 e0       	ldi	r31, 0x00	; 0
    2936:	80 81       	ld	r24, Z
    2938:	80 68       	ori	r24, 0x80	; 128
    293a:	80 83       	st	Z, r24
    293c:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    293e:	10 92 77 06 	sts	0x0677, r1	; 0x800677 <USB_DeviceState>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    2942:	10 92 73 06 	sts	0x0673, r1	; 0x800673 <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
    2946:	10 92 75 06 	sts	0x0675, r1	; 0x800675 <USB_Device_RemoteWakeupEnabled>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    294a:	10 92 74 06 	sts	0x0674, r1	; 0x800674 <USB_Device_CurrentlySelfPowered>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    294e:	00 ee       	ldi	r16, 0xE0	; 224
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    2950:	10 e0       	ldi	r17, 0x00	; 0
    2952:	f8 01       	movw	r30, r16
    2954:	80 81       	ld	r24, Z
    2956:	8b 7f       	andi	r24, 0xFB	; 251
    2958:	80 83       	st	Z, r24
    295a:	88 81       	ld	r24, Y
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    295c:	81 60       	ori	r24, 0x01	; 1
    295e:	88 83       	st	Y, r24
    2960:	42 e0       	ldi	r20, 0x02	; 2
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    2962:	60 e0       	ldi	r22, 0x00	; 0
    2964:	80 e0       	ldi	r24, 0x00	; 0
    2966:	ba de       	rcall	.-652    	; 0x26dc <Endpoint_ConfigureEndpoint_Prv>
    2968:	e1 ee       	ldi	r30, 0xE1	; 225
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    296a:	f0 e0       	ldi	r31, 0x00	; 0
    296c:	80 81       	ld	r24, Z
    296e:	8e 7f       	andi	r24, 0xFE	; 254
    2970:	80 83       	st	Z, r24
    2972:	e2 ee       	ldi	r30, 0xE2	; 226
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    2974:	f0 e0       	ldi	r31, 0x00	; 0
    2976:	80 81       	ld	r24, Z
    2978:	81 60       	ori	r24, 0x01	; 1
    297a:	80 83       	st	Z, r24
    297c:	80 81       	ld	r24, Z
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    297e:	88 60       	ori	r24, 0x08	; 8
    2980:	80 83       	st	Z, r24
    2982:	f8 01       	movw	r30, r16
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    2984:	80 81       	ld	r24, Z
    2986:	8e 7f       	andi	r24, 0xFE	; 254
    2988:	80 83       	st	Z, r24
    298a:	88 81       	ld	r24, Y

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    298c:	80 61       	ori	r24, 0x10	; 16
    298e:	88 83       	st	Y, r24
    2990:	df 91       	pop	r29
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    2992:	cf 91       	pop	r28
    2994:	1f 91       	pop	r17
    2996:	0f 91       	pop	r16
    2998:	08 95       	ret

0000299a <USB_Init>:
    299a:	e8 ed       	ldi	r30, 0xD8	; 216
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    299c:	f0 e0       	ldi	r31, 0x00	; 0
    299e:	80 81       	ld	r24, Z
    29a0:	8f 7e       	andi	r24, 0xEF	; 239
    29a2:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    29a4:	e7 ed       	ldi	r30, 0xD7	; 215
    29a6:	f0 e0       	ldi	r31, 0x00	; 0
    29a8:	80 81       	ld	r24, Z
    29aa:	81 60       	ori	r24, 0x01	; 1
    29ac:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    29ae:	81 e0       	ldi	r24, 0x01	; 1
    29b0:	80 93 76 06 	sts	0x0676, r24	; 0x800676 <USB_IsInitialized>

	USB_ResetInterface();
    29b4:	ad cf       	rjmp	.-166    	; 0x2910 <USB_ResetInterface>
    29b6:	08 95       	ret

000029b8 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    29b8:	e8 ed       	ldi	r30, 0xD8	; 216
    29ba:	f0 e0       	ldi	r31, 0x00	; 0
    29bc:	80 81       	ld	r24, Z
    29be:	8c 7f       	andi	r24, 0xFC	; 252
    29c0:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    29c2:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    29c6:	08 95       	ret

000029c8 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    29c8:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    29cc:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    29d0:	08 95       	ret

000029d2 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    29d2:	1f 92       	push	r1
    29d4:	0f 92       	push	r0
    29d6:	0f b6       	in	r0, 0x3f	; 63
    29d8:	0f 92       	push	r0
    29da:	11 24       	eor	r1, r1
    29dc:	0b b6       	in	r0, 0x3b	; 59
    29de:	0f 92       	push	r0
    29e0:	2f 93       	push	r18
    29e2:	3f 93       	push	r19
    29e4:	4f 93       	push	r20
    29e6:	5f 93       	push	r21
    29e8:	6f 93       	push	r22
    29ea:	7f 93       	push	r23
    29ec:	8f 93       	push	r24
    29ee:	9f 93       	push	r25
    29f0:	af 93       	push	r26
    29f2:	bf 93       	push	r27
    29f4:	ef 93       	push	r30
    29f6:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    29f8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    29fc:	82 ff       	sbrs	r24, 2
    29fe:	0b c0       	rjmp	.+22     	; 0x2a16 <__vector_10+0x44>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    2a00:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    2a04:	82 ff       	sbrs	r24, 2
    2a06:	07 c0       	rjmp	.+14     	; 0x2a16 <__vector_10+0x44>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    2a08:	e1 ee       	ldi	r30, 0xE1	; 225
    2a0a:	f0 e0       	ldi	r31, 0x00	; 0
    2a0c:	80 81       	ld	r24, Z
    2a0e:	8b 7f       	andi	r24, 0xFB	; 251
    2a10:	80 83       	st	Z, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    2a12:	0e 94 57 0c 	call	0x18ae	; 0x18ae <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    2a16:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    2a1a:	80 ff       	sbrs	r24, 0
    2a1c:	1f c0       	rjmp	.+62     	; 0x2a5c <__vector_10+0x8a>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    2a1e:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    2a22:	80 ff       	sbrs	r24, 0
    2a24:	1b c0       	rjmp	.+54     	; 0x2a5c <__vector_10+0x8a>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    2a26:	ea ed       	ldi	r30, 0xDA	; 218
    2a28:	f0 e0       	ldi	r31, 0x00	; 0
    2a2a:	80 81       	ld	r24, Z
    2a2c:	8e 7f       	andi	r24, 0xFE	; 254
    2a2e:	80 83       	st	Z, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    2a30:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    2a34:	80 ff       	sbrs	r24, 0
    2a36:	0d c0       	rjmp	.+26     	; 0x2a52 <__vector_10+0x80>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    2a38:	8c e0       	ldi	r24, 0x0C	; 12
    2a3a:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    2a3c:	8e e0       	ldi	r24, 0x0E	; 14
    2a3e:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    2a40:	09 b4       	in	r0, 0x29	; 41
    2a42:	00 fe       	sbrs	r0, 0
    2a44:	fd cf       	rjmp	.-6      	; 0x2a40 <__vector_10+0x6e>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    2a46:	81 e0       	ldi	r24, 0x01	; 1
    2a48:	80 93 77 06 	sts	0x0677, r24	; 0x800677 <USB_DeviceState>
			EVENT_USB_Device_Connect();
    2a4c:	0e 94 0a 0c 	call	0x1814	; 0x1814 <EVENT_USB_Device_Connect>
    2a50:	05 c0       	rjmp	.+10     	; 0x2a5c <__vector_10+0x8a>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    2a52:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    2a54:	10 92 77 06 	sts	0x0677, r1	; 0x800677 <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
    2a58:	0e 94 17 0c 	call	0x182e	; 0x182e <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    2a5c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    2a60:	80 ff       	sbrs	r24, 0
    2a62:	16 c0       	rjmp	.+44     	; 0x2a90 <__vector_10+0xbe>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    2a64:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    2a68:	80 ff       	sbrs	r24, 0
    2a6a:	12 c0       	rjmp	.+36     	; 0x2a90 <__vector_10+0xbe>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    2a6c:	e2 ee       	ldi	r30, 0xE2	; 226
    2a6e:	f0 e0       	ldi	r31, 0x00	; 0
    2a70:	80 81       	ld	r24, Z
    2a72:	8e 7f       	andi	r24, 0xFE	; 254
    2a74:	80 83       	st	Z, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    2a76:	80 81       	ld	r24, Z
    2a78:	80 61       	ori	r24, 0x10	; 16
    2a7a:	80 83       	st	Z, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    2a7c:	e8 ed       	ldi	r30, 0xD8	; 216
    2a7e:	f0 e0       	ldi	r31, 0x00	; 0
    2a80:	80 81       	ld	r24, Z
    2a82:	80 62       	ori	r24, 0x20	; 32
    2a84:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    2a86:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    2a88:	85 e0       	ldi	r24, 0x05	; 5
    2a8a:	80 93 77 06 	sts	0x0677, r24	; 0x800677 <USB_DeviceState>
		EVENT_USB_Device_Suspend();
    2a8e:	3c d2       	rcall	.+1144   	; 0x2f08 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    2a90:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    2a94:	84 ff       	sbrs	r24, 4
    2a96:	2f c0       	rjmp	.+94     	; 0x2af6 <__vector_10+0x124>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    2a98:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    2a9c:	84 ff       	sbrs	r24, 4
    2a9e:	2b c0       	rjmp	.+86     	; 0x2af6 <__vector_10+0x124>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    2aa0:	8c e0       	ldi	r24, 0x0C	; 12
    2aa2:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    2aa4:	8e e0       	ldi	r24, 0x0E	; 14
    2aa6:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    2aa8:	09 b4       	in	r0, 0x29	; 41
    2aaa:	00 fe       	sbrs	r0, 0
    2aac:	fd cf       	rjmp	.-6      	; 0x2aa8 <__vector_10+0xd6>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    2aae:	e8 ed       	ldi	r30, 0xD8	; 216
    2ab0:	f0 e0       	ldi	r31, 0x00	; 0
    2ab2:	80 81       	ld	r24, Z
    2ab4:	8f 7d       	andi	r24, 0xDF	; 223
    2ab6:	80 83       	st	Z, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    2ab8:	e1 ee       	ldi	r30, 0xE1	; 225
    2aba:	f0 e0       	ldi	r31, 0x00	; 0
    2abc:	80 81       	ld	r24, Z
    2abe:	8f 7e       	andi	r24, 0xEF	; 239
    2ac0:	80 83       	st	Z, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    2ac2:	e2 ee       	ldi	r30, 0xE2	; 226
    2ac4:	f0 e0       	ldi	r31, 0x00	; 0
    2ac6:	80 81       	ld	r24, Z
    2ac8:	8f 7e       	andi	r24, 0xEF	; 239
    2aca:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    2acc:	80 81       	ld	r24, Z
    2ace:	81 60       	ori	r24, 0x01	; 1
    2ad0:	80 83       	st	Z, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    2ad2:	80 91 73 06 	lds	r24, 0x0673	; 0x800673 <USB_Device_ConfigurationNumber>
    2ad6:	88 23       	and	r24, r24
    2ad8:	21 f0       	breq	.+8      	; 0x2ae2 <__vector_10+0x110>
		  USB_DeviceState = DEVICE_STATE_Configured;
    2ada:	84 e0       	ldi	r24, 0x04	; 4
    2adc:	80 93 77 06 	sts	0x0677, r24	; 0x800677 <USB_DeviceState>
    2ae0:	09 c0       	rjmp	.+18     	; 0x2af4 <__vector_10+0x122>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    2ae2:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    2ae6:	88 23       	and	r24, r24
    2ae8:	14 f0       	brlt	.+4      	; 0x2aee <__vector_10+0x11c>
    2aea:	81 e0       	ldi	r24, 0x01	; 1
    2aec:	01 c0       	rjmp	.+2      	; 0x2af0 <__vector_10+0x11e>
    2aee:	83 e0       	ldi	r24, 0x03	; 3
    2af0:	80 93 77 06 	sts	0x0677, r24	; 0x800677 <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    2af4:	09 d2       	rcall	.+1042   	; 0x2f08 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    2af6:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    2afa:	83 ff       	sbrs	r24, 3
    2afc:	23 c0       	rjmp	.+70     	; 0x2b44 <__vector_10+0x172>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    2afe:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    2b02:	83 ff       	sbrs	r24, 3
    2b04:	1f c0       	rjmp	.+62     	; 0x2b44 <__vector_10+0x172>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    2b06:	e1 ee       	ldi	r30, 0xE1	; 225
    2b08:	f0 e0       	ldi	r31, 0x00	; 0
    2b0a:	80 81       	ld	r24, Z
    2b0c:	87 7f       	andi	r24, 0xF7	; 247
    2b0e:	80 83       	st	Z, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    2b10:	82 e0       	ldi	r24, 0x02	; 2
    2b12:	80 93 77 06 	sts	0x0677, r24	; 0x800677 <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
    2b16:	10 92 73 06 	sts	0x0673, r1	; 0x800673 <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    2b1a:	80 81       	ld	r24, Z
    2b1c:	8e 7f       	andi	r24, 0xFE	; 254
    2b1e:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    2b20:	e2 ee       	ldi	r30, 0xE2	; 226
    2b22:	f0 e0       	ldi	r31, 0x00	; 0
    2b24:	80 81       	ld	r24, Z
    2b26:	8e 7f       	andi	r24, 0xFE	; 254
    2b28:	80 83       	st	Z, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    2b2a:	80 81       	ld	r24, Z
    2b2c:	80 61       	ori	r24, 0x10	; 16
    2b2e:	80 83       	st	Z, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    2b30:	42 e0       	ldi	r20, 0x02	; 2
    2b32:	60 e0       	ldi	r22, 0x00	; 0
    2b34:	80 e0       	ldi	r24, 0x00	; 0
    2b36:	d2 dd       	rcall	.-1116   	; 0x26dc <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    2b38:	e0 ef       	ldi	r30, 0xF0	; 240
    2b3a:	f0 e0       	ldi	r31, 0x00	; 0
    2b3c:	80 81       	ld	r24, Z
    2b3e:	88 60       	ori	r24, 0x08	; 8

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    2b40:	80 83       	st	Z, r24
    2b42:	e2 d1       	rcall	.+964    	; 0x2f08 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    2b44:	ff 91       	pop	r31
    2b46:	ef 91       	pop	r30
    2b48:	bf 91       	pop	r27
    2b4a:	af 91       	pop	r26
    2b4c:	9f 91       	pop	r25
    2b4e:	8f 91       	pop	r24
    2b50:	7f 91       	pop	r23
    2b52:	6f 91       	pop	r22
    2b54:	5f 91       	pop	r21
    2b56:	4f 91       	pop	r20
    2b58:	3f 91       	pop	r19
    2b5a:	2f 91       	pop	r18
    2b5c:	0f 90       	pop	r0
    2b5e:	0b be       	out	0x3b, r0	; 59
    2b60:	0f 90       	pop	r0
    2b62:	0f be       	out	0x3f, r0	; 63
    2b64:	0f 90       	pop	r0
    2b66:	1f 90       	pop	r1
    2b68:	18 95       	reti

00002b6a <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    2b6a:	1f 92       	push	r1
    2b6c:	0f 92       	push	r0
    2b6e:	0f b6       	in	r0, 0x3f	; 63
    2b70:	0f 92       	push	r0
    2b72:	11 24       	eor	r1, r1
    2b74:	0b b6       	in	r0, 0x3b	; 59
    2b76:	0f 92       	push	r0
    2b78:	ef 92       	push	r14
    2b7a:	ff 92       	push	r15
    2b7c:	0f 93       	push	r16
    2b7e:	1f 93       	push	r17
    2b80:	2f 93       	push	r18
    2b82:	3f 93       	push	r19
    2b84:	4f 93       	push	r20
    2b86:	5f 93       	push	r21
    2b88:	6f 93       	push	r22
    2b8a:	7f 93       	push	r23
    2b8c:	8f 93       	push	r24
    2b8e:	9f 93       	push	r25
    2b90:	af 93       	push	r26
    2b92:	bf 93       	push	r27
    2b94:	cf 93       	push	r28
    2b96:	df 93       	push	r29
    2b98:	ef 93       	push	r30
    2b9a:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    2b9c:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    2ba0:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    2ba2:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    2ba6:	d8 2f       	mov	r29, r24
    2ba8:	d1 70       	andi	r29, 0x01	; 1
    2baa:	80 fd       	sbrc	r24, 0
    2bac:	d0 e8       	ldi	r29, 0x80	; 128
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2bae:	0f 2e       	mov	r0, r31
    2bb0:	f9 ee       	ldi	r31, 0xE9	; 233
    2bb2:	ef 2e       	mov	r14, r31
    2bb4:	f1 2c       	mov	r15, r1
    2bb6:	f0 2d       	mov	r31, r0
    2bb8:	f7 01       	movw	r30, r14
    2bba:	10 82       	st	Z, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    2bbc:	00 ef       	ldi	r16, 0xF0	; 240
    2bbe:	10 e0       	ldi	r17, 0x00	; 0
    2bc0:	f8 01       	movw	r30, r16
    2bc2:	80 81       	ld	r24, Z
    2bc4:	87 7f       	andi	r24, 0xF7	; 247
    2bc6:	80 83       	st	Z, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    2bc8:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    2bca:	23 d0       	rcall	.+70     	; 0x2c12 <USB_Device_ProcessControlRequest>
    2bcc:	f7 01       	movw	r30, r14
    2bce:	10 82       	st	Z, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    2bd0:	f8 01       	movw	r30, r16
    2bd2:	80 81       	ld	r24, Z
    2bd4:	88 60       	ori	r24, 0x08	; 8
    2bd6:	80 83       	st	Z, r24
    2bd8:	cd 2b       	or	r28, r29
    2bda:	cf 70       	andi	r28, 0x0F	; 15
    2bdc:	f7 01       	movw	r30, r14
    2bde:	c0 83       	st	Z, r28

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    2be0:	ff 91       	pop	r31
    2be2:	ef 91       	pop	r30
    2be4:	df 91       	pop	r29
    2be6:	cf 91       	pop	r28
    2be8:	bf 91       	pop	r27
    2bea:	af 91       	pop	r26
    2bec:	9f 91       	pop	r25
    2bee:	8f 91       	pop	r24
    2bf0:	7f 91       	pop	r23
    2bf2:	6f 91       	pop	r22
    2bf4:	5f 91       	pop	r21
    2bf6:	4f 91       	pop	r20
    2bf8:	3f 91       	pop	r19
    2bfa:	2f 91       	pop	r18
    2bfc:	1f 91       	pop	r17
    2bfe:	0f 91       	pop	r16
    2c00:	ff 90       	pop	r15
    2c02:	ef 90       	pop	r14
    2c04:	0f 90       	pop	r0
    2c06:	0b be       	out	0x3b, r0	; 59
    2c08:	0f 90       	pop	r0
    2c0a:	0f be       	out	0x3f, r0	; 63
    2c0c:	0f 90       	pop	r0
    2c0e:	1f 90       	pop	r1
    2c10:	18 95       	reti

00002c12 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    2c12:	0f 93       	push	r16
    2c14:	1f 93       	push	r17
    2c16:	cf 93       	push	r28
    2c18:	df 93       	push	r29
    2c1a:	cd b7       	in	r28, 0x3d	; 61
    2c1c:	de b7       	in	r29, 0x3e	; 62
    2c1e:	aa 97       	sbiw	r28, 0x2a	; 42
    2c20:	0f b6       	in	r0, 0x3f	; 63
    2c22:	f8 94       	cli
    2c24:	de bf       	out	0x3e, r29	; 62
    2c26:	0f be       	out	0x3f, r0	; 63
    2c28:	cd bf       	out	0x3d, r28	; 61
    2c2a:	e8 e7       	ldi	r30, 0x78	; 120
    2c2c:	f6 e0       	ldi	r31, 0x06	; 6
    2c2e:	20 e8       	ldi	r18, 0x80	; 128
    2c30:	36 e0       	ldi	r19, 0x06	; 6
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    2c32:	a1 ef       	ldi	r26, 0xF1	; 241
    2c34:	b0 e0       	ldi	r27, 0x00	; 0
    2c36:	8c 91       	ld	r24, X
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    2c38:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    2c3a:	2e 17       	cp	r18, r30
    2c3c:	3f 07       	cpc	r19, r31
    2c3e:	d9 f7       	brne	.-10     	; 0x2c36 <USB_Device_ProcessControlRequest+0x24>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    2c40:	0e 94 46 0c 	call	0x188c	; 0x188c <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2c44:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
    2c48:	83 ff       	sbrs	r24, 3
    2c4a:	39 c1       	rjmp	.+626    	; 0x2ebe <USB_Device_ProcessControlRequest+0x2ac>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    2c4c:	e8 e7       	ldi	r30, 0x78	; 120
    2c4e:	f6 e0       	ldi	r31, 0x06	; 6
    2c50:	90 81       	ld	r25, Z

		switch (USB_ControlRequest.bRequest)
    2c52:	81 81       	ldd	r24, Z+1	; 0x01
    2c54:	85 30       	cpi	r24, 0x05	; 5
    2c56:	09 f4       	brne	.+2      	; 0x2c5a <USB_Device_ProcessControlRequest+0x48>
    2c58:	7f c0       	rjmp	.+254    	; 0x2d58 <USB_Device_ProcessControlRequest+0x146>
    2c5a:	30 f4       	brcc	.+12     	; 0x2c68 <USB_Device_ProcessControlRequest+0x56>
    2c5c:	81 30       	cpi	r24, 0x01	; 1
    2c5e:	c9 f1       	breq	.+114    	; 0x2cd2 <USB_Device_ProcessControlRequest+0xc0>
    2c60:	68 f0       	brcs	.+26     	; 0x2c7c <USB_Device_ProcessControlRequest+0x6a>
    2c62:	83 30       	cpi	r24, 0x03	; 3
    2c64:	b1 f1       	breq	.+108    	; 0x2cd2 <USB_Device_ProcessControlRequest+0xc0>
    2c66:	2b c1       	rjmp	.+598    	; 0x2ebe <USB_Device_ProcessControlRequest+0x2ac>
    2c68:	88 30       	cpi	r24, 0x08	; 8
    2c6a:	09 f4       	brne	.+2      	; 0x2c6e <USB_Device_ProcessControlRequest+0x5c>
    2c6c:	f2 c0       	rjmp	.+484    	; 0x2e52 <USB_Device_ProcessControlRequest+0x240>
    2c6e:	89 30       	cpi	r24, 0x09	; 9
    2c70:	09 f4       	brne	.+2      	; 0x2c74 <USB_Device_ProcessControlRequest+0x62>
    2c72:	ff c0       	rjmp	.+510    	; 0x2e72 <USB_Device_ProcessControlRequest+0x260>
    2c74:	86 30       	cpi	r24, 0x06	; 6
    2c76:	09 f0       	breq	.+2      	; 0x2c7a <USB_Device_ProcessControlRequest+0x68>
    2c78:	22 c1       	rjmp	.+580    	; 0x2ebe <USB_Device_ProcessControlRequest+0x2ac>
    2c7a:	91 c0       	rjmp	.+290    	; 0x2d9e <USB_Device_ProcessControlRequest+0x18c>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    2c7c:	90 38       	cpi	r25, 0x80	; 128
    2c7e:	21 f0       	breq	.+8      	; 0x2c88 <USB_Device_ProcessControlRequest+0x76>
    2c80:	92 38       	cpi	r25, 0x82	; 130
    2c82:	09 f0       	breq	.+2      	; 0x2c86 <USB_Device_ProcessControlRequest+0x74>
    2c84:	1c c1       	rjmp	.+568    	; 0x2ebe <USB_Device_ProcessControlRequest+0x2ac>
    2c86:	08 c0       	rjmp	.+16     	; 0x2c98 <USB_Device_ProcessControlRequest+0x86>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    2c88:	80 91 74 06 	lds	r24, 0x0674	; 0x800674 <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    2c8c:	90 91 75 06 	lds	r25, 0x0675	; 0x800675 <USB_Device_RemoteWakeupEnabled>
    2c90:	99 23       	and	r25, r25
    2c92:	89 f0       	breq	.+34     	; 0x2cb6 <USB_Device_ProcessControlRequest+0xa4>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    2c94:	82 60       	ori	r24, 0x02	; 2
    2c96:	0f c0       	rjmp	.+30     	; 0x2cb6 <USB_Device_ProcessControlRequest+0xa4>
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    2c98:	80 91 7c 06 	lds	r24, 0x067C	; 0x80067c <USB_ControlRequest+0x4>
    2c9c:	8f 70       	andi	r24, 0x0F	; 15

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    2c9e:	87 30       	cpi	r24, 0x07	; 7
    2ca0:	08 f0       	brcs	.+2      	; 0x2ca4 <USB_Device_ProcessControlRequest+0x92>
    2ca2:	0d c1       	rjmp	.+538    	; 0x2ebe <USB_Device_ProcessControlRequest+0x2ac>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2ca4:	e9 ee       	ldi	r30, 0xE9	; 233
    2ca6:	f0 e0       	ldi	r31, 0x00	; 0
    2ca8:	80 83       	st	Z, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    2caa:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				return;

			Endpoint_SelectEndpoint(EndpointIndex);

			CurrentStatus = Endpoint_IsStalled();
    2cae:	85 fb       	bst	r24, 5
    2cb0:	88 27       	eor	r24, r24
    2cb2:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2cb4:	10 82       	st	Z, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2cb6:	e8 ee       	ldi	r30, 0xE8	; 232
    2cb8:	f0 e0       	ldi	r31, 0x00	; 0
    2cba:	90 81       	ld	r25, Z
    2cbc:	97 7f       	andi	r25, 0xF7	; 247
    2cbe:	90 83       	st	Z, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    2cc0:	a1 ef       	ldi	r26, 0xF1	; 241
    2cc2:	b0 e0       	ldi	r27, 0x00	; 0
    2cc4:	8c 93       	st	X, r24
				UEDATX = (Data >> 8);
    2cc6:	1c 92       	st	X, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2cc8:	80 81       	ld	r24, Z
    2cca:	8e 77       	andi	r24, 0x7E	; 126
    2ccc:	80 83       	st	Z, r24
	Endpoint_ClearSETUP();

	Endpoint_Write_16_LE(CurrentStatus);
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    2cce:	bb dd       	rcall	.-1162   	; 0x2846 <Endpoint_ClearStatusStage>
    2cd0:	f6 c0       	rjmp	.+492    	; 0x2ebe <USB_Device_ProcessControlRequest+0x2ac>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    2cd2:	99 23       	and	r25, r25
    2cd4:	09 f4       	brne	.+2      	; 0x2cd8 <USB_Device_ProcessControlRequest+0xc6>
    2cd6:	02 c1       	rjmp	.+516    	; 0x2edc <USB_Device_ProcessControlRequest+0x2ca>
    2cd8:	92 30       	cpi	r25, 0x02	; 2
    2cda:	09 f0       	breq	.+2      	; 0x2cde <USB_Device_ProcessControlRequest+0xcc>
    2cdc:	f0 c0       	rjmp	.+480    	; 0x2ebe <USB_Device_ProcessControlRequest+0x2ac>
    2cde:	03 c1       	rjmp	.+518    	; 0x2ee6 <USB_Device_ProcessControlRequest+0x2d4>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    2ce0:	91 e0       	ldi	r25, 0x01	; 1
    2ce2:	83 30       	cpi	r24, 0x03	; 3
    2ce4:	09 f0       	breq	.+2      	; 0x2ce8 <USB_Device_ProcessControlRequest+0xd6>
    2ce6:	90 e0       	ldi	r25, 0x00	; 0
    2ce8:	90 93 75 06 	sts	0x0675, r25	; 0x800675 <USB_Device_RemoteWakeupEnabled>
    2cec:	2c c0       	rjmp	.+88     	; 0x2d46 <USB_Device_ProcessControlRequest+0x134>
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    2cee:	80 91 7c 06 	lds	r24, 0x067C	; 0x80067c <USB_ControlRequest+0x4>
    2cf2:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    2cf4:	9f ef       	ldi	r25, 0xFF	; 255
    2cf6:	98 0f       	add	r25, r24
    2cf8:	96 30       	cpi	r25, 0x06	; 6
    2cfa:	08 f0       	brcs	.+2      	; 0x2cfe <USB_Device_ProcessControlRequest+0xec>
    2cfc:	e0 c0       	rjmp	.+448    	; 0x2ebe <USB_Device_ProcessControlRequest+0x2ac>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2cfe:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    2d02:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    2d06:	90 ff       	sbrs	r25, 0
    2d08:	1e c0       	rjmp	.+60     	; 0x2d46 <USB_Device_ProcessControlRequest+0x134>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    2d0a:	90 91 79 06 	lds	r25, 0x0679	; 0x800679 <USB_ControlRequest+0x1>
    2d0e:	93 30       	cpi	r25, 0x03	; 3
    2d10:	31 f4       	brne	.+12     	; 0x2d1e <USB_Device_ProcessControlRequest+0x10c>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    2d12:	eb ee       	ldi	r30, 0xEB	; 235
    2d14:	f0 e0       	ldi	r31, 0x00	; 0
    2d16:	80 81       	ld	r24, Z
    2d18:	80 62       	ori	r24, 0x20	; 32
    2d1a:	80 83       	st	Z, r24
    2d1c:	14 c0       	rjmp	.+40     	; 0x2d46 <USB_Device_ProcessControlRequest+0x134>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    2d1e:	eb ee       	ldi	r30, 0xEB	; 235
    2d20:	f0 e0       	ldi	r31, 0x00	; 0
    2d22:	90 81       	ld	r25, Z
    2d24:	90 61       	ori	r25, 0x10	; 16
    2d26:	90 83       	st	Z, r25
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    2d28:	21 e0       	ldi	r18, 0x01	; 1
    2d2a:	30 e0       	ldi	r19, 0x00	; 0
    2d2c:	a9 01       	movw	r20, r18
    2d2e:	02 c0       	rjmp	.+4      	; 0x2d34 <USB_Device_ProcessControlRequest+0x122>
    2d30:	44 0f       	add	r20, r20
    2d32:	55 1f       	adc	r21, r21
    2d34:	8a 95       	dec	r24
    2d36:	e2 f7       	brpl	.-8      	; 0x2d30 <USB_Device_ProcessControlRequest+0x11e>
    2d38:	aa ee       	ldi	r26, 0xEA	; 234
    2d3a:	b0 e0       	ldi	r27, 0x00	; 0
    2d3c:	4c 93       	st	X, r20
				UERST = 0;
    2d3e:	1c 92       	st	X, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    2d40:	80 81       	ld	r24, Z
    2d42:	88 60       	ori	r24, 0x08	; 8
    2d44:	80 83       	st	Z, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2d46:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2d4a:	e8 ee       	ldi	r30, 0xE8	; 232
    2d4c:	f0 e0       	ldi	r31, 0x00	; 0
    2d4e:	80 81       	ld	r24, Z
    2d50:	87 7f       	andi	r24, 0xF7	; 247

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    2d52:	80 83       	st	Z, r24
    2d54:	78 dd       	rcall	.-1296   	; 0x2846 <Endpoint_ClearStatusStage>
    2d56:	b3 c0       	rjmp	.+358    	; 0x2ebe <USB_Device_ProcessControlRequest+0x2ac>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    2d58:	91 11       	cpse	r25, r1
    2d5a:	b1 c0       	rjmp	.+354    	; 0x2ebe <USB_Device_ProcessControlRequest+0x2ac>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    2d5c:	10 91 7a 06 	lds	r17, 0x067A	; 0x80067a <USB_ControlRequest+0x2>
    2d60:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    2d62:	e3 ee       	ldi	r30, 0xE3	; 227
    2d64:	f0 e0       	ldi	r31, 0x00	; 0
    2d66:	80 81       	ld	r24, Z
    2d68:	80 78       	andi	r24, 0x80	; 128
    2d6a:	81 2b       	or	r24, r17
    2d6c:	80 83       	st	Z, r24
    2d6e:	e8 ee       	ldi	r30, 0xE8	; 232
    2d70:	f0 e0       	ldi	r31, 0x00	; 0
    2d72:	80 81       	ld	r24, Z
    2d74:	87 7f       	andi	r24, 0xF7	; 247

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    2d76:	80 83       	st	Z, r24
    2d78:	66 dd       	rcall	.-1332   	; 0x2846 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2d7a:	e8 ee       	ldi	r30, 0xE8	; 232
    2d7c:	f0 e0       	ldi	r31, 0x00	; 0
    2d7e:	80 81       	ld	r24, Z

	while (!(Endpoint_IsINReady()));
    2d80:	80 ff       	sbrs	r24, 0
    2d82:	fd cf       	rjmp	.-6      	; 0x2d7e <USB_Device_ProcessControlRequest+0x16c>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    2d84:	e3 ee       	ldi	r30, 0xE3	; 227
    2d86:	f0 e0       	ldi	r31, 0x00	; 0
    2d88:	80 81       	ld	r24, Z
    2d8a:	80 68       	ori	r24, 0x80	; 128
    2d8c:	80 83       	st	Z, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    2d8e:	11 11       	cpse	r17, r1
    2d90:	02 c0       	rjmp	.+4      	; 0x2d96 <USB_Device_ProcessControlRequest+0x184>
    2d92:	82 e0       	ldi	r24, 0x02	; 2
    2d94:	01 c0       	rjmp	.+2      	; 0x2d98 <USB_Device_ProcessControlRequest+0x186>
    2d96:	83 e0       	ldi	r24, 0x03	; 3
    2d98:	80 93 77 06 	sts	0x0677, r24	; 0x800677 <USB_DeviceState>
    2d9c:	90 c0       	rjmp	.+288    	; 0x2ebe <USB_Device_ProcessControlRequest+0x2ac>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    2d9e:	90 58       	subi	r25, 0x80	; 128
    2da0:	92 30       	cpi	r25, 0x02	; 2
    2da2:	08 f0       	brcs	.+2      	; 0x2da6 <USB_Device_ProcessControlRequest+0x194>
    2da4:	8c c0       	rjmp	.+280    	; 0x2ebe <USB_Device_ProcessControlRequest+0x2ac>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    2da6:	80 91 7a 06 	lds	r24, 0x067A	; 0x80067a <USB_ControlRequest+0x2>
    2daa:	90 91 7b 06 	lds	r25, 0x067B	; 0x80067b <USB_ControlRequest+0x3>
    2dae:	8c 3d       	cpi	r24, 0xDC	; 220
    2db0:	53 e0       	ldi	r21, 0x03	; 3
    2db2:	95 07       	cpc	r25, r21
    2db4:	99 f5       	brne	.+102    	; 0x2e1c <USB_Device_ProcessControlRequest+0x20a>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    2db6:	83 e0       	ldi	r24, 0x03	; 3
    2db8:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    2dba:	8a e2       	ldi	r24, 0x2A	; 42
    2dbc:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    2dbe:	5f b7       	in	r21, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    2dc0:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    2dc2:	de 01       	movw	r26, r28
    2dc4:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    2dc6:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    2dc8:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    2dca:	41 e2       	ldi	r20, 0x21	; 33
    2dcc:	e3 2f       	mov	r30, r19
    2dce:	f0 e0       	ldi	r31, 0x00	; 0
    2dd0:	40 93 57 00 	sts	0x0057, r20	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    2dd4:	84 91       	lpm	r24, Z

					if (SerialCharNum & 0x01)
    2dd6:	20 ff       	sbrs	r18, 0
    2dd8:	03 c0       	rjmp	.+6      	; 0x2de0 <USB_Device_ProcessControlRequest+0x1ce>
					{
						SerialByte >>= 4;
    2dda:	82 95       	swap	r24
    2ddc:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
    2dde:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    2de0:	8f 70       	andi	r24, 0x0F	; 15

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    2de2:	8a 30       	cpi	r24, 0x0A	; 10
    2de4:	18 f0       	brcs	.+6      	; 0x2dec <USB_Device_ProcessControlRequest+0x1da>
    2de6:	90 e0       	ldi	r25, 0x00	; 0
    2de8:	c7 96       	adiw	r24, 0x37	; 55
    2dea:	02 c0       	rjmp	.+4      	; 0x2df0 <USB_Device_ProcessControlRequest+0x1de>
    2dec:	90 e0       	ldi	r25, 0x00	; 0
    2dee:	c0 96       	adiw	r24, 0x30	; 48
    2df0:	8d 93       	st	X+, r24
    2df2:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    2df4:	2f 5f       	subi	r18, 0xFF	; 255
    2df6:	24 31       	cpi	r18, 0x14	; 20
    2df8:	49 f7       	brne	.-46     	; 0x2dcc <USB_Device_ProcessControlRequest+0x1ba>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    2dfa:	5f bf       	out	0x3f, r21	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2dfc:	08 ee       	ldi	r16, 0xE8	; 232
    2dfe:	10 e0       	ldi	r17, 0x00	; 0
    2e00:	f8 01       	movw	r30, r16
    2e02:	80 81       	ld	r24, Z
    2e04:	87 7f       	andi	r24, 0xF7	; 247
    2e06:	80 83       	st	Z, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    2e08:	6a e2       	ldi	r22, 0x2A	; 42
    2e0a:	70 e0       	ldi	r23, 0x00	; 0
    2e0c:	ce 01       	movw	r24, r28
    2e0e:	01 96       	adiw	r24, 0x01	; 1
    2e10:	fd da       	rcall	.-2566   	; 0x240c <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2e12:	f8 01       	movw	r30, r16
    2e14:	80 81       	ld	r24, Z
    2e16:	8b 77       	andi	r24, 0x7B	; 123
    2e18:	80 83       	st	Z, r24
    2e1a:	51 c0       	rjmp	.+162    	; 0x2ebe <USB_Device_ProcessControlRequest+0x2ac>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    2e1c:	60 91 7c 06 	lds	r22, 0x067C	; 0x80067c <USB_ControlRequest+0x4>
    2e20:	70 91 7d 06 	lds	r23, 0x067D	; 0x80067d <USB_ControlRequest+0x5>
    2e24:	ae 01       	movw	r20, r28
    2e26:	4f 5f       	subi	r20, 0xFF	; 255
    2e28:	5f 4f       	sbci	r21, 0xFF	; 255
    2e2a:	0e 94 c3 01 	call	0x386	; 0x386 <CALLBACK_USB_GetDescriptor>
    2e2e:	bc 01       	movw	r22, r24
    2e30:	89 2b       	or	r24, r25
    2e32:	09 f4       	brne	.+2      	; 0x2e36 <USB_Device_ProcessControlRequest+0x224>
    2e34:	44 c0       	rjmp	.+136    	; 0x2ebe <USB_Device_ProcessControlRequest+0x2ac>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2e36:	08 ee       	ldi	r16, 0xE8	; 232
    2e38:	10 e0       	ldi	r17, 0x00	; 0
    2e3a:	f8 01       	movw	r30, r16
    2e3c:	90 81       	ld	r25, Z
    2e3e:	97 7f       	andi	r25, 0xF7	; 247
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    2e40:	90 83       	st	Z, r25
    2e42:	89 81       	ldd	r24, Y+1	; 0x01
    2e44:	9a 81       	ldd	r25, Y+2	; 0x02
    2e46:	ca db       	rcall	.-2156   	; 0x25dc <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2e48:	f8 01       	movw	r30, r16
    2e4a:	80 81       	ld	r24, Z
    2e4c:	8b 77       	andi	r24, 0x7B	; 123
    2e4e:	80 83       	st	Z, r24
    2e50:	36 c0       	rjmp	.+108    	; 0x2ebe <USB_Device_ProcessControlRequest+0x2ac>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    2e52:	90 38       	cpi	r25, 0x80	; 128
    2e54:	a1 f5       	brne	.+104    	; 0x2ebe <USB_Device_ProcessControlRequest+0x2ac>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2e56:	e8 ee       	ldi	r30, 0xE8	; 232
    2e58:	f0 e0       	ldi	r31, 0x00	; 0
    2e5a:	80 81       	ld	r24, Z
    2e5c:	87 7f       	andi	r24, 0xF7	; 247
    2e5e:	80 83       	st	Z, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    2e60:	80 91 73 06 	lds	r24, 0x0673	; 0x800673 <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2e64:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2e68:	80 81       	ld	r24, Z
    2e6a:	8e 77       	andi	r24, 0x7E	; 126
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    2e6c:	80 83       	st	Z, r24
    2e6e:	eb dc       	rcall	.-1578   	; 0x2846 <Endpoint_ClearStatusStage>
    2e70:	26 c0       	rjmp	.+76     	; 0x2ebe <USB_Device_ProcessControlRequest+0x2ac>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    2e72:	91 11       	cpse	r25, r1
    2e74:	24 c0       	rjmp	.+72     	; 0x2ebe <USB_Device_ProcessControlRequest+0x2ac>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    2e76:	80 91 7a 06 	lds	r24, 0x067A	; 0x80067a <USB_ControlRequest+0x2>
    2e7a:	90 91 7b 06 	lds	r25, 0x067B	; 0x80067b <USB_ControlRequest+0x3>
    2e7e:	99 27       	eor	r25, r25
    2e80:	02 97       	sbiw	r24, 0x02	; 2
    2e82:	ec f4       	brge	.+58     	; 0x2ebe <USB_Device_ProcessControlRequest+0x2ac>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2e84:	e8 ee       	ldi	r30, 0xE8	; 232
    2e86:	f0 e0       	ldi	r31, 0x00	; 0
    2e88:	80 81       	ld	r24, Z
    2e8a:	87 7f       	andi	r24, 0xF7	; 247
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    2e8c:	80 83       	st	Z, r24
    2e8e:	80 91 7a 06 	lds	r24, 0x067A	; 0x80067a <USB_ControlRequest+0x2>
    2e92:	80 93 73 06 	sts	0x0673, r24	; 0x800673 <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
    2e96:	d7 dc       	rcall	.-1618   	; 0x2846 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    2e98:	80 91 73 06 	lds	r24, 0x0673	; 0x800673 <USB_Device_ConfigurationNumber>
    2e9c:	88 23       	and	r24, r24
    2e9e:	21 f0       	breq	.+8      	; 0x2ea8 <USB_Device_ProcessControlRequest+0x296>
	  USB_DeviceState = DEVICE_STATE_Configured;
    2ea0:	84 e0       	ldi	r24, 0x04	; 4
    2ea2:	80 93 77 06 	sts	0x0677, r24	; 0x800677 <USB_DeviceState>
    2ea6:	09 c0       	rjmp	.+18     	; 0x2eba <USB_Device_ProcessControlRequest+0x2a8>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    2ea8:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    2eac:	88 23       	and	r24, r24
    2eae:	14 f0       	brlt	.+4      	; 0x2eb4 <USB_Device_ProcessControlRequest+0x2a2>
    2eb0:	81 e0       	ldi	r24, 0x01	; 1
    2eb2:	01 c0       	rjmp	.+2      	; 0x2eb6 <USB_Device_ProcessControlRequest+0x2a4>
    2eb4:	84 e0       	ldi	r24, 0x04	; 4
    2eb6:	80 93 77 06 	sts	0x0677, r24	; 0x800677 <USB_DeviceState>

	EVENT_USB_Device_ConfigurationChanged();
    2eba:	0e 94 24 0c 	call	0x1848	; 0x1848 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2ebe:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    2ec2:	83 ff       	sbrs	r24, 3
    2ec4:	16 c0       	rjmp	.+44     	; 0x2ef2 <USB_Device_ProcessControlRequest+0x2e0>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2ec6:	e8 ee       	ldi	r30, 0xE8	; 232
    2ec8:	f0 e0       	ldi	r31, 0x00	; 0
    2eca:	80 81       	ld	r24, Z
    2ecc:	87 7f       	andi	r24, 0xF7	; 247
    2ece:	80 83       	st	Z, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    2ed0:	eb ee       	ldi	r30, 0xEB	; 235
    2ed2:	f0 e0       	ldi	r31, 0x00	; 0
    2ed4:	80 81       	ld	r24, Z
    2ed6:	80 62       	ori	r24, 0x20	; 32
    2ed8:	80 83       	st	Z, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    2eda:	0b c0       	rjmp	.+22     	; 0x2ef2 <USB_Device_ProcessControlRequest+0x2e0>
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    2edc:	90 91 7a 06 	lds	r25, 0x067A	; 0x80067a <USB_ControlRequest+0x2>
    2ee0:	91 30       	cpi	r25, 0x01	; 1
    2ee2:	69 f7       	brne	.-38     	; 0x2ebe <USB_Device_ProcessControlRequest+0x2ac>
    2ee4:	fd ce       	rjmp	.-518    	; 0x2ce0 <USB_Device_ProcessControlRequest+0xce>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    2ee6:	80 91 7a 06 	lds	r24, 0x067A	; 0x80067a <USB_ControlRequest+0x2>
    2eea:	88 23       	and	r24, r24
    2eec:	09 f4       	brne	.+2      	; 0x2ef0 <USB_Device_ProcessControlRequest+0x2de>
    2eee:	ff ce       	rjmp	.-514    	; 0x2cee <USB_Device_ProcessControlRequest+0xdc>
    2ef0:	2a cf       	rjmp	.-428    	; 0x2d46 <USB_Device_ProcessControlRequest+0x134>
	if (Endpoint_IsSETUPReceived())
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    2ef2:	aa 96       	adiw	r28, 0x2a	; 42
    2ef4:	0f b6       	in	r0, 0x3f	; 63
    2ef6:	f8 94       	cli
    2ef8:	de bf       	out	0x3e, r29	; 62
    2efa:	0f be       	out	0x3f, r0	; 63
    2efc:	cd bf       	out	0x3d, r28	; 61
    2efe:	df 91       	pop	r29
    2f00:	cf 91       	pop	r28
    2f02:	1f 91       	pop	r17
    2f04:	0f 91       	pop	r16
    2f06:	08 95       	ret

00002f08 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    2f08:	08 95       	ret

00002f0a <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    2f0a:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    2f0c:	80 91 77 06 	lds	r24, 0x0677	; 0x800677 <USB_DeviceState>
    2f10:	88 23       	and	r24, r24
    2f12:	99 f0       	breq	.+38     	; 0x2f3a <USB_USBTask+0x30>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    2f14:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    2f18:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    2f1a:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    2f1e:	98 2f       	mov	r25, r24
    2f20:	91 70       	andi	r25, 0x01	; 1
    2f22:	80 fd       	sbrc	r24, 0
    2f24:	90 e8       	ldi	r25, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    2f26:	c9 2b       	or	r28, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2f28:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2f2c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    2f30:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    2f32:	6f de       	rcall	.-802    	; 0x2c12 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2f34:	cf 70       	andi	r28, 0x0F	; 15
    2f36:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    2f3a:	cf 91       	pop	r28
    2f3c:	08 95       	ret

00002f3e <__umulhisi3>:
    2f3e:	a2 9f       	mul	r26, r18
    2f40:	b0 01       	movw	r22, r0
    2f42:	b3 9f       	mul	r27, r19
    2f44:	c0 01       	movw	r24, r0
    2f46:	a3 9f       	mul	r26, r19
    2f48:	70 0d       	add	r23, r0
    2f4a:	81 1d       	adc	r24, r1
    2f4c:	11 24       	eor	r1, r1
    2f4e:	91 1d       	adc	r25, r1
    2f50:	b2 9f       	mul	r27, r18
    2f52:	70 0d       	add	r23, r0
    2f54:	81 1d       	adc	r24, r1
    2f56:	11 24       	eor	r1, r1
    2f58:	91 1d       	adc	r25, r1
    2f5a:	08 95       	ret

00002f5c <memcmp>:
    2f5c:	fb 01       	movw	r30, r22
    2f5e:	dc 01       	movw	r26, r24
    2f60:	04 c0       	rjmp	.+8      	; 0x2f6a <memcmp+0xe>
    2f62:	8d 91       	ld	r24, X+
    2f64:	01 90       	ld	r0, Z+
    2f66:	80 19       	sub	r24, r0
    2f68:	21 f4       	brne	.+8      	; 0x2f72 <memcmp+0x16>
    2f6a:	41 50       	subi	r20, 0x01	; 1
    2f6c:	50 40       	sbci	r21, 0x00	; 0
    2f6e:	c8 f7       	brcc	.-14     	; 0x2f62 <memcmp+0x6>
    2f70:	88 1b       	sub	r24, r24
    2f72:	99 0b       	sbc	r25, r25
    2f74:	08 95       	ret

00002f76 <memcpy>:
    2f76:	fb 01       	movw	r30, r22
    2f78:	dc 01       	movw	r26, r24
    2f7a:	02 c0       	rjmp	.+4      	; 0x2f80 <memcpy+0xa>
    2f7c:	01 90       	ld	r0, Z+
    2f7e:	0d 92       	st	X+, r0
    2f80:	41 50       	subi	r20, 0x01	; 1
    2f82:	50 40       	sbci	r21, 0x00	; 0
    2f84:	d8 f7       	brcc	.-10     	; 0x2f7c <memcpy+0x6>
    2f86:	08 95       	ret

00002f88 <memset>:
    2f88:	dc 01       	movw	r26, r24
    2f8a:	01 c0       	rjmp	.+2      	; 0x2f8e <memset+0x6>
    2f8c:	6d 93       	st	X+, r22
    2f8e:	41 50       	subi	r20, 0x01	; 1
    2f90:	50 40       	sbci	r21, 0x00	; 0
    2f92:	e0 f7       	brcc	.-8      	; 0x2f8c <memset+0x4>
    2f94:	08 95       	ret

00002f96 <printf_P>:
    2f96:	0f 93       	push	r16
    2f98:	1f 93       	push	r17
    2f9a:	cf 93       	push	r28
    2f9c:	df 93       	push	r29
    2f9e:	cd b7       	in	r28, 0x3d	; 61
    2fa0:	de b7       	in	r29, 0x3e	; 62
    2fa2:	ae 01       	movw	r20, r28
    2fa4:	49 5f       	subi	r20, 0xF9	; 249
    2fa6:	5f 4f       	sbci	r21, 0xFF	; 255
    2fa8:	da 01       	movw	r26, r20
    2faa:	6d 91       	ld	r22, X+
    2fac:	7d 91       	ld	r23, X+
    2fae:	ad 01       	movw	r20, r26
    2fb0:	00 e8       	ldi	r16, 0x80	; 128
    2fb2:	16 e0       	ldi	r17, 0x06	; 6
    2fb4:	f8 01       	movw	r30, r16
    2fb6:	82 81       	ldd	r24, Z+2	; 0x02
    2fb8:	93 81       	ldd	r25, Z+3	; 0x03
    2fba:	dc 01       	movw	r26, r24
    2fbc:	13 96       	adiw	r26, 0x03	; 3
    2fbe:	2c 91       	ld	r18, X
    2fc0:	13 97       	sbiw	r26, 0x03	; 3
    2fc2:	28 60       	ori	r18, 0x08	; 8
    2fc4:	13 96       	adiw	r26, 0x03	; 3
    2fc6:	2c 93       	st	X, r18
    2fc8:	3d d0       	rcall	.+122    	; 0x3044 <vfprintf>
    2fca:	d8 01       	movw	r26, r16
    2fcc:	12 96       	adiw	r26, 0x02	; 2
    2fce:	ed 91       	ld	r30, X+
    2fd0:	fc 91       	ld	r31, X
    2fd2:	13 97       	sbiw	r26, 0x03	; 3
    2fd4:	23 81       	ldd	r18, Z+3	; 0x03
    2fd6:	27 7f       	andi	r18, 0xF7	; 247
    2fd8:	23 83       	std	Z+3, r18	; 0x03
    2fda:	df 91       	pop	r29
    2fdc:	cf 91       	pop	r28
    2fde:	1f 91       	pop	r17
    2fe0:	0f 91       	pop	r16
    2fe2:	08 95       	ret

00002fe4 <puts>:
    2fe4:	0f 93       	push	r16
    2fe6:	1f 93       	push	r17
    2fe8:	cf 93       	push	r28
    2fea:	df 93       	push	r29
    2fec:	e0 91 82 06 	lds	r30, 0x0682	; 0x800682 <__iob+0x2>
    2ff0:	f0 91 83 06 	lds	r31, 0x0683	; 0x800683 <__iob+0x3>
    2ff4:	23 81       	ldd	r18, Z+3	; 0x03
    2ff6:	21 ff       	sbrs	r18, 1
    2ff8:	1b c0       	rjmp	.+54     	; 0x3030 <puts+0x4c>
    2ffa:	8c 01       	movw	r16, r24
    2ffc:	d0 e0       	ldi	r29, 0x00	; 0
    2ffe:	c0 e0       	ldi	r28, 0x00	; 0
    3000:	f8 01       	movw	r30, r16
    3002:	81 91       	ld	r24, Z+
    3004:	8f 01       	movw	r16, r30
    3006:	60 91 82 06 	lds	r22, 0x0682	; 0x800682 <__iob+0x2>
    300a:	70 91 83 06 	lds	r23, 0x0683	; 0x800683 <__iob+0x3>
    300e:	db 01       	movw	r26, r22
    3010:	18 96       	adiw	r26, 0x08	; 8
    3012:	ed 91       	ld	r30, X+
    3014:	fc 91       	ld	r31, X
    3016:	19 97       	sbiw	r26, 0x09	; 9
    3018:	88 23       	and	r24, r24
    301a:	31 f0       	breq	.+12     	; 0x3028 <puts+0x44>
    301c:	09 95       	icall
    301e:	89 2b       	or	r24, r25
    3020:	79 f3       	breq	.-34     	; 0x3000 <puts+0x1c>
    3022:	df ef       	ldi	r29, 0xFF	; 255
    3024:	cf ef       	ldi	r28, 0xFF	; 255
    3026:	ec cf       	rjmp	.-40     	; 0x3000 <puts+0x1c>
    3028:	8a e0       	ldi	r24, 0x0A	; 10
    302a:	09 95       	icall
    302c:	89 2b       	or	r24, r25
    302e:	19 f0       	breq	.+6      	; 0x3036 <puts+0x52>
    3030:	8f ef       	ldi	r24, 0xFF	; 255
    3032:	9f ef       	ldi	r25, 0xFF	; 255
    3034:	02 c0       	rjmp	.+4      	; 0x303a <puts+0x56>
    3036:	8d 2f       	mov	r24, r29
    3038:	9c 2f       	mov	r25, r28
    303a:	df 91       	pop	r29
    303c:	cf 91       	pop	r28
    303e:	1f 91       	pop	r17
    3040:	0f 91       	pop	r16
    3042:	08 95       	ret

00003044 <vfprintf>:
    3044:	2f 92       	push	r2
    3046:	3f 92       	push	r3
    3048:	4f 92       	push	r4
    304a:	5f 92       	push	r5
    304c:	6f 92       	push	r6
    304e:	7f 92       	push	r7
    3050:	8f 92       	push	r8
    3052:	9f 92       	push	r9
    3054:	af 92       	push	r10
    3056:	bf 92       	push	r11
    3058:	cf 92       	push	r12
    305a:	df 92       	push	r13
    305c:	ef 92       	push	r14
    305e:	ff 92       	push	r15
    3060:	0f 93       	push	r16
    3062:	1f 93       	push	r17
    3064:	cf 93       	push	r28
    3066:	df 93       	push	r29
    3068:	cd b7       	in	r28, 0x3d	; 61
    306a:	de b7       	in	r29, 0x3e	; 62
    306c:	2b 97       	sbiw	r28, 0x0b	; 11
    306e:	0f b6       	in	r0, 0x3f	; 63
    3070:	f8 94       	cli
    3072:	de bf       	out	0x3e, r29	; 62
    3074:	0f be       	out	0x3f, r0	; 63
    3076:	cd bf       	out	0x3d, r28	; 61
    3078:	6c 01       	movw	r12, r24
    307a:	7b 01       	movw	r14, r22
    307c:	8a 01       	movw	r16, r20
    307e:	fc 01       	movw	r30, r24
    3080:	17 82       	std	Z+7, r1	; 0x07
    3082:	16 82       	std	Z+6, r1	; 0x06
    3084:	83 81       	ldd	r24, Z+3	; 0x03
    3086:	81 ff       	sbrs	r24, 1
    3088:	bf c1       	rjmp	.+894    	; 0x3408 <vfprintf+0x3c4>
    308a:	ce 01       	movw	r24, r28
    308c:	01 96       	adiw	r24, 0x01	; 1
    308e:	3c 01       	movw	r6, r24
    3090:	f6 01       	movw	r30, r12
    3092:	93 81       	ldd	r25, Z+3	; 0x03
    3094:	f7 01       	movw	r30, r14
    3096:	93 fd       	sbrc	r25, 3
    3098:	85 91       	lpm	r24, Z+
    309a:	93 ff       	sbrs	r25, 3
    309c:	81 91       	ld	r24, Z+
    309e:	7f 01       	movw	r14, r30
    30a0:	88 23       	and	r24, r24
    30a2:	09 f4       	brne	.+2      	; 0x30a6 <vfprintf+0x62>
    30a4:	ad c1       	rjmp	.+858    	; 0x3400 <vfprintf+0x3bc>
    30a6:	85 32       	cpi	r24, 0x25	; 37
    30a8:	39 f4       	brne	.+14     	; 0x30b8 <vfprintf+0x74>
    30aa:	93 fd       	sbrc	r25, 3
    30ac:	85 91       	lpm	r24, Z+
    30ae:	93 ff       	sbrs	r25, 3
    30b0:	81 91       	ld	r24, Z+
    30b2:	7f 01       	movw	r14, r30
    30b4:	85 32       	cpi	r24, 0x25	; 37
    30b6:	21 f4       	brne	.+8      	; 0x30c0 <vfprintf+0x7c>
    30b8:	b6 01       	movw	r22, r12
    30ba:	90 e0       	ldi	r25, 0x00	; 0
    30bc:	d6 d1       	rcall	.+940    	; 0x346a <fputc>
    30be:	e8 cf       	rjmp	.-48     	; 0x3090 <vfprintf+0x4c>
    30c0:	91 2c       	mov	r9, r1
    30c2:	21 2c       	mov	r2, r1
    30c4:	31 2c       	mov	r3, r1
    30c6:	ff e1       	ldi	r31, 0x1F	; 31
    30c8:	f3 15       	cp	r31, r3
    30ca:	d8 f0       	brcs	.+54     	; 0x3102 <vfprintf+0xbe>
    30cc:	8b 32       	cpi	r24, 0x2B	; 43
    30ce:	79 f0       	breq	.+30     	; 0x30ee <vfprintf+0xaa>
    30d0:	38 f4       	brcc	.+14     	; 0x30e0 <vfprintf+0x9c>
    30d2:	80 32       	cpi	r24, 0x20	; 32
    30d4:	79 f0       	breq	.+30     	; 0x30f4 <vfprintf+0xb0>
    30d6:	83 32       	cpi	r24, 0x23	; 35
    30d8:	a1 f4       	brne	.+40     	; 0x3102 <vfprintf+0xbe>
    30da:	23 2d       	mov	r18, r3
    30dc:	20 61       	ori	r18, 0x10	; 16
    30de:	1d c0       	rjmp	.+58     	; 0x311a <vfprintf+0xd6>
    30e0:	8d 32       	cpi	r24, 0x2D	; 45
    30e2:	61 f0       	breq	.+24     	; 0x30fc <vfprintf+0xb8>
    30e4:	80 33       	cpi	r24, 0x30	; 48
    30e6:	69 f4       	brne	.+26     	; 0x3102 <vfprintf+0xbe>
    30e8:	23 2d       	mov	r18, r3
    30ea:	21 60       	ori	r18, 0x01	; 1
    30ec:	16 c0       	rjmp	.+44     	; 0x311a <vfprintf+0xd6>
    30ee:	83 2d       	mov	r24, r3
    30f0:	82 60       	ori	r24, 0x02	; 2
    30f2:	38 2e       	mov	r3, r24
    30f4:	e3 2d       	mov	r30, r3
    30f6:	e4 60       	ori	r30, 0x04	; 4
    30f8:	3e 2e       	mov	r3, r30
    30fa:	2a c0       	rjmp	.+84     	; 0x3150 <vfprintf+0x10c>
    30fc:	f3 2d       	mov	r31, r3
    30fe:	f8 60       	ori	r31, 0x08	; 8
    3100:	1d c0       	rjmp	.+58     	; 0x313c <vfprintf+0xf8>
    3102:	37 fc       	sbrc	r3, 7
    3104:	2d c0       	rjmp	.+90     	; 0x3160 <vfprintf+0x11c>
    3106:	20 ed       	ldi	r18, 0xD0	; 208
    3108:	28 0f       	add	r18, r24
    310a:	2a 30       	cpi	r18, 0x0A	; 10
    310c:	40 f0       	brcs	.+16     	; 0x311e <vfprintf+0xda>
    310e:	8e 32       	cpi	r24, 0x2E	; 46
    3110:	b9 f4       	brne	.+46     	; 0x3140 <vfprintf+0xfc>
    3112:	36 fc       	sbrc	r3, 6
    3114:	75 c1       	rjmp	.+746    	; 0x3400 <vfprintf+0x3bc>
    3116:	23 2d       	mov	r18, r3
    3118:	20 64       	ori	r18, 0x40	; 64
    311a:	32 2e       	mov	r3, r18
    311c:	19 c0       	rjmp	.+50     	; 0x3150 <vfprintf+0x10c>
    311e:	36 fe       	sbrs	r3, 6
    3120:	06 c0       	rjmp	.+12     	; 0x312e <vfprintf+0xea>
    3122:	8a e0       	ldi	r24, 0x0A	; 10
    3124:	98 9e       	mul	r9, r24
    3126:	20 0d       	add	r18, r0
    3128:	11 24       	eor	r1, r1
    312a:	92 2e       	mov	r9, r18
    312c:	11 c0       	rjmp	.+34     	; 0x3150 <vfprintf+0x10c>
    312e:	ea e0       	ldi	r30, 0x0A	; 10
    3130:	2e 9e       	mul	r2, r30
    3132:	20 0d       	add	r18, r0
    3134:	11 24       	eor	r1, r1
    3136:	22 2e       	mov	r2, r18
    3138:	f3 2d       	mov	r31, r3
    313a:	f0 62       	ori	r31, 0x20	; 32
    313c:	3f 2e       	mov	r3, r31
    313e:	08 c0       	rjmp	.+16     	; 0x3150 <vfprintf+0x10c>
    3140:	8c 36       	cpi	r24, 0x6C	; 108
    3142:	21 f4       	brne	.+8      	; 0x314c <vfprintf+0x108>
    3144:	83 2d       	mov	r24, r3
    3146:	80 68       	ori	r24, 0x80	; 128
    3148:	38 2e       	mov	r3, r24
    314a:	02 c0       	rjmp	.+4      	; 0x3150 <vfprintf+0x10c>
    314c:	88 36       	cpi	r24, 0x68	; 104
    314e:	41 f4       	brne	.+16     	; 0x3160 <vfprintf+0x11c>
    3150:	f7 01       	movw	r30, r14
    3152:	93 fd       	sbrc	r25, 3
    3154:	85 91       	lpm	r24, Z+
    3156:	93 ff       	sbrs	r25, 3
    3158:	81 91       	ld	r24, Z+
    315a:	7f 01       	movw	r14, r30
    315c:	81 11       	cpse	r24, r1
    315e:	b3 cf       	rjmp	.-154    	; 0x30c6 <vfprintf+0x82>
    3160:	98 2f       	mov	r25, r24
    3162:	9f 7d       	andi	r25, 0xDF	; 223
    3164:	95 54       	subi	r25, 0x45	; 69
    3166:	93 30       	cpi	r25, 0x03	; 3
    3168:	28 f4       	brcc	.+10     	; 0x3174 <vfprintf+0x130>
    316a:	0c 5f       	subi	r16, 0xFC	; 252
    316c:	1f 4f       	sbci	r17, 0xFF	; 255
    316e:	9f e3       	ldi	r25, 0x3F	; 63
    3170:	99 83       	std	Y+1, r25	; 0x01
    3172:	0d c0       	rjmp	.+26     	; 0x318e <vfprintf+0x14a>
    3174:	83 36       	cpi	r24, 0x63	; 99
    3176:	31 f0       	breq	.+12     	; 0x3184 <vfprintf+0x140>
    3178:	83 37       	cpi	r24, 0x73	; 115
    317a:	71 f0       	breq	.+28     	; 0x3198 <vfprintf+0x154>
    317c:	83 35       	cpi	r24, 0x53	; 83
    317e:	09 f0       	breq	.+2      	; 0x3182 <vfprintf+0x13e>
    3180:	55 c0       	rjmp	.+170    	; 0x322c <vfprintf+0x1e8>
    3182:	20 c0       	rjmp	.+64     	; 0x31c4 <vfprintf+0x180>
    3184:	f8 01       	movw	r30, r16
    3186:	80 81       	ld	r24, Z
    3188:	89 83       	std	Y+1, r24	; 0x01
    318a:	0e 5f       	subi	r16, 0xFE	; 254
    318c:	1f 4f       	sbci	r17, 0xFF	; 255
    318e:	88 24       	eor	r8, r8
    3190:	83 94       	inc	r8
    3192:	91 2c       	mov	r9, r1
    3194:	53 01       	movw	r10, r6
    3196:	12 c0       	rjmp	.+36     	; 0x31bc <vfprintf+0x178>
    3198:	28 01       	movw	r4, r16
    319a:	f2 e0       	ldi	r31, 0x02	; 2
    319c:	4f 0e       	add	r4, r31
    319e:	51 1c       	adc	r5, r1
    31a0:	f8 01       	movw	r30, r16
    31a2:	a0 80       	ld	r10, Z
    31a4:	b1 80       	ldd	r11, Z+1	; 0x01
    31a6:	36 fe       	sbrs	r3, 6
    31a8:	03 c0       	rjmp	.+6      	; 0x31b0 <vfprintf+0x16c>
    31aa:	69 2d       	mov	r22, r9
    31ac:	70 e0       	ldi	r23, 0x00	; 0
    31ae:	02 c0       	rjmp	.+4      	; 0x31b4 <vfprintf+0x170>
    31b0:	6f ef       	ldi	r22, 0xFF	; 255
    31b2:	7f ef       	ldi	r23, 0xFF	; 255
    31b4:	c5 01       	movw	r24, r10
    31b6:	4e d1       	rcall	.+668    	; 0x3454 <strnlen>
    31b8:	4c 01       	movw	r8, r24
    31ba:	82 01       	movw	r16, r4
    31bc:	f3 2d       	mov	r31, r3
    31be:	ff 77       	andi	r31, 0x7F	; 127
    31c0:	3f 2e       	mov	r3, r31
    31c2:	15 c0       	rjmp	.+42     	; 0x31ee <vfprintf+0x1aa>
    31c4:	28 01       	movw	r4, r16
    31c6:	22 e0       	ldi	r18, 0x02	; 2
    31c8:	42 0e       	add	r4, r18
    31ca:	51 1c       	adc	r5, r1
    31cc:	f8 01       	movw	r30, r16
    31ce:	a0 80       	ld	r10, Z
    31d0:	b1 80       	ldd	r11, Z+1	; 0x01
    31d2:	36 fe       	sbrs	r3, 6
    31d4:	03 c0       	rjmp	.+6      	; 0x31dc <vfprintf+0x198>
    31d6:	69 2d       	mov	r22, r9
    31d8:	70 e0       	ldi	r23, 0x00	; 0
    31da:	02 c0       	rjmp	.+4      	; 0x31e0 <vfprintf+0x19c>
    31dc:	6f ef       	ldi	r22, 0xFF	; 255
    31de:	7f ef       	ldi	r23, 0xFF	; 255
    31e0:	c5 01       	movw	r24, r10
    31e2:	2d d1       	rcall	.+602    	; 0x343e <strnlen_P>
    31e4:	4c 01       	movw	r8, r24
    31e6:	f3 2d       	mov	r31, r3
    31e8:	f0 68       	ori	r31, 0x80	; 128
    31ea:	3f 2e       	mov	r3, r31
    31ec:	82 01       	movw	r16, r4
    31ee:	33 fc       	sbrc	r3, 3
    31f0:	19 c0       	rjmp	.+50     	; 0x3224 <vfprintf+0x1e0>
    31f2:	82 2d       	mov	r24, r2
    31f4:	90 e0       	ldi	r25, 0x00	; 0
    31f6:	88 16       	cp	r8, r24
    31f8:	99 06       	cpc	r9, r25
    31fa:	a0 f4       	brcc	.+40     	; 0x3224 <vfprintf+0x1e0>
    31fc:	b6 01       	movw	r22, r12
    31fe:	80 e2       	ldi	r24, 0x20	; 32
    3200:	90 e0       	ldi	r25, 0x00	; 0
    3202:	33 d1       	rcall	.+614    	; 0x346a <fputc>
    3204:	2a 94       	dec	r2
    3206:	f5 cf       	rjmp	.-22     	; 0x31f2 <vfprintf+0x1ae>
    3208:	f5 01       	movw	r30, r10
    320a:	37 fc       	sbrc	r3, 7
    320c:	85 91       	lpm	r24, Z+
    320e:	37 fe       	sbrs	r3, 7
    3210:	81 91       	ld	r24, Z+
    3212:	5f 01       	movw	r10, r30
    3214:	b6 01       	movw	r22, r12
    3216:	90 e0       	ldi	r25, 0x00	; 0
    3218:	28 d1       	rcall	.+592    	; 0x346a <fputc>
    321a:	21 10       	cpse	r2, r1
    321c:	2a 94       	dec	r2
    321e:	21 e0       	ldi	r18, 0x01	; 1
    3220:	82 1a       	sub	r8, r18
    3222:	91 08       	sbc	r9, r1
    3224:	81 14       	cp	r8, r1
    3226:	91 04       	cpc	r9, r1
    3228:	79 f7       	brne	.-34     	; 0x3208 <vfprintf+0x1c4>
    322a:	e1 c0       	rjmp	.+450    	; 0x33ee <vfprintf+0x3aa>
    322c:	84 36       	cpi	r24, 0x64	; 100
    322e:	11 f0       	breq	.+4      	; 0x3234 <vfprintf+0x1f0>
    3230:	89 36       	cpi	r24, 0x69	; 105
    3232:	39 f5       	brne	.+78     	; 0x3282 <vfprintf+0x23e>
    3234:	f8 01       	movw	r30, r16
    3236:	37 fe       	sbrs	r3, 7
    3238:	07 c0       	rjmp	.+14     	; 0x3248 <vfprintf+0x204>
    323a:	60 81       	ld	r22, Z
    323c:	71 81       	ldd	r23, Z+1	; 0x01
    323e:	82 81       	ldd	r24, Z+2	; 0x02
    3240:	93 81       	ldd	r25, Z+3	; 0x03
    3242:	0c 5f       	subi	r16, 0xFC	; 252
    3244:	1f 4f       	sbci	r17, 0xFF	; 255
    3246:	08 c0       	rjmp	.+16     	; 0x3258 <vfprintf+0x214>
    3248:	60 81       	ld	r22, Z
    324a:	71 81       	ldd	r23, Z+1	; 0x01
    324c:	07 2e       	mov	r0, r23
    324e:	00 0c       	add	r0, r0
    3250:	88 0b       	sbc	r24, r24
    3252:	99 0b       	sbc	r25, r25
    3254:	0e 5f       	subi	r16, 0xFE	; 254
    3256:	1f 4f       	sbci	r17, 0xFF	; 255
    3258:	f3 2d       	mov	r31, r3
    325a:	ff 76       	andi	r31, 0x6F	; 111
    325c:	3f 2e       	mov	r3, r31
    325e:	97 ff       	sbrs	r25, 7
    3260:	09 c0       	rjmp	.+18     	; 0x3274 <vfprintf+0x230>
    3262:	90 95       	com	r25
    3264:	80 95       	com	r24
    3266:	70 95       	com	r23
    3268:	61 95       	neg	r22
    326a:	7f 4f       	sbci	r23, 0xFF	; 255
    326c:	8f 4f       	sbci	r24, 0xFF	; 255
    326e:	9f 4f       	sbci	r25, 0xFF	; 255
    3270:	f0 68       	ori	r31, 0x80	; 128
    3272:	3f 2e       	mov	r3, r31
    3274:	2a e0       	ldi	r18, 0x0A	; 10
    3276:	30 e0       	ldi	r19, 0x00	; 0
    3278:	a3 01       	movw	r20, r6
    327a:	33 d1       	rcall	.+614    	; 0x34e2 <__ultoa_invert>
    327c:	88 2e       	mov	r8, r24
    327e:	86 18       	sub	r8, r6
    3280:	44 c0       	rjmp	.+136    	; 0x330a <vfprintf+0x2c6>
    3282:	85 37       	cpi	r24, 0x75	; 117
    3284:	31 f4       	brne	.+12     	; 0x3292 <vfprintf+0x24e>
    3286:	23 2d       	mov	r18, r3
    3288:	2f 7e       	andi	r18, 0xEF	; 239
    328a:	b2 2e       	mov	r11, r18
    328c:	2a e0       	ldi	r18, 0x0A	; 10
    328e:	30 e0       	ldi	r19, 0x00	; 0
    3290:	25 c0       	rjmp	.+74     	; 0x32dc <vfprintf+0x298>
    3292:	93 2d       	mov	r25, r3
    3294:	99 7f       	andi	r25, 0xF9	; 249
    3296:	b9 2e       	mov	r11, r25
    3298:	8f 36       	cpi	r24, 0x6F	; 111
    329a:	c1 f0       	breq	.+48     	; 0x32cc <vfprintf+0x288>
    329c:	18 f4       	brcc	.+6      	; 0x32a4 <vfprintf+0x260>
    329e:	88 35       	cpi	r24, 0x58	; 88
    32a0:	79 f0       	breq	.+30     	; 0x32c0 <vfprintf+0x27c>
    32a2:	ae c0       	rjmp	.+348    	; 0x3400 <vfprintf+0x3bc>
    32a4:	80 37       	cpi	r24, 0x70	; 112
    32a6:	19 f0       	breq	.+6      	; 0x32ae <vfprintf+0x26a>
    32a8:	88 37       	cpi	r24, 0x78	; 120
    32aa:	21 f0       	breq	.+8      	; 0x32b4 <vfprintf+0x270>
    32ac:	a9 c0       	rjmp	.+338    	; 0x3400 <vfprintf+0x3bc>
    32ae:	e9 2f       	mov	r30, r25
    32b0:	e0 61       	ori	r30, 0x10	; 16
    32b2:	be 2e       	mov	r11, r30
    32b4:	b4 fe       	sbrs	r11, 4
    32b6:	0d c0       	rjmp	.+26     	; 0x32d2 <vfprintf+0x28e>
    32b8:	fb 2d       	mov	r31, r11
    32ba:	f4 60       	ori	r31, 0x04	; 4
    32bc:	bf 2e       	mov	r11, r31
    32be:	09 c0       	rjmp	.+18     	; 0x32d2 <vfprintf+0x28e>
    32c0:	34 fe       	sbrs	r3, 4
    32c2:	0a c0       	rjmp	.+20     	; 0x32d8 <vfprintf+0x294>
    32c4:	29 2f       	mov	r18, r25
    32c6:	26 60       	ori	r18, 0x06	; 6
    32c8:	b2 2e       	mov	r11, r18
    32ca:	06 c0       	rjmp	.+12     	; 0x32d8 <vfprintf+0x294>
    32cc:	28 e0       	ldi	r18, 0x08	; 8
    32ce:	30 e0       	ldi	r19, 0x00	; 0
    32d0:	05 c0       	rjmp	.+10     	; 0x32dc <vfprintf+0x298>
    32d2:	20 e1       	ldi	r18, 0x10	; 16
    32d4:	30 e0       	ldi	r19, 0x00	; 0
    32d6:	02 c0       	rjmp	.+4      	; 0x32dc <vfprintf+0x298>
    32d8:	20 e1       	ldi	r18, 0x10	; 16
    32da:	32 e0       	ldi	r19, 0x02	; 2
    32dc:	f8 01       	movw	r30, r16
    32de:	b7 fe       	sbrs	r11, 7
    32e0:	07 c0       	rjmp	.+14     	; 0x32f0 <vfprintf+0x2ac>
    32e2:	60 81       	ld	r22, Z
    32e4:	71 81       	ldd	r23, Z+1	; 0x01
    32e6:	82 81       	ldd	r24, Z+2	; 0x02
    32e8:	93 81       	ldd	r25, Z+3	; 0x03
    32ea:	0c 5f       	subi	r16, 0xFC	; 252
    32ec:	1f 4f       	sbci	r17, 0xFF	; 255
    32ee:	06 c0       	rjmp	.+12     	; 0x32fc <vfprintf+0x2b8>
    32f0:	60 81       	ld	r22, Z
    32f2:	71 81       	ldd	r23, Z+1	; 0x01
    32f4:	80 e0       	ldi	r24, 0x00	; 0
    32f6:	90 e0       	ldi	r25, 0x00	; 0
    32f8:	0e 5f       	subi	r16, 0xFE	; 254
    32fa:	1f 4f       	sbci	r17, 0xFF	; 255
    32fc:	a3 01       	movw	r20, r6
    32fe:	f1 d0       	rcall	.+482    	; 0x34e2 <__ultoa_invert>
    3300:	88 2e       	mov	r8, r24
    3302:	86 18       	sub	r8, r6
    3304:	fb 2d       	mov	r31, r11
    3306:	ff 77       	andi	r31, 0x7F	; 127
    3308:	3f 2e       	mov	r3, r31
    330a:	36 fe       	sbrs	r3, 6
    330c:	0d c0       	rjmp	.+26     	; 0x3328 <vfprintf+0x2e4>
    330e:	23 2d       	mov	r18, r3
    3310:	2e 7f       	andi	r18, 0xFE	; 254
    3312:	a2 2e       	mov	r10, r18
    3314:	89 14       	cp	r8, r9
    3316:	58 f4       	brcc	.+22     	; 0x332e <vfprintf+0x2ea>
    3318:	34 fe       	sbrs	r3, 4
    331a:	0b c0       	rjmp	.+22     	; 0x3332 <vfprintf+0x2ee>
    331c:	32 fc       	sbrc	r3, 2
    331e:	09 c0       	rjmp	.+18     	; 0x3332 <vfprintf+0x2ee>
    3320:	83 2d       	mov	r24, r3
    3322:	8e 7e       	andi	r24, 0xEE	; 238
    3324:	a8 2e       	mov	r10, r24
    3326:	05 c0       	rjmp	.+10     	; 0x3332 <vfprintf+0x2ee>
    3328:	b8 2c       	mov	r11, r8
    332a:	a3 2c       	mov	r10, r3
    332c:	03 c0       	rjmp	.+6      	; 0x3334 <vfprintf+0x2f0>
    332e:	b8 2c       	mov	r11, r8
    3330:	01 c0       	rjmp	.+2      	; 0x3334 <vfprintf+0x2f0>
    3332:	b9 2c       	mov	r11, r9
    3334:	a4 fe       	sbrs	r10, 4
    3336:	0f c0       	rjmp	.+30     	; 0x3356 <vfprintf+0x312>
    3338:	fe 01       	movw	r30, r28
    333a:	e8 0d       	add	r30, r8
    333c:	f1 1d       	adc	r31, r1
    333e:	80 81       	ld	r24, Z
    3340:	80 33       	cpi	r24, 0x30	; 48
    3342:	21 f4       	brne	.+8      	; 0x334c <vfprintf+0x308>
    3344:	9a 2d       	mov	r25, r10
    3346:	99 7e       	andi	r25, 0xE9	; 233
    3348:	a9 2e       	mov	r10, r25
    334a:	09 c0       	rjmp	.+18     	; 0x335e <vfprintf+0x31a>
    334c:	a2 fe       	sbrs	r10, 2
    334e:	06 c0       	rjmp	.+12     	; 0x335c <vfprintf+0x318>
    3350:	b3 94       	inc	r11
    3352:	b3 94       	inc	r11
    3354:	04 c0       	rjmp	.+8      	; 0x335e <vfprintf+0x31a>
    3356:	8a 2d       	mov	r24, r10
    3358:	86 78       	andi	r24, 0x86	; 134
    335a:	09 f0       	breq	.+2      	; 0x335e <vfprintf+0x31a>
    335c:	b3 94       	inc	r11
    335e:	a3 fc       	sbrc	r10, 3
    3360:	10 c0       	rjmp	.+32     	; 0x3382 <vfprintf+0x33e>
    3362:	a0 fe       	sbrs	r10, 0
    3364:	06 c0       	rjmp	.+12     	; 0x3372 <vfprintf+0x32e>
    3366:	b2 14       	cp	r11, r2
    3368:	80 f4       	brcc	.+32     	; 0x338a <vfprintf+0x346>
    336a:	28 0c       	add	r2, r8
    336c:	92 2c       	mov	r9, r2
    336e:	9b 18       	sub	r9, r11
    3370:	0d c0       	rjmp	.+26     	; 0x338c <vfprintf+0x348>
    3372:	b2 14       	cp	r11, r2
    3374:	58 f4       	brcc	.+22     	; 0x338c <vfprintf+0x348>
    3376:	b6 01       	movw	r22, r12
    3378:	80 e2       	ldi	r24, 0x20	; 32
    337a:	90 e0       	ldi	r25, 0x00	; 0
    337c:	76 d0       	rcall	.+236    	; 0x346a <fputc>
    337e:	b3 94       	inc	r11
    3380:	f8 cf       	rjmp	.-16     	; 0x3372 <vfprintf+0x32e>
    3382:	b2 14       	cp	r11, r2
    3384:	18 f4       	brcc	.+6      	; 0x338c <vfprintf+0x348>
    3386:	2b 18       	sub	r2, r11
    3388:	02 c0       	rjmp	.+4      	; 0x338e <vfprintf+0x34a>
    338a:	98 2c       	mov	r9, r8
    338c:	21 2c       	mov	r2, r1
    338e:	a4 fe       	sbrs	r10, 4
    3390:	0f c0       	rjmp	.+30     	; 0x33b0 <vfprintf+0x36c>
    3392:	b6 01       	movw	r22, r12
    3394:	80 e3       	ldi	r24, 0x30	; 48
    3396:	90 e0       	ldi	r25, 0x00	; 0
    3398:	68 d0       	rcall	.+208    	; 0x346a <fputc>
    339a:	a2 fe       	sbrs	r10, 2
    339c:	16 c0       	rjmp	.+44     	; 0x33ca <vfprintf+0x386>
    339e:	a1 fc       	sbrc	r10, 1
    33a0:	03 c0       	rjmp	.+6      	; 0x33a8 <vfprintf+0x364>
    33a2:	88 e7       	ldi	r24, 0x78	; 120
    33a4:	90 e0       	ldi	r25, 0x00	; 0
    33a6:	02 c0       	rjmp	.+4      	; 0x33ac <vfprintf+0x368>
    33a8:	88 e5       	ldi	r24, 0x58	; 88
    33aa:	90 e0       	ldi	r25, 0x00	; 0
    33ac:	b6 01       	movw	r22, r12
    33ae:	0c c0       	rjmp	.+24     	; 0x33c8 <vfprintf+0x384>
    33b0:	8a 2d       	mov	r24, r10
    33b2:	86 78       	andi	r24, 0x86	; 134
    33b4:	51 f0       	breq	.+20     	; 0x33ca <vfprintf+0x386>
    33b6:	a1 fe       	sbrs	r10, 1
    33b8:	02 c0       	rjmp	.+4      	; 0x33be <vfprintf+0x37a>
    33ba:	8b e2       	ldi	r24, 0x2B	; 43
    33bc:	01 c0       	rjmp	.+2      	; 0x33c0 <vfprintf+0x37c>
    33be:	80 e2       	ldi	r24, 0x20	; 32
    33c0:	a7 fc       	sbrc	r10, 7
    33c2:	8d e2       	ldi	r24, 0x2D	; 45
    33c4:	b6 01       	movw	r22, r12
    33c6:	90 e0       	ldi	r25, 0x00	; 0
    33c8:	50 d0       	rcall	.+160    	; 0x346a <fputc>
    33ca:	89 14       	cp	r8, r9
    33cc:	30 f4       	brcc	.+12     	; 0x33da <vfprintf+0x396>
    33ce:	b6 01       	movw	r22, r12
    33d0:	80 e3       	ldi	r24, 0x30	; 48
    33d2:	90 e0       	ldi	r25, 0x00	; 0
    33d4:	4a d0       	rcall	.+148    	; 0x346a <fputc>
    33d6:	9a 94       	dec	r9
    33d8:	f8 cf       	rjmp	.-16     	; 0x33ca <vfprintf+0x386>
    33da:	8a 94       	dec	r8
    33dc:	f3 01       	movw	r30, r6
    33de:	e8 0d       	add	r30, r8
    33e0:	f1 1d       	adc	r31, r1
    33e2:	80 81       	ld	r24, Z
    33e4:	b6 01       	movw	r22, r12
    33e6:	90 e0       	ldi	r25, 0x00	; 0
    33e8:	40 d0       	rcall	.+128    	; 0x346a <fputc>
    33ea:	81 10       	cpse	r8, r1
    33ec:	f6 cf       	rjmp	.-20     	; 0x33da <vfprintf+0x396>
    33ee:	22 20       	and	r2, r2
    33f0:	09 f4       	brne	.+2      	; 0x33f4 <vfprintf+0x3b0>
    33f2:	4e ce       	rjmp	.-868    	; 0x3090 <vfprintf+0x4c>
    33f4:	b6 01       	movw	r22, r12
    33f6:	80 e2       	ldi	r24, 0x20	; 32
    33f8:	90 e0       	ldi	r25, 0x00	; 0
    33fa:	37 d0       	rcall	.+110    	; 0x346a <fputc>
    33fc:	2a 94       	dec	r2
    33fe:	f7 cf       	rjmp	.-18     	; 0x33ee <vfprintf+0x3aa>
    3400:	f6 01       	movw	r30, r12
    3402:	86 81       	ldd	r24, Z+6	; 0x06
    3404:	97 81       	ldd	r25, Z+7	; 0x07
    3406:	02 c0       	rjmp	.+4      	; 0x340c <vfprintf+0x3c8>
    3408:	8f ef       	ldi	r24, 0xFF	; 255
    340a:	9f ef       	ldi	r25, 0xFF	; 255
    340c:	2b 96       	adiw	r28, 0x0b	; 11
    340e:	0f b6       	in	r0, 0x3f	; 63
    3410:	f8 94       	cli
    3412:	de bf       	out	0x3e, r29	; 62
    3414:	0f be       	out	0x3f, r0	; 63
    3416:	cd bf       	out	0x3d, r28	; 61
    3418:	df 91       	pop	r29
    341a:	cf 91       	pop	r28
    341c:	1f 91       	pop	r17
    341e:	0f 91       	pop	r16
    3420:	ff 90       	pop	r15
    3422:	ef 90       	pop	r14
    3424:	df 90       	pop	r13
    3426:	cf 90       	pop	r12
    3428:	bf 90       	pop	r11
    342a:	af 90       	pop	r10
    342c:	9f 90       	pop	r9
    342e:	8f 90       	pop	r8
    3430:	7f 90       	pop	r7
    3432:	6f 90       	pop	r6
    3434:	5f 90       	pop	r5
    3436:	4f 90       	pop	r4
    3438:	3f 90       	pop	r3
    343a:	2f 90       	pop	r2
    343c:	08 95       	ret

0000343e <strnlen_P>:
    343e:	fc 01       	movw	r30, r24
    3440:	05 90       	lpm	r0, Z+
    3442:	61 50       	subi	r22, 0x01	; 1
    3444:	70 40       	sbci	r23, 0x00	; 0
    3446:	01 10       	cpse	r0, r1
    3448:	d8 f7       	brcc	.-10     	; 0x3440 <strnlen_P+0x2>
    344a:	80 95       	com	r24
    344c:	90 95       	com	r25
    344e:	8e 0f       	add	r24, r30
    3450:	9f 1f       	adc	r25, r31
    3452:	08 95       	ret

00003454 <strnlen>:
    3454:	fc 01       	movw	r30, r24
    3456:	61 50       	subi	r22, 0x01	; 1
    3458:	70 40       	sbci	r23, 0x00	; 0
    345a:	01 90       	ld	r0, Z+
    345c:	01 10       	cpse	r0, r1
    345e:	d8 f7       	brcc	.-10     	; 0x3456 <strnlen+0x2>
    3460:	80 95       	com	r24
    3462:	90 95       	com	r25
    3464:	8e 0f       	add	r24, r30
    3466:	9f 1f       	adc	r25, r31
    3468:	08 95       	ret

0000346a <fputc>:
    346a:	0f 93       	push	r16
    346c:	1f 93       	push	r17
    346e:	cf 93       	push	r28
    3470:	df 93       	push	r29
    3472:	fb 01       	movw	r30, r22
    3474:	23 81       	ldd	r18, Z+3	; 0x03
    3476:	21 fd       	sbrc	r18, 1
    3478:	03 c0       	rjmp	.+6      	; 0x3480 <fputc+0x16>
    347a:	8f ef       	ldi	r24, 0xFF	; 255
    347c:	9f ef       	ldi	r25, 0xFF	; 255
    347e:	2c c0       	rjmp	.+88     	; 0x34d8 <fputc+0x6e>
    3480:	22 ff       	sbrs	r18, 2
    3482:	16 c0       	rjmp	.+44     	; 0x34b0 <fputc+0x46>
    3484:	46 81       	ldd	r20, Z+6	; 0x06
    3486:	57 81       	ldd	r21, Z+7	; 0x07
    3488:	24 81       	ldd	r18, Z+4	; 0x04
    348a:	35 81       	ldd	r19, Z+5	; 0x05
    348c:	42 17       	cp	r20, r18
    348e:	53 07       	cpc	r21, r19
    3490:	44 f4       	brge	.+16     	; 0x34a2 <fputc+0x38>
    3492:	a0 81       	ld	r26, Z
    3494:	b1 81       	ldd	r27, Z+1	; 0x01
    3496:	9d 01       	movw	r18, r26
    3498:	2f 5f       	subi	r18, 0xFF	; 255
    349a:	3f 4f       	sbci	r19, 0xFF	; 255
    349c:	31 83       	std	Z+1, r19	; 0x01
    349e:	20 83       	st	Z, r18
    34a0:	8c 93       	st	X, r24
    34a2:	26 81       	ldd	r18, Z+6	; 0x06
    34a4:	37 81       	ldd	r19, Z+7	; 0x07
    34a6:	2f 5f       	subi	r18, 0xFF	; 255
    34a8:	3f 4f       	sbci	r19, 0xFF	; 255
    34aa:	37 83       	std	Z+7, r19	; 0x07
    34ac:	26 83       	std	Z+6, r18	; 0x06
    34ae:	14 c0       	rjmp	.+40     	; 0x34d8 <fputc+0x6e>
    34b0:	8b 01       	movw	r16, r22
    34b2:	ec 01       	movw	r28, r24
    34b4:	fb 01       	movw	r30, r22
    34b6:	00 84       	ldd	r0, Z+8	; 0x08
    34b8:	f1 85       	ldd	r31, Z+9	; 0x09
    34ba:	e0 2d       	mov	r30, r0
    34bc:	09 95       	icall
    34be:	89 2b       	or	r24, r25
    34c0:	e1 f6       	brne	.-72     	; 0x347a <fputc+0x10>
    34c2:	d8 01       	movw	r26, r16
    34c4:	16 96       	adiw	r26, 0x06	; 6
    34c6:	8d 91       	ld	r24, X+
    34c8:	9c 91       	ld	r25, X
    34ca:	17 97       	sbiw	r26, 0x07	; 7
    34cc:	01 96       	adiw	r24, 0x01	; 1
    34ce:	17 96       	adiw	r26, 0x07	; 7
    34d0:	9c 93       	st	X, r25
    34d2:	8e 93       	st	-X, r24
    34d4:	16 97       	sbiw	r26, 0x06	; 6
    34d6:	ce 01       	movw	r24, r28
    34d8:	df 91       	pop	r29
    34da:	cf 91       	pop	r28
    34dc:	1f 91       	pop	r17
    34de:	0f 91       	pop	r16
    34e0:	08 95       	ret

000034e2 <__ultoa_invert>:
    34e2:	fa 01       	movw	r30, r20
    34e4:	aa 27       	eor	r26, r26
    34e6:	28 30       	cpi	r18, 0x08	; 8
    34e8:	51 f1       	breq	.+84     	; 0x353e <__ultoa_invert+0x5c>
    34ea:	20 31       	cpi	r18, 0x10	; 16
    34ec:	81 f1       	breq	.+96     	; 0x354e <__ultoa_invert+0x6c>
    34ee:	e8 94       	clt
    34f0:	6f 93       	push	r22
    34f2:	6e 7f       	andi	r22, 0xFE	; 254
    34f4:	6e 5f       	subi	r22, 0xFE	; 254
    34f6:	7f 4f       	sbci	r23, 0xFF	; 255
    34f8:	8f 4f       	sbci	r24, 0xFF	; 255
    34fa:	9f 4f       	sbci	r25, 0xFF	; 255
    34fc:	af 4f       	sbci	r26, 0xFF	; 255
    34fe:	b1 e0       	ldi	r27, 0x01	; 1
    3500:	3e d0       	rcall	.+124    	; 0x357e <__ultoa_invert+0x9c>
    3502:	b4 e0       	ldi	r27, 0x04	; 4
    3504:	3c d0       	rcall	.+120    	; 0x357e <__ultoa_invert+0x9c>
    3506:	67 0f       	add	r22, r23
    3508:	78 1f       	adc	r23, r24
    350a:	89 1f       	adc	r24, r25
    350c:	9a 1f       	adc	r25, r26
    350e:	a1 1d       	adc	r26, r1
    3510:	68 0f       	add	r22, r24
    3512:	79 1f       	adc	r23, r25
    3514:	8a 1f       	adc	r24, r26
    3516:	91 1d       	adc	r25, r1
    3518:	a1 1d       	adc	r26, r1
    351a:	6a 0f       	add	r22, r26
    351c:	71 1d       	adc	r23, r1
    351e:	81 1d       	adc	r24, r1
    3520:	91 1d       	adc	r25, r1
    3522:	a1 1d       	adc	r26, r1
    3524:	20 d0       	rcall	.+64     	; 0x3566 <__ultoa_invert+0x84>
    3526:	09 f4       	brne	.+2      	; 0x352a <__ultoa_invert+0x48>
    3528:	68 94       	set
    352a:	3f 91       	pop	r19
    352c:	2a e0       	ldi	r18, 0x0A	; 10
    352e:	26 9f       	mul	r18, r22
    3530:	11 24       	eor	r1, r1
    3532:	30 19       	sub	r19, r0
    3534:	30 5d       	subi	r19, 0xD0	; 208
    3536:	31 93       	st	Z+, r19
    3538:	de f6       	brtc	.-74     	; 0x34f0 <__ultoa_invert+0xe>
    353a:	cf 01       	movw	r24, r30
    353c:	08 95       	ret
    353e:	46 2f       	mov	r20, r22
    3540:	47 70       	andi	r20, 0x07	; 7
    3542:	40 5d       	subi	r20, 0xD0	; 208
    3544:	41 93       	st	Z+, r20
    3546:	b3 e0       	ldi	r27, 0x03	; 3
    3548:	0f d0       	rcall	.+30     	; 0x3568 <__ultoa_invert+0x86>
    354a:	c9 f7       	brne	.-14     	; 0x353e <__ultoa_invert+0x5c>
    354c:	f6 cf       	rjmp	.-20     	; 0x353a <__ultoa_invert+0x58>
    354e:	46 2f       	mov	r20, r22
    3550:	4f 70       	andi	r20, 0x0F	; 15
    3552:	40 5d       	subi	r20, 0xD0	; 208
    3554:	4a 33       	cpi	r20, 0x3A	; 58
    3556:	18 f0       	brcs	.+6      	; 0x355e <__ultoa_invert+0x7c>
    3558:	49 5d       	subi	r20, 0xD9	; 217
    355a:	31 fd       	sbrc	r19, 1
    355c:	40 52       	subi	r20, 0x20	; 32
    355e:	41 93       	st	Z+, r20
    3560:	02 d0       	rcall	.+4      	; 0x3566 <__ultoa_invert+0x84>
    3562:	a9 f7       	brne	.-22     	; 0x354e <__ultoa_invert+0x6c>
    3564:	ea cf       	rjmp	.-44     	; 0x353a <__ultoa_invert+0x58>
    3566:	b4 e0       	ldi	r27, 0x04	; 4
    3568:	a6 95       	lsr	r26
    356a:	97 95       	ror	r25
    356c:	87 95       	ror	r24
    356e:	77 95       	ror	r23
    3570:	67 95       	ror	r22
    3572:	ba 95       	dec	r27
    3574:	c9 f7       	brne	.-14     	; 0x3568 <__ultoa_invert+0x86>
    3576:	00 97       	sbiw	r24, 0x00	; 0
    3578:	61 05       	cpc	r22, r1
    357a:	71 05       	cpc	r23, r1
    357c:	08 95       	ret
    357e:	9b 01       	movw	r18, r22
    3580:	ac 01       	movw	r20, r24
    3582:	0a 2e       	mov	r0, r26
    3584:	06 94       	lsr	r0
    3586:	57 95       	ror	r21
    3588:	47 95       	ror	r20
    358a:	37 95       	ror	r19
    358c:	27 95       	ror	r18
    358e:	ba 95       	dec	r27
    3590:	c9 f7       	brne	.-14     	; 0x3584 <__ultoa_invert+0xa2>
    3592:	62 0f       	add	r22, r18
    3594:	73 1f       	adc	r23, r19
    3596:	84 1f       	adc	r24, r20
    3598:	95 1f       	adc	r25, r21
    359a:	a0 1d       	adc	r26, r0
    359c:	08 95       	ret

0000359e <_exit>:
    359e:	f8 94       	cli

000035a0 <__stop_program>:
    35a0:	ff cf       	rjmp	.-2      	; 0x35a0 <__stop_program>
