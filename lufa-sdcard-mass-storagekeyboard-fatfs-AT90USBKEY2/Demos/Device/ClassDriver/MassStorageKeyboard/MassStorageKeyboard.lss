
MassStorageKeyboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000154  00800100  00003262  000032f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003262  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000432  00800254  00800254  0000344a  2**0
                  ALLOC
  3 .debug_aranges 000006d8  00000000  00000000  0000344a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000011e9  00000000  00000000  00003b22  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000b2c7  00000000  00000000  00004d0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002e8d  00000000  00000000  0000ffd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00008a8b  00000000  00000000  00012e5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000ab0  00000000  00000000  0001b8ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000424c  00000000  00000000  0001c39c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00004720  00000000  00000000  000205e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000007b0  00000000  00000000  00024d08  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
       0:	a2 c1       	rjmp	.+836    	; 0x346 <__ctors_end>
/*-----------------------------------------------------------------------*/
/* Get Disk Status                                                       */
/*-----------------------------------------------------------------------*/

DSTATUS mmc_disk_status (void)
{
       2:	00 00       	nop

	return Serial_ReceiveByte();
}

int Serial_getchar_Blocking(FILE *Stream)
{
       4:	be c1       	rjmp	.+892    	; 0x382 <__bad_interrupt>

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
       6:	00 00       	nop
	return true;
#endif
}

void Endpoint_ClearEndpoints(void)
{
       8:	bc c1       	rjmp	.+888    	; 0x382 <__bad_interrupt>
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
       a:	00 00       	nop
       c:	ba c1       	rjmp	.+884    	; 0x382 <__bad_interrupt>
       e:	00 00       	nop
      10:	b8 c1       	rjmp	.+880    	; 0x382 <__bad_interrupt>
      12:	00 00       	nop
      14:	b6 c1       	rjmp	.+876    	; 0x382 <__bad_interrupt>
      16:	00 00       	nop
      18:	b4 c1       	rjmp	.+872    	; 0x382 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	b2 c1       	rjmp	.+868    	; 0x382 <__bad_interrupt>
      1e:	00 00       	nop
      20:	b0 c1       	rjmp	.+864    	; 0x382 <__bad_interrupt>
      22:	00 00       	nop
      24:	ae c1       	rjmp	.+860    	; 0x382 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 f4 0f 	jmp	0x1fe8	; 0x1fe8 <__vector_10>
      2c:	0c 94 b5 0f 	jmp	0x1f6a	; 0x1f6a <__vector_11>
      30:	a8 c1       	rjmp	.+848    	; 0x382 <__bad_interrupt>
      32:	00 00       	nop
      34:	a6 c1       	rjmp	.+844    	; 0x382 <__bad_interrupt>
      36:	00 00       	nop
      38:	a4 c1       	rjmp	.+840    	; 0x382 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	a2 c1       	rjmp	.+836    	; 0x382 <__bad_interrupt>
      3e:	00 00       	nop
      40:	a0 c1       	rjmp	.+832    	; 0x382 <__bad_interrupt>
      42:	00 00       	nop
      44:	ba c2       	rjmp	.+1396   	; 0x5ba <__vector_17>
      46:	00 00       	nop
      48:	9c c1       	rjmp	.+824    	; 0x382 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	9a c1       	rjmp	.+820    	; 0x382 <__bad_interrupt>
      4e:	00 00       	nop
      50:	98 c1       	rjmp	.+816    	; 0x382 <__bad_interrupt>
      52:	00 00       	nop
      54:	96 c1       	rjmp	.+812    	; 0x382 <__bad_interrupt>
      56:	00 00       	nop
      58:	94 c1       	rjmp	.+808    	; 0x382 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	92 c1       	rjmp	.+804    	; 0x382 <__bad_interrupt>
      5e:	00 00       	nop
      60:	90 c1       	rjmp	.+800    	; 0x382 <__bad_interrupt>
      62:	00 00       	nop
      64:	8e c1       	rjmp	.+796    	; 0x382 <__bad_interrupt>
      66:	00 00       	nop
      68:	8c c1       	rjmp	.+792    	; 0x382 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	8a c1       	rjmp	.+788    	; 0x382 <__bad_interrupt>
      6e:	00 00       	nop
      70:	88 c1       	rjmp	.+784    	; 0x382 <__bad_interrupt>
      72:	00 00       	nop
      74:	86 c1       	rjmp	.+780    	; 0x382 <__bad_interrupt>
      76:	00 00       	nop
      78:	84 c1       	rjmp	.+776    	; 0x382 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	82 c1       	rjmp	.+772    	; 0x382 <__bad_interrupt>
      7e:	00 00       	nop
      80:	80 c1       	rjmp	.+768    	; 0x382 <__bad_interrupt>
      82:	00 00       	nop
      84:	7e c1       	rjmp	.+764    	; 0x382 <__bad_interrupt>
      86:	00 00       	nop
      88:	7c c1       	rjmp	.+760    	; 0x382 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	7a c1       	rjmp	.+756    	; 0x382 <__bad_interrupt>
      8e:	00 00       	nop
      90:	78 c1       	rjmp	.+752    	; 0x382 <__bad_interrupt>
      92:	00 00       	nop
      94:	76 c1       	rjmp	.+748    	; 0x382 <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.4626>:
      98:	52 65 61 64 79 0d 0a 00                             Ready...

000000a0 <__c.4620>:
      a0:	44 69 73 63 6f 6e 6e 65 63 74 0d 0a 00              Disconnect...

000000ad <__c.4615>:
      ad:	43 6f 6e 6e 65 63 74 0d 0a 00                       Connect...

000000b7 <__c.4607>:
      b7:	70 6f 72 74 65 64 20 66 72 6f 6d 20 4c 55 46 41     ported from LUFA
      c7:	5f 30 39 31 32 32 33 20 68 74 74 70 3a 2f 2f 77     _091223 http://w
      d7:	77 77 2e 66 6f 75 72 77 61 6c 6c 65 64 63 75 62     ww.fourwalledcub
      e7:	69 63 6c 65 2e 63 6f 6d 2f 4c 55 46 41 2e 70 68     icle.com/LUFA.ph
      f7:	70 20 2d 20 62 61 73 65 64 20 69 6e 20 4d 61 74     p - based in Mat
     107:	68 69 65 75 20 53 6f 6e 65 74 20 6c 75 66 61 2d     hieu Sonet lufa-
     117:	73 64 63 61 72 64 2d 6d 61 73 73 2d 73 74 6f 72     sdcard-mass-stor
     127:	61 67 65 2d 64 65 6d 6f 20 66 6f 72 20 54 65 65     age-demo for Tee
     137:	6e 73 79 32 20 41 54 4d 45 47 41 33 32 55 34 20     nsy2 ATMEGA32U4 
     147:	68 74 74 70 73 3a 2f 2f 62 69 74 62 75 63 6b 65     https://bitbucke
     157:	74 2e 6f 72 67 2f 65 6c 61 73 74 69 63 73 68 65     t.org/elasticshe
     167:	65 70 2f 6c 75 66 61 2d 73 64 63 61 72 64 2d 6d     ep/lufa-sdcard-m
     177:	61 73 73 2d 73 74 6f 72 61 67 65 2d 64 65 6d 6f     ass-storage-demo
     187:	2f 73 72 63 2f 64 65 66 61 75 6c 74 2f 20 75 73     /src/default/ us
     197:	69 6e 67 20 68 74 74 70 3a 2f 2f 77 77 77 2e 72     ing http://www.r
     1a7:	6f 6c 61 6e 64 2d 72 69 65 67 65 6c 2e 64 65 2f     oland-riegel.de/
     1b7:	73 64 2d 72 65 61 64 65 72 2f 69 6e 64 65 78 2e     sd-reader/index.
     1c7:	68 74 6d 6c 20 4d 4d 43 2f 53 44 2f 53 44 48 43     html MMC/SD/SDHC
     1d7:	20 63 61 72 64 20 72 65 61 64 65 72 20 6c 69 62      card reader lib
     1e7:	72 61 72 79 0d 0a 0d 0a 00                          rary.....

000001f0 <KeyboardReport>:
     1f0:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     200:	75 01 95 08 81 02 95 01 75 08 81 01 05 08 19 01     u.......u.......
     210:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 15 00     )...u.....u.....
     220:	26 ff 00 05 07 19 00 29 ff 95 06 75 08 81 00 c0     &......)...u....

00000230 <DeviceDescriptor>:
     230:	12 01 10 01 00 00 00 08 eb 03 61 20 01 00 01 02     ..........a ....
     240:	dc 01                                               ..

00000242 <ConfigurationDescriptor>:
     242:	09 02 39 00 02 01 00 80 32 09 04 00 00 02 08 06     ..9.....2.......
     252:	50 00 07 05 83 02 40 00 05 07 05 04 02 40 00 05     P.....@......@..
     262:	09 04 01 00 01 03 01 01 00 09 21 11 01 00 01 22     ..........!...."
     272:	40 00 07 05 81 03 08 00 05                          @........

0000027b <LanguageString>:
     27b:	04 03 09 04                                         ....

0000027f <ManufacturerString>:
     27f:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
     28f:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

00000299 <ProductString>:
     299:	48 03 4c 00 55 00 46 00 41 00 20 00 4d 00 61 00     H.L.U.F.A. .M.a.
     2a9:	73 00 73 00 20 00 53 00 74 00 6f 00 72 00 61 00     s.s. .S.t.o.r.a.
     2b9:	67 00 65 00 20 00 61 00 6e 00 64 00 20 00 4b 00     g.e. .a.n.d. .K.
     2c9:	65 00 79 00 62 00 6f 00 61 00 72 00 64 00 20 00     e.y.b.o.a.r.d. .
     2d9:	44 00 65 00 6d 00 6f 00 00 00                       D.e.m.o...

000002e3 <__c.4700>:
     2e3:	52 20 25 6c 69 20 25 69 0d 0a 00                    R %li %i...

000002ee <__c.4638>:
     2ee:	57 20 25 6c 69 20 25 69 0d 0a 00                    W %li %i...

000002f9 <__c.4586>:
     2f9:	53 44 20 62 6c 6f 63 6b 73 3a 20 25 6c 69 0d 0a     SD blocks: %li..
     309:	00                                                  .

0000030a <__c.4579>:
     30a:	64 69 73 6b 5f 69 6e 69 74 69 61 6c 69 7a 65 20     disk_initialize 
     31a:	73 75 63 63 65 73 73 0d 0a 00                       success...

00000324 <__c.4575>:
     324:	74 72 79 69 6e 67 20 2e 2e 2e 20 64 69 73 6b 5f     trying ... disk_
     334:	69 6e 69 74 69 61 6c 69 7a 65 0d 0a 00              initialize...

00000341 <__c.4573>:
     341:	0d 0a 0d 0a 00                                      .....

00000346 <__ctors_end>:
     346:	11 24       	eor	r1, r1
     348:	1f be       	out	0x3f, r1	; 63
     34a:	cf ef       	ldi	r28, 0xFF	; 255
     34c:	d0 e2       	ldi	r29, 0x20	; 32
     34e:	de bf       	out	0x3e, r29	; 62
     350:	cd bf       	out	0x3d, r28	; 61

00000352 <__do_copy_data>:
     352:	12 e0       	ldi	r17, 0x02	; 2
     354:	a0 e0       	ldi	r26, 0x00	; 0
     356:	b1 e0       	ldi	r27, 0x01	; 1
     358:	e2 e6       	ldi	r30, 0x62	; 98
     35a:	f2 e3       	ldi	r31, 0x32	; 50
     35c:	00 e0       	ldi	r16, 0x00	; 0
     35e:	0b bf       	out	0x3b, r16	; 59
     360:	02 c0       	rjmp	.+4      	; 0x366 <__do_copy_data+0x14>
     362:	07 90       	elpm	r0, Z+
     364:	0d 92       	st	X+, r0
     366:	a4 35       	cpi	r26, 0x54	; 84
     368:	b1 07       	cpc	r27, r17
     36a:	d9 f7       	brne	.-10     	; 0x362 <__do_copy_data+0x10>

0000036c <__do_clear_bss>:
     36c:	16 e0       	ldi	r17, 0x06	; 6
     36e:	a4 e5       	ldi	r26, 0x54	; 84
     370:	b2 e0       	ldi	r27, 0x02	; 2
     372:	01 c0       	rjmp	.+2      	; 0x376 <.do_clear_bss_start>

00000374 <.do_clear_bss_loop>:
     374:	1d 92       	st	X+, r1

00000376 <.do_clear_bss_start>:
     376:	a6 38       	cpi	r26, 0x86	; 134
     378:	b1 07       	cpc	r27, r17
     37a:	e1 f7       	brne	.-8      	; 0x374 <.do_clear_bss_loop>
     37c:	4e d1       	rcall	.+668    	; 0x61a <main>
     37e:	0c 94 2f 19 	jmp	0x325e	; 0x325e <_exit>

00000382 <__bad_interrupt>:
     382:	3e ce       	rjmp	.-900    	; 0x0 <__vectors>

00000384 <EVENT_USB_Device_StartOfFrame>:
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
     384:	80 91 1a 02 	lds	r24, 0x021A
     388:	90 91 1b 02 	lds	r25, 0x021B
     38c:	00 97       	sbiw	r24, 0x00	; 0
     38e:	29 f0       	breq	.+10     	; 0x39a <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
     390:	01 97       	sbiw	r24, 0x01	; 1
     392:	90 93 1b 02 	sts	0x021B, r25
     396:	80 93 1a 02 	sts	0x021A, r24
     39a:	08 95       	ret

0000039c <CALLBACK_HID_Device_CreateHIDReport>:
bool CALLBACK_HID_Device_CreateHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                         uint8_t* const ReportID,
                                         const uint8_t ReportType,
                                         void* ReportData,
                                         uint16_t* const ReportSize)
{
     39c:	0f 93       	push	r16
     39e:	1f 93       	push	r17
     3a0:	d8 01       	movw	r26, r16
	USB_KeyboardReport_Data_t* KeyboardReport = (USB_KeyboardReport_Data_t*)ReportData;
     3a2:	f9 01       	movw	r30, r18
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> JOY_PORTE_MASK_SHIFT));
     3a4:	23 b1       	in	r18, 0x03	; 3
     3a6:	8c b1       	in	r24, 0x0c	; 12
     3a8:	80 95       	com	r24
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	80 73       	andi	r24, 0x30	; 48
     3ae:	90 70       	andi	r25, 0x00	; 0
     3b0:	95 95       	asr	r25
     3b2:	87 95       	ror	r24
     3b4:	20 95       	com	r18
     3b6:	20 7e       	andi	r18, 0xE0	; 224
     3b8:	28 2b       	or	r18, r24
			}

			static inline uint8_t Buttons_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Buttons_GetStatus(void)
			{
				return ((PINE & BUTTONS_BUTTON1) ^ BUTTONS_BUTTON1);
     3ba:	3c b1       	in	r19, 0x0c	; 12

	#ifndef NO_JOYSTICK
	uint8_t JoyStatus_LCL    = Joystick_GetStatus();
	uint8_t ButtonStatus_LCL = Buttons_GetStatus();

	KeyboardReport->Modifier = HID_KEYBOARD_MODIFIER_LEFTSHIFT;
     3bc:	82 e0       	ldi	r24, 0x02	; 2
     3be:	80 83       	st	Z, r24

	if (JoyStatus_LCL & JOY_UP)
     3c0:	27 ff       	sbrs	r18, 7
     3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <CALLBACK_HID_Device_CreateHIDReport+0x2c>
	  KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_A;
     3c4:	84 e0       	ldi	r24, 0x04	; 4
     3c6:	03 c0       	rjmp	.+6      	; 0x3ce <CALLBACK_HID_Device_CreateHIDReport+0x32>
	else if (JoyStatus_LCL & JOY_DOWN)
     3c8:	24 ff       	sbrs	r18, 4
     3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <CALLBACK_HID_Device_CreateHIDReport+0x34>
	  KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_B;
     3cc:	85 e0       	ldi	r24, 0x05	; 5
     3ce:	82 83       	std	Z+2, r24	; 0x02

	if (JoyStatus_LCL & JOY_LEFT)
     3d0:	92 2f       	mov	r25, r18
     3d2:	26 ff       	sbrs	r18, 6
     3d4:	02 c0       	rjmp	.+4      	; 0x3da <CALLBACK_HID_Device_CreateHIDReport+0x3e>
	  KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_C;
     3d6:	86 e0       	ldi	r24, 0x06	; 6
     3d8:	03 c0       	rjmp	.+6      	; 0x3e0 <CALLBACK_HID_Device_CreateHIDReport+0x44>
	else if (JoyStatus_LCL & JOY_RIGHT)
     3da:	23 ff       	sbrs	r18, 3
     3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <CALLBACK_HID_Device_CreateHIDReport+0x46>
	  KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_D;
     3de:	87 e0       	ldi	r24, 0x07	; 7
     3e0:	82 83       	std	Z+2, r24	; 0x02

	if (JoyStatus_LCL & JOY_PRESS)
     3e2:	95 ff       	sbrs	r25, 5
     3e4:	02 c0       	rjmp	.+4      	; 0x3ea <CALLBACK_HID_Device_CreateHIDReport+0x4e>
	  KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_E;
     3e6:	88 e0       	ldi	r24, 0x08	; 8
     3e8:	82 83       	std	Z+2, r24	; 0x02

	if (ButtonStatus_LCL & BUTTONS_BUTTON1)
     3ea:	32 fd       	sbrc	r19, 2
     3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <CALLBACK_HID_Device_CreateHIDReport+0x56>
	  KeyboardReport->KeyCode[0] = HID_KEYBOARD_SC_F;
     3ee:	89 e0       	ldi	r24, 0x09	; 9
     3f0:	82 83       	std	Z+2, r24	; 0x02
	#endif 

	*ReportSize = sizeof(USB_KeyboardReport_Data_t);
     3f2:	88 e0       	ldi	r24, 0x08	; 8
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	8d 93       	st	X+, r24
     3f8:	9c 93       	st	X, r25
	return false;
}
     3fa:	80 e0       	ldi	r24, 0x00	; 0
     3fc:	1f 91       	pop	r17
     3fe:	0f 91       	pop	r16
     400:	08 95       	ret

00000402 <CALLBACK_HID_Device_ProcessHIDReport>:
void CALLBACK_HID_Device_ProcessHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                          const uint8_t ReportID,
                                          const uint8_t ReportType,
                                          const void* ReportData,
                                          const uint16_t ReportSize)
{
     402:	f9 01       	movw	r30, r18
	#ifndef NO_LEDS
	uint8_t  LEDMask   = LEDS_NO_LEDS;
	uint8_t* LEDReport = (uint8_t*)ReportData;

	if (*LEDReport & HID_KEYBOARD_LED_NUMLOCK)
     404:	80 81       	ld	r24, Z
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	80 fd       	sbrc	r24, 0
     40a:	90 e1       	ldi	r25, 0x10	; 16
	  LEDMask |= LEDS_LED1;

	if (*LEDReport & HID_KEYBOARD_LED_CAPSLOCK)
     40c:	81 fd       	sbrc	r24, 1
	  LEDMask |= LEDS_LED3;
     40e:	90 68       	ori	r25, 0x80	; 128

	if (*LEDReport & HID_KEYBOARD_LED_SCROLLLOCK)
     410:	82 fd       	sbrc	r24, 2
	  LEDMask |= LEDS_LED4;
     412:	90 64       	ori	r25, 0x40	; 64
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     414:	8b b1       	in	r24, 0x0b	; 11
     416:	8f 70       	andi	r24, 0x0F	; 15
     418:	98 2b       	or	r25, r24
     41a:	9b b9       	out	0x0b, r25	; 11

	LEDs_SetAllLEDs(LEDMask);
	#endif
}
     41c:	08 95       	ret

0000041e <CALLBACK_MS_Device_SCSICommandReceived>:
     41e:	2b b1       	in	r18, 0x0b	; 11
     420:	2f 70       	andi	r18, 0x0F	; 15
     422:	20 62       	ori	r18, 0x20	; 32
     424:	2b b9       	out	0x0b, r18	; 11

	#ifndef NO_LEDS
	LEDs_SetAllLEDs(LEDMASK_USB_BUSY);
	#endif
	
	CommandSuccess = SCSI_DecodeSCSICommand(MSInterfaceInfo);
     426:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <SCSI_DecodeSCSICommand>
     42a:	9b b1       	in	r25, 0x0b	; 11
     42c:	9f 70       	andi	r25, 0x0F	; 15
     42e:	90 66       	ori	r25, 0x60	; 96
     430:	9b b9       	out	0x0b, r25	; 11
	#ifndef NO_LEDS
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
	#endif

	return CommandSuccess;
}
     432:	08 95       	ret

00000434 <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	MS_Device_ProcessControlRequest(&Disk_MS_Interface);
     434:	83 ed       	ldi	r24, 0xD3	; 211
     436:	91 e0       	ldi	r25, 0x01	; 1
     438:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <MS_Device_ProcessControlRequest>
	HID_Device_ProcessControlRequest(&Keyboard_HID_Interface);
     43c:	8c e0       	ldi	r24, 0x0C	; 12
     43e:	92 e0       	ldi	r25, 0x02	; 2
     440:	0c 94 3f 13 	jmp	0x267e	; 0x267e <HID_Device_ProcessControlRequest>

00000444 <EVENT_USB_Device_Disconnect>:
}

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	printf_P(PSTR("Disconnect\r\n"));
     444:	00 d0       	rcall	.+0      	; 0x446 <EVENT_USB_Device_Disconnect+0x2>
     446:	80 ea       	ldi	r24, 0xA0	; 160
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	ed b7       	in	r30, 0x3d	; 61
     44c:	fe b7       	in	r31, 0x3e	; 62
     44e:	92 83       	std	Z+2, r25	; 0x02
     450:	81 83       	std	Z+1, r24	; 0x01
     452:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <printf_P>
     456:	8b b1       	in	r24, 0x0b	; 11
     458:	8f 70       	andi	r24, 0x0F	; 15
     45a:	80 61       	ori	r24, 0x10	; 16
     45c:	8b b9       	out	0x0b, r24	; 11
     45e:	0f 90       	pop	r0
     460:	0f 90       	pop	r0
	#ifndef NO_LEDS
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	#endif
}
     462:	08 95       	ret

00000464 <EVENT_USB_Device_Connect>:
}

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	printf_P(PSTR("Connect\r\n"));
     464:	00 d0       	rcall	.+0      	; 0x466 <EVENT_USB_Device_Connect+0x2>
     466:	8d ea       	ldi	r24, 0xAD	; 173
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	ed b7       	in	r30, 0x3d	; 61
     46c:	fe b7       	in	r31, 0x3e	; 62
     46e:	92 83       	std	Z+2, r25	; 0x02
     470:	81 83       	std	Z+1, r24	; 0x01
     472:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <printf_P>
     476:	8b b1       	in	r24, 0x0b	; 11
     478:	8f 70       	andi	r24, 0x0F	; 15
     47a:	80 6a       	ori	r24, 0xA0	; 160
     47c:	8b b9       	out	0x0b, r24	; 11
     47e:	0f 90       	pop	r0
     480:	0f 90       	pop	r0
	#ifndef NO_LEDS
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
	#endif
}
     482:	08 95       	ret

00000484 <EVENT_USB_Device_ConfigurationChanged>:
	#endif
}

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
     484:	0f 93       	push	r16
     486:	1f 93       	push	r17
	bool ConfigSuccess = true;
	
	printf_P(PSTR("Ready\r\n"));
     488:	00 d0       	rcall	.+0      	; 0x48a <EVENT_USB_Device_ConfigurationChanged+0x6>
     48a:	88 e9       	ldi	r24, 0x98	; 152
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	ed b7       	in	r30, 0x3d	; 61
     490:	fe b7       	in	r31, 0x3e	; 62
     492:	92 83       	std	Z+2, r25	; 0x02
     494:	81 83       	std	Z+1, r24	; 0x01
     496:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <printf_P>

	ConfigSuccess &= HID_Device_ConfigureEndpoints(&Keyboard_HID_Interface);
     49a:	0f 90       	pop	r0
     49c:	0f 90       	pop	r0
     49e:	8c e0       	ldi	r24, 0x0C	; 12
     4a0:	92 e0       	ldi	r25, 0x02	; 2
     4a2:	0e 94 1e 13 	call	0x263c	; 0x263c <HID_Device_ConfigureEndpoints>
     4a6:	08 2f       	mov	r16, r24
	ConfigSuccess &= MS_Device_ConfigureEndpoints(&Disk_MS_Interface);
     4a8:	83 ed       	ldi	r24, 0xD3	; 211
     4aa:	91 e0       	ldi	r25, 0x01	; 1
     4ac:	0e 94 b5 15 	call	0x2b6a	; 0x2b6a <MS_Device_ConfigureEndpoints>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
     4b0:	90 91 e2 00 	lds	r25, 0x00E2
     4b4:	94 60       	ori	r25, 0x04	; 4
     4b6:	90 93 e2 00 	sts	0x00E2, r25

	USB_Device_EnableSOFEvents();

	#ifndef NO_LEDS
	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
     4ba:	10 e0       	ldi	r17, 0x00	; 0
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	08 23       	and	r16, r24
     4c0:	19 23       	and	r17, r25
     4c2:	00 ff       	sbrs	r16, 0
     4c4:	02 c0       	rjmp	.+4      	; 0x4ca <EVENT_USB_Device_ConfigurationChanged+0x46>
     4c6:	90 e6       	ldi	r25, 0x60	; 96
     4c8:	01 c0       	rjmp	.+2      	; 0x4cc <EVENT_USB_Device_ConfigurationChanged+0x48>
     4ca:	90 e9       	ldi	r25, 0x90	; 144
     4cc:	8b b1       	in	r24, 0x0b	; 11
     4ce:	8f 70       	andi	r24, 0x0F	; 15
     4d0:	98 2b       	or	r25, r24
     4d2:	9b b9       	out	0x0b, r25	; 11
	#endif
}
     4d4:	1f 91       	pop	r17
     4d6:	0f 91       	pop	r16
     4d8:	08 95       	ret

000004da <SetupHardware>:
/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{	
#if (ARCH == ARCH_AVR8)
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     4da:	84 b7       	in	r24, 0x34	; 52
     4dc:	87 7f       	andi	r24, 0xF7	; 247
     4de:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     4e0:	88 e1       	ldi	r24, 0x18	; 24
     4e2:	0f b6       	in	r0, 0x3f	; 63
     4e4:	f8 94       	cli
     4e6:	80 93 60 00 	sts	0x0060, r24
     4ea:	10 92 60 00 	sts	0x0060, r1
     4ee:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
     4f0:	80 e0       	ldi	r24, 0x00	; 0
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	20 e8       	ldi	r18, 0x80	; 128
     4f6:	0f b6       	in	r0, 0x3f	; 63
     4f8:	f8 94       	cli
     4fa:	20 93 61 00 	sts	0x0061, r18
     4fe:	80 93 61 00 	sts	0x0061, r24
     502:	0f be       	out	0x3f, r0	; 63
{
	//MCUCR = _BV(JTD); MCUCR = _BV(JTD);	/* Disable JTAG */

	//pull up 
	
	PORTA = 0b11111111;
     504:	8f ef       	ldi	r24, 0xFF	; 255
     506:	82 b9       	out	0x02, r24	; 2
	PORTB = 0b11111111;
     508:	85 b9       	out	0x05, r24	; 5
	PORTC = 0b11111111;
     50a:	88 b9       	out	0x08, r24	; 8
	PORTD = 0b11111111;
     50c:	8b b9       	out	0x0b, r24	; 11
	//PORTE = 0b11111111;
	PORTF = 0b11111111;
     50e:	81 bb       	out	0x11, r24	; 17
	//PORTG = 0b00011111;
	
    TCCR1A = 0;     // set entire TCCR1A register to 0
     510:	10 92 80 00 	sts	0x0080, r1
    TCCR1B = 0;
     514:	a1 e8       	ldi	r26, 0x81	; 129
     516:	b0 e0       	ldi	r27, 0x00	; 0
     518:	1c 92       	st	X, r1
    TCCR1B |=(1<<WGM12);      //CTC mode; clock timer comare
     51a:	8c 91       	ld	r24, X
     51c:	88 60       	ori	r24, 0x08	; 8
     51e:	8c 93       	st	X, r24
    TIMSK1 |= (1<<OCIE1A);  //ENABLE INTERUPTs
     520:	ef e6       	ldi	r30, 0x6F	; 111
     522:	f0 e0       	ldi	r31, 0x00	; 0
     524:	80 81       	ld	r24, Z
     526:	82 60       	ori	r24, 0x02	; 2
     528:	80 83       	st	Z, r24
    OCR1A = 0x4E20; 
     52a:	80 e2       	ldi	r24, 0x20	; 32
     52c:	9e e4       	ldi	r25, 0x4E	; 78
     52e:	90 93 89 00 	sts	0x0089, r25
     532:	80 93 88 00 	sts	0x0088, r24
    TCCR1B |=  (1<<CS11); //PRESCALER 
     536:	8c 91       	ld	r24, X
     538:	82 60       	ori	r24, 0x02	; 2
     53a:	8c 93       	st	X, r24
	
	sei();
     53c:	78 94       	sei
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed);
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     53e:	83 e3       	ldi	r24, 0x33	; 51
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	90 93 cd 00 	sts	0x00CD, r25
     546:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     54a:	86 e0       	ldi	r24, 0x06	; 6
     54c:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     550:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     554:	88 e1       	ldi	r24, 0x18	; 24
     556:	80 93 c9 00 	sts	0x00C9, r24

				DDRD  |= (1 << 3);
     55a:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     55c:	5a 9a       	sbi	0x0b, 2	; 11
		
	/* Hardware Initialization */
	ioinit();
	
	Serial_Init(9600, false);
	Serial_SendString("\r\n\r\nSetup mass storage sd and keyboard adapted by David Reguera Garcia aka Dreg https://github.com/David-Reguera-Garcia-Dreg - http://www.fr33project.org\r\n");
     55e:	80 e0       	ldi	r24, 0x00	; 0
     560:	91 e0       	ldi	r25, 0x01	; 1
     562:	0e 94 20 0c 	call	0x1840	; 0x1840 <Serial_SendString>
	Serial_CreateStream(NULL);
     566:	80 e0       	ldi	r24, 0x00	; 0
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	0e 94 2d 0c 	call	0x185a	; 0x185a <Serial_CreateStream>
	printf("using fatfs http://elm-chan.org/fsw/ff/00index_e.html\r\n");
     56e:	8c e9       	ldi	r24, 0x9C	; 156
     570:	91 e0       	ldi	r25, 0x01	; 1
     572:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <puts>
	printf_P(PSTR("ported from LUFA_091223 http://www.fourwalledcubicle.com/LUFA.php - based in Mathieu Sonet lufa-sdcard-mass-storage-demo for Teensy2 ATMEGA32U4 https://bitbucket.org/elasticsheep/lufa-sdcard-mass-storage-demo/src/default/ using http://www.roland-riegel.de/sd-reader/index.html MMC/SD/SDHC card reader library\r\n\r\n"));
     576:	00 d0       	rcall	.+0      	; 0x578 <SetupHardware+0x9e>
     578:	87 eb       	ldi	r24, 0xB7	; 183
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	ed b7       	in	r30, 0x3d	; 61
     57e:	fe b7       	in	r31, 0x3e	; 62
     580:	92 83       	std	Z+2, r25	; 0x02
     582:	81 83       	std	Z+1, r24	; 0x01
     584:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <printf_P>

	SDCardManager_Init();
     588:	0f 90       	pop	r0
     58a:	0f 90       	pop	r0
     58c:	44 d2       	rcall	.+1160   	; 0xa16 <SDCardManager_Init>

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     58e:	8a b1       	in	r24, 0x0a	; 10
     590:	80 6f       	ori	r24, 0xF0	; 240
     592:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     594:	8b b1       	in	r24, 0x0b	; 11
     596:	8f 70       	andi	r24, 0x0F	; 15
     598:	8b b9       	out	0x0b, r24	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Buttons_Init(void)
			{
				DDRE  &= ~BUTTONS_BUTTON1;
     59a:	6a 98       	cbi	0x0d, 2	; 13
				PORTE |=  BUTTONS_BUTTON1;
     59c:	72 9a       	sbi	0x0e, 2	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~JOY_BMASK;
     59e:	84 b1       	in	r24, 0x04	; 4
     5a0:	8f 71       	andi	r24, 0x1F	; 31
     5a2:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~JOY_EMASK;
     5a4:	8d b1       	in	r24, 0x0d	; 13
     5a6:	8f 7c       	andi	r24, 0xCF	; 207
     5a8:	8d b9       	out	0x0d, r24	; 13

				PORTB |=  JOY_BMASK;
     5aa:	85 b1       	in	r24, 0x05	; 5
     5ac:	80 6e       	ori	r24, 0xE0	; 224
     5ae:	85 b9       	out	0x05, r24	; 5
				PORTE |=  JOY_EMASK;
     5b0:	8e b1       	in	r24, 0x0e	; 14
     5b2:	80 63       	ori	r24, 0x30	; 48
     5b4:	8e b9       	out	0x0e, r24	; 14
	#ifndef NO_JOYSTICK
	Buttons_Init();
	Joystick_Init();
	#endif 

	USB_Init();
     5b6:	0c 94 9a 0f 	jmp	0x1f34	; 0x1f34 <USB_Init>

000005ba <__vector_17>:
	
	sei();
}

ISR(TIMER1_COMPA_vect)
{
     5ba:	1f 92       	push	r1
     5bc:	0f 92       	push	r0
     5be:	0f b6       	in	r0, 0x3f	; 63
     5c0:	0f 92       	push	r0
     5c2:	0b b6       	in	r0, 0x3b	; 59
     5c4:	0f 92       	push	r0
     5c6:	11 24       	eor	r1, r1
     5c8:	2f 93       	push	r18
     5ca:	3f 93       	push	r19
     5cc:	4f 93       	push	r20
     5ce:	5f 93       	push	r21
     5d0:	6f 93       	push	r22
     5d2:	7f 93       	push	r23
     5d4:	8f 93       	push	r24
     5d6:	9f 93       	push	r25
     5d8:	af 93       	push	r26
     5da:	bf 93       	push	r27
     5dc:	ef 93       	push	r30
     5de:	ff 93       	push	r31
	Timer++;			/* Performance counter for this module */
     5e0:	80 91 63 06 	lds	r24, 0x0663
     5e4:	90 91 64 06 	lds	r25, 0x0664
     5e8:	01 96       	adiw	r24, 0x01	; 1
     5ea:	90 93 64 06 	sts	0x0664, r25
     5ee:	80 93 63 06 	sts	0x0663, r24
	disk_timerproc();	/* Drive timer procedure of low level disk I/O module */
     5f2:	3b d2       	rcall	.+1142   	; 0xa6a <disk_timerproc>
}
     5f4:	ff 91       	pop	r31
     5f6:	ef 91       	pop	r30
     5f8:	bf 91       	pop	r27
     5fa:	af 91       	pop	r26
     5fc:	9f 91       	pop	r25
     5fe:	8f 91       	pop	r24
     600:	7f 91       	pop	r23
     602:	6f 91       	pop	r22
     604:	5f 91       	pop	r21
     606:	4f 91       	pop	r20
     608:	3f 91       	pop	r19
     60a:	2f 91       	pop	r18
     60c:	0f 90       	pop	r0
     60e:	0b be       	out	0x3b, r0	; 59
     610:	0f 90       	pop	r0
     612:	0f be       	out	0x3f, r0	; 63
     614:	0f 90       	pop	r0
     616:	1f 90       	pop	r1
     618:	18 95       	reti

0000061a <main>:
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
	SetupHardware();
     61a:	5f df       	rcall	.-322    	; 0x4da <SetupHardware>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     61c:	8b b1       	in	r24, 0x0b	; 11
     61e:	8f 70       	andi	r24, 0x0F	; 15
     620:	80 61       	ori	r24, 0x10	; 16
     622:	8b b9       	out	0x0b, r24	; 11
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     624:	78 94       	sei

	GlobalInterruptEnable();

	for (;;)
	{
		MS_Device_USBTask(&Disk_MS_Interface);
     626:	83 ed       	ldi	r24, 0xD3	; 211
     628:	91 e0       	ldi	r25, 0x01	; 1
     62a:	0e 94 89 14 	call	0x2912	; 0x2912 <MS_Device_USBTask>
		HID_Device_USBTask(&Keyboard_HID_Interface);
     62e:	8c e0       	ldi	r24, 0x0C	; 12
     630:	92 e0       	ldi	r25, 0x02	; 2
     632:	0e 94 4f 12 	call	0x249e	; 0x249e <HID_Device_USBTask>
		USB_USBTask();
     636:	0e 94 3a 12 	call	0x2474	; 0x2474 <USB_USBTask>
     63a:	f5 cf       	rjmp	.-22     	; 0x626 <main+0xc>

0000063c <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint16_t wIndex,
                                    const void** const DescriptorAddress)
{
     63c:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     63e:	93 30       	cpi	r25, 0x03	; 3
     640:	b1 f0       	breq	.+44     	; 0x66e <CALLBACK_USB_GetDescriptor+0x32>
     642:	94 30       	cpi	r25, 0x04	; 4
     644:	28 f4       	brcc	.+10     	; 0x650 <CALLBACK_USB_GetDescriptor+0x14>
     646:	91 30       	cpi	r25, 0x01	; 1
     648:	41 f0       	breq	.+16     	; 0x65a <CALLBACK_USB_GetDescriptor+0x1e>
     64a:	92 30       	cpi	r25, 0x02	; 2
     64c:	79 f5       	brne	.+94     	; 0x6ac <CALLBACK_USB_GetDescriptor+0x70>
     64e:	0a c0       	rjmp	.+20     	; 0x664 <CALLBACK_USB_GetDescriptor+0x28>
     650:	91 32       	cpi	r25, 0x21	; 33
     652:	11 f1       	breq	.+68     	; 0x698 <CALLBACK_USB_GetDescriptor+0x5c>
     654:	92 32       	cpi	r25, 0x22	; 34
     656:	51 f5       	brne	.+84     	; 0x6ac <CALLBACK_USB_GetDescriptor+0x70>
     658:	24 c0       	rjmp	.+72     	; 0x6a2 <CALLBACK_USB_GetDescriptor+0x66>
     65a:	e0 e3       	ldi	r30, 0x30	; 48
     65c:	f2 e0       	ldi	r31, 0x02	; 2
     65e:	22 e1       	ldi	r18, 0x12	; 18
     660:	30 e0       	ldi	r19, 0x00	; 0
     662:	28 c0       	rjmp	.+80     	; 0x6b4 <CALLBACK_USB_GetDescriptor+0x78>
     664:	e2 e4       	ldi	r30, 0x42	; 66
     666:	f2 e0       	ldi	r31, 0x02	; 2
     668:	29 e3       	ldi	r18, 0x39	; 57
     66a:	30 e0       	ldi	r19, 0x00	; 0
     66c:	23 c0       	rjmp	.+70     	; 0x6b4 <CALLBACK_USB_GetDescriptor+0x78>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
     66e:	81 30       	cpi	r24, 0x01	; 1
     670:	49 f0       	breq	.+18     	; 0x684 <CALLBACK_USB_GetDescriptor+0x48>
     672:	81 30       	cpi	r24, 0x01	; 1
     674:	18 f0       	brcs	.+6      	; 0x67c <CALLBACK_USB_GetDescriptor+0x40>
     676:	82 30       	cpi	r24, 0x02	; 2
     678:	c9 f4       	brne	.+50     	; 0x6ac <CALLBACK_USB_GetDescriptor+0x70>
     67a:	0a c0       	rjmp	.+20     	; 0x690 <CALLBACK_USB_GetDescriptor+0x54>
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     67c:	eb e7       	ldi	r30, 0x7B	; 123
     67e:	f2 e0       	ldi	r31, 0x02	; 2
     680:	84 91       	lpm	r24, Z+
     682:	03 c0       	rjmp	.+6      	; 0x68a <CALLBACK_USB_GetDescriptor+0x4e>
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     684:	ef e7       	ldi	r30, 0x7F	; 127
     686:	f2 e0       	ldi	r31, 0x02	; 2
     688:	84 91       	lpm	r24, Z+
     68a:	28 2f       	mov	r18, r24
     68c:	30 e0       	ldi	r19, 0x00	; 0
     68e:	12 c0       	rjmp	.+36     	; 0x6b4 <CALLBACK_USB_GetDescriptor+0x78>
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     690:	e9 e9       	ldi	r30, 0x99	; 153
     692:	f2 e0       	ldi	r31, 0x02	; 2
     694:	84 91       	lpm	r24, Z+
     696:	f9 cf       	rjmp	.-14     	; 0x68a <CALLBACK_USB_GetDescriptor+0x4e>
     698:	eb e6       	ldi	r30, 0x6B	; 107
     69a:	f2 e0       	ldi	r31, 0x02	; 2
     69c:	29 e0       	ldi	r18, 0x09	; 9
     69e:	30 e0       	ldi	r19, 0x00	; 0
     6a0:	09 c0       	rjmp	.+18     	; 0x6b4 <CALLBACK_USB_GetDescriptor+0x78>

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_KeyboardHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
     6a2:	e0 ef       	ldi	r30, 0xF0	; 240
     6a4:	f1 e0       	ldi	r31, 0x01	; 1
     6a6:	20 e4       	ldi	r18, 0x40	; 64
     6a8:	30 e0       	ldi	r19, 0x00	; 0
     6aa:	04 c0       	rjmp	.+8      	; 0x6b4 <CALLBACK_USB_GetDescriptor+0x78>
     6ac:	e0 e0       	ldi	r30, 0x00	; 0
     6ae:	f0 e0       	ldi	r31, 0x00	; 0
     6b0:	20 e0       	ldi	r18, 0x00	; 0
     6b2:	30 e0       	ldi	r19, 0x00	; 0
			Address = &KeyboardReport;
			Size    = sizeof(KeyboardReport);
			break;
	}

	*DescriptorAddress = Address;
     6b4:	ed 93       	st	X+, r30
     6b6:	fc 93       	st	X, r31
	return Size;
}
     6b8:	c9 01       	movw	r24, r18
     6ba:	08 95       	ret

000006bc <SDCardManager_CheckDataflashOperation>:
 *  \return Boolean true if all media chips are working, false otherwise
 */
bool SDCardManager_CheckDataflashOperation(void)
{	
	return true;
}
     6bc:	81 e0       	ldi	r24, 0x01	; 1
     6be:	08 95       	ret

000006c0 <SDCardManager_WriteBlockHandler>:
	
	return CachedTotalBlocks;
}

uintptr_t SDCardManager_WriteBlockHandler(uint8_t* buff_to_write, void* a, void* p)
{
     6c0:	cf 93       	push	r28
     6c2:	df 93       	push	r29
     6c4:	ec 01       	movw	r28, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     6c6:	80 91 e8 00 	lds	r24, 0x00E8
	/* Check if the endpoint is currently empty */
	if (!(Endpoint_IsReadWriteAllowed()))
     6ca:	85 fd       	sbrc	r24, 5
     6cc:	0c c0       	rjmp	.+24     	; 0x6e6 <SDCardManager_WriteBlockHandler+0x26>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     6ce:	80 91 e8 00 	lds	r24, 0x00E8
     6d2:	8b 77       	andi	r24, 0x7B	; 123
     6d4:	80 93 e8 00 	sts	0x00E8, r24
	{
		/* Clear the current endpoint bank */
		Endpoint_ClearOUT();
		
		/* Wait until the host has sent another packet */
		if (Endpoint_WaitUntilReady())
     6d8:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <Endpoint_WaitUntilReady>
     6dc:	88 23       	and	r24, r24
     6de:	19 f0       	breq	.+6      	; 0x6e6 <SDCardManager_WriteBlockHandler+0x26>
     6e0:	20 e0       	ldi	r18, 0x00	; 0
     6e2:	30 e0       	ldi	r19, 0x00	; 0
     6e4:	32 c0       	rjmp	.+100    	; 0x74a <SDCardManager_WriteBlockHandler+0x8a>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     6e6:	80 91 f1 00 	lds	r24, 0x00F1
		  return 0;
	}
	
	/* Write one 16-byte chunk of data to the dataflash */
	buff_to_write[0] = Endpoint_Read_8();
     6ea:	88 83       	st	Y, r24
     6ec:	80 91 f1 00 	lds	r24, 0x00F1
	buff_to_write[1] = Endpoint_Read_8();
     6f0:	89 83       	std	Y+1, r24	; 0x01
     6f2:	80 91 f1 00 	lds	r24, 0x00F1
	buff_to_write[2] = Endpoint_Read_8();
     6f6:	8a 83       	std	Y+2, r24	; 0x02
     6f8:	80 91 f1 00 	lds	r24, 0x00F1
	buff_to_write[3] = Endpoint_Read_8();
     6fc:	8b 83       	std	Y+3, r24	; 0x03
     6fe:	80 91 f1 00 	lds	r24, 0x00F1
	buff_to_write[4] = Endpoint_Read_8();
     702:	8c 83       	std	Y+4, r24	; 0x04
     704:	80 91 f1 00 	lds	r24, 0x00F1
	buff_to_write[5] = Endpoint_Read_8();
     708:	8d 83       	std	Y+5, r24	; 0x05
     70a:	80 91 f1 00 	lds	r24, 0x00F1
	buff_to_write[6] = Endpoint_Read_8();
     70e:	8e 83       	std	Y+6, r24	; 0x06
     710:	80 91 f1 00 	lds	r24, 0x00F1
	buff_to_write[7] = Endpoint_Read_8();
     714:	8f 83       	std	Y+7, r24	; 0x07
     716:	80 91 f1 00 	lds	r24, 0x00F1
	buff_to_write[8] = Endpoint_Read_8();
     71a:	88 87       	std	Y+8, r24	; 0x08
     71c:	80 91 f1 00 	lds	r24, 0x00F1
	buff_to_write[9] = Endpoint_Read_8();
     720:	89 87       	std	Y+9, r24	; 0x09
     722:	80 91 f1 00 	lds	r24, 0x00F1
	buff_to_write[10] = Endpoint_Read_8();
     726:	8a 87       	std	Y+10, r24	; 0x0a
     728:	80 91 f1 00 	lds	r24, 0x00F1
	buff_to_write[11] = Endpoint_Read_8();
     72c:	8b 87       	std	Y+11, r24	; 0x0b
     72e:	80 91 f1 00 	lds	r24, 0x00F1
	buff_to_write[12] = Endpoint_Read_8();
     732:	8c 87       	std	Y+12, r24	; 0x0c
     734:	80 91 f1 00 	lds	r24, 0x00F1
	buff_to_write[13] = Endpoint_Read_8();
     738:	8d 87       	std	Y+13, r24	; 0x0d
     73a:	80 91 f1 00 	lds	r24, 0x00F1
	buff_to_write[14] = Endpoint_Read_8();
     73e:	8e 87       	std	Y+14, r24	; 0x0e
     740:	80 91 f1 00 	lds	r24, 0x00F1
	buff_to_write[15] = Endpoint_Read_8();
     744:	8f 87       	std	Y+15, r24	; 0x0f
     746:	20 e1       	ldi	r18, 0x10	; 16
     748:	30 e0       	ldi	r19, 0x00	; 0
	
	return 16;
}
     74a:	c9 01       	movw	r24, r18
     74c:	df 91       	pop	r29
     74e:	cf 91       	pop	r28
     750:	08 95       	ret

00000752 <SDCardManager_ReadBlocks>:
	
	return 1;
}

void SDCardManager_ReadBlocks(USB_ClassInfo_MS_Device_t* MSInterfaceInfo, uint32_t BlockAddress, uint16_t TotalBlocks)
{
     752:	af 92       	push	r10
     754:	bf 92       	push	r11
     756:	cf 92       	push	r12
     758:	df 92       	push	r13
     75a:	ef 92       	push	r14
     75c:	ff 92       	push	r15
     75e:	0f 93       	push	r16
     760:	1f 93       	push	r17
     762:	cf 93       	push	r28
     764:	df 93       	push	r29
     766:	6a 01       	movw	r12, r20
     768:	7b 01       	movw	r14, r22
     76a:	59 01       	movw	r10, r18
	static uint8_t buff_rd[512];
	int i;
	
	printf_P(PSTR("R %li %i\r\n"), BlockAddress, TotalBlocks);
     76c:	8d b7       	in	r24, 0x3d	; 61
     76e:	9e b7       	in	r25, 0x3e	; 62
     770:	08 97       	sbiw	r24, 0x08	; 8
     772:	0f b6       	in	r0, 0x3f	; 63
     774:	f8 94       	cli
     776:	9e bf       	out	0x3e, r25	; 62
     778:	0f be       	out	0x3f, r0	; 63
     77a:	8d bf       	out	0x3d, r24	; 61
     77c:	ed b7       	in	r30, 0x3d	; 61
     77e:	fe b7       	in	r31, 0x3e	; 62
     780:	31 96       	adiw	r30, 0x01	; 1
     782:	83 ee       	ldi	r24, 0xE3	; 227
     784:	92 e0       	ldi	r25, 0x02	; 2
     786:	ad b7       	in	r26, 0x3d	; 61
     788:	be b7       	in	r27, 0x3e	; 62
     78a:	12 96       	adiw	r26, 0x02	; 2
     78c:	9c 93       	st	X, r25
     78e:	8e 93       	st	-X, r24
     790:	11 97       	sbiw	r26, 0x01	; 1
     792:	42 83       	std	Z+2, r20	; 0x02
     794:	53 83       	std	Z+3, r21	; 0x03
     796:	64 83       	std	Z+4, r22	; 0x04
     798:	75 83       	std	Z+5, r23	; 0x05
     79a:	37 83       	std	Z+7, r19	; 0x07
     79c:	26 83       	std	Z+6, r18	; 0x06
     79e:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <printf_P>
	
	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
     7a2:	8d b7       	in	r24, 0x3d	; 61
     7a4:	9e b7       	in	r25, 0x3e	; 62
     7a6:	08 96       	adiw	r24, 0x08	; 8
     7a8:	0f b6       	in	r0, 0x3f	; 63
     7aa:	f8 94       	cli
     7ac:	9e bf       	out	0x3e, r25	; 62
     7ae:	0f be       	out	0x3f, r0	; 63
     7b0:	8d bf       	out	0x3d, r24	; 61
     7b2:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <Endpoint_WaitUntilReady>
     7b6:	88 23       	and	r24, r24
     7b8:	09 f4       	brne	.+2      	; 0x7bc <SDCardManager_ReadBlocks+0x6a>
     7ba:	56 c0       	rjmp	.+172    	; 0x868 <SDCardManager_ReadBlocks+0x116>
     7bc:	62 c0       	rjmp	.+196    	; 0x882 <SDCardManager_ReadBlocks+0x130>
	  return;
	
	while (TotalBlocks)
	{
		disk_read(0, buff_rd, BlockAddress, 1);
     7be:	80 e0       	ldi	r24, 0x00	; 0
     7c0:	6c e5       	ldi	r22, 0x5C	; 92
     7c2:	72 e0       	ldi	r23, 0x02	; 2
     7c4:	a7 01       	movw	r20, r14
     7c6:	96 01       	movw	r18, r12
     7c8:	01 e0       	ldi	r16, 0x01	; 1
     7ca:	10 e0       	ldi	r17, 0x00	; 0
     7cc:	65 d1       	rcall	.+714    	; 0xa98 <disk_read>
     7ce:	cc e5       	ldi	r28, 0x5C	; 92
     7d0:	d2 e0       	ldi	r29, 0x02	; 2
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     7d2:	80 91 e8 00 	lds	r24, 0x00E8
}

static inline uint8_t SDCardManager_ReadBlockHandler(uint8_t* buffer, void* a, void* p)
{
	/* Check if the endpoint is currently full */
	if (!(Endpoint_IsReadWriteAllowed()))
     7d6:	85 fd       	sbrc	r24, 5
     7d8:	09 c0       	rjmp	.+18     	; 0x7ec <SDCardManager_ReadBlocks+0x9a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     7da:	80 91 e8 00 	lds	r24, 0x00E8
     7de:	8e 77       	andi	r24, 0x7E	; 126
     7e0:	80 93 e8 00 	sts	0x00E8, r24
	{
		/* Clear the endpoint bank to send its contents to the host */
		Endpoint_ClearIN();
		
		/* Wait until the endpoint is ready for more data */
		if (Endpoint_WaitUntilReady())
     7e4:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <Endpoint_WaitUntilReady>
     7e8:	88 23       	and	r24, r24
     7ea:	81 f5       	brne	.+96     	; 0x84c <SDCardManager_ReadBlocks+0xfa>
		  return 0;
	}
		
	Endpoint_Write_8(buffer[0]);
     7ec:	88 81       	ld	r24, Y
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     7ee:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(buffer[1]);
     7f2:	89 81       	ldd	r24, Y+1	; 0x01
     7f4:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(buffer[2]);
     7f8:	8a 81       	ldd	r24, Y+2	; 0x02
     7fa:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(buffer[3]);
     7fe:	8b 81       	ldd	r24, Y+3	; 0x03
     800:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(buffer[4]);
     804:	8c 81       	ldd	r24, Y+4	; 0x04
     806:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(buffer[5]);
     80a:	8d 81       	ldd	r24, Y+5	; 0x05
     80c:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(buffer[6]);
     810:	8e 81       	ldd	r24, Y+6	; 0x06
     812:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(buffer[7]);
     816:	8f 81       	ldd	r24, Y+7	; 0x07
     818:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(buffer[8]);
     81c:	88 85       	ldd	r24, Y+8	; 0x08
     81e:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(buffer[9]);
     822:	89 85       	ldd	r24, Y+9	; 0x09
     824:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(buffer[10]);
     828:	8a 85       	ldd	r24, Y+10	; 0x0a
     82a:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(buffer[11]);
     82e:	8b 85       	ldd	r24, Y+11	; 0x0b
     830:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(buffer[12]);
     834:	8c 85       	ldd	r24, Y+12	; 0x0c
     836:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(buffer[13]);
     83a:	8d 85       	ldd	r24, Y+13	; 0x0d
     83c:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(buffer[14]);
     840:	8e 85       	ldd	r24, Y+14	; 0x0e
     842:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(buffer[15]);
     846:	8f 85       	ldd	r24, Y+15	; 0x0f
     848:	80 93 f1 00 	sts	0x00F1, r24
     84c:	60 96       	adiw	r28, 0x10	; 16
	  return;
	
	while (TotalBlocks)
	{
		disk_read(0, buff_rd, BlockAddress, 1);
		for (i = 0; i < 32; i++)
     84e:	94 e0       	ldi	r25, 0x04	; 4
     850:	cc 35       	cpi	r28, 0x5C	; 92
     852:	d9 07       	cpc	r29, r25
     854:	09 f0       	breq	.+2      	; 0x858 <SDCardManager_ReadBlocks+0x106>
     856:	bd cf       	rjmp	.-134    	; 0x7d2 <SDCardManager_ReadBlocks+0x80>
		{
			SDCardManager_ReadBlockHandler(buff_rd + (16 * i), NULL, NULL);	
		}
		/* Decrement the blocks remaining counter */
		BlockAddress++;
     858:	08 94       	sec
     85a:	c1 1c       	adc	r12, r1
     85c:	d1 1c       	adc	r13, r1
     85e:	e1 1c       	adc	r14, r1
     860:	f1 1c       	adc	r15, r1
		TotalBlocks--;
     862:	08 94       	sec
     864:	a1 08       	sbc	r10, r1
     866:	b1 08       	sbc	r11, r1
	
	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;
	
	while (TotalBlocks)
     868:	a1 14       	cp	r10, r1
     86a:	b1 04       	cpc	r11, r1
     86c:	09 f0       	breq	.+2      	; 0x870 <SDCardManager_ReadBlocks+0x11e>
     86e:	a7 cf       	rjmp	.-178    	; 0x7be <SDCardManager_ReadBlocks+0x6c>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     870:	80 91 e8 00 	lds	r24, 0x00E8
		BlockAddress++;
		TotalBlocks--;
	}
	
	/* If the endpoint is full, send its contents to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
     874:	85 fd       	sbrc	r24, 5
     876:	05 c0       	rjmp	.+10     	; 0x882 <SDCardManager_ReadBlocks+0x130>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     878:	80 91 e8 00 	lds	r24, 0x00E8
     87c:	8e 77       	andi	r24, 0x7E	; 126
     87e:	80 93 e8 00 	sts	0x00E8, r24
	  Endpoint_ClearIN();
}
     882:	df 91       	pop	r29
     884:	cf 91       	pop	r28
     886:	1f 91       	pop	r17
     888:	0f 91       	pop	r16
     88a:	ff 90       	pop	r15
     88c:	ef 90       	pop	r14
     88e:	df 90       	pop	r13
     890:	cf 90       	pop	r12
     892:	bf 90       	pop	r11
     894:	af 90       	pop	r10
     896:	08 95       	ret

00000898 <SDCardManager_WriteBlocks>:
	
	return 16;
}

void SDCardManager_WriteBlocks(USB_ClassInfo_MS_Device_t* MSInterfaceInfo, uint32_t BlockAddress, uint16_t TotalBlocks)
{
     898:	af 92       	push	r10
     89a:	bf 92       	push	r11
     89c:	cf 92       	push	r12
     89e:	df 92       	push	r13
     8a0:	ef 92       	push	r14
     8a2:	ff 92       	push	r15
     8a4:	0f 93       	push	r16
     8a6:	1f 93       	push	r17
     8a8:	cf 93       	push	r28
     8aa:	df 93       	push	r29
     8ac:	5c 01       	movw	r10, r24
     8ae:	6a 01       	movw	r12, r20
     8b0:	7b 01       	movw	r14, r22
     8b2:	e9 01       	movw	r28, r18
	int i;
	static uint8_t buff_to_write[512];
	
	printf_P(PSTR("W %li %i\r\n"), BlockAddress, TotalBlocks);
     8b4:	8d b7       	in	r24, 0x3d	; 61
     8b6:	9e b7       	in	r25, 0x3e	; 62
     8b8:	08 97       	sbiw	r24, 0x08	; 8
     8ba:	0f b6       	in	r0, 0x3f	; 63
     8bc:	f8 94       	cli
     8be:	9e bf       	out	0x3e, r25	; 62
     8c0:	0f be       	out	0x3f, r0	; 63
     8c2:	8d bf       	out	0x3d, r24	; 61
     8c4:	ed b7       	in	r30, 0x3d	; 61
     8c6:	fe b7       	in	r31, 0x3e	; 62
     8c8:	31 96       	adiw	r30, 0x01	; 1
     8ca:	8e ee       	ldi	r24, 0xEE	; 238
     8cc:	92 e0       	ldi	r25, 0x02	; 2
     8ce:	ad b7       	in	r26, 0x3d	; 61
     8d0:	be b7       	in	r27, 0x3e	; 62
     8d2:	12 96       	adiw	r26, 0x02	; 2
     8d4:	9c 93       	st	X, r25
     8d6:	8e 93       	st	-X, r24
     8d8:	11 97       	sbiw	r26, 0x01	; 1
     8da:	42 83       	std	Z+2, r20	; 0x02
     8dc:	53 83       	std	Z+3, r21	; 0x03
     8de:	64 83       	std	Z+4, r22	; 0x04
     8e0:	75 83       	std	Z+5, r23	; 0x05
     8e2:	37 83       	std	Z+7, r19	; 0x07
     8e4:	26 83       	std	Z+6, r18	; 0x06
     8e6:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <printf_P>

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
     8ea:	ed b7       	in	r30, 0x3d	; 61
     8ec:	fe b7       	in	r31, 0x3e	; 62
     8ee:	38 96       	adiw	r30, 0x08	; 8
     8f0:	0f b6       	in	r0, 0x3f	; 63
     8f2:	f8 94       	cli
     8f4:	fe bf       	out	0x3e, r31	; 62
     8f6:	0f be       	out	0x3f, r0	; 63
     8f8:	ed bf       	out	0x3d, r30	; 61
     8fa:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <Endpoint_WaitUntilReady>
     8fe:	88 23       	and	r24, r24
     900:	01 f1       	breq	.+64     	; 0x942 <SDCardManager_WriteBlocks+0xaa>
     902:	2d c0       	rjmp	.+90     	; 0x95e <SDCardManager_WriteBlocks+0xc6>
	
	while (TotalBlocks)
	{
		for (i = 0; i < 32; i++)
		{
			SDCardManager_WriteBlockHandler(buff_to_write + (16 * i), NULL, NULL);	
     904:	c8 01       	movw	r24, r16
     906:	60 e0       	ldi	r22, 0x00	; 0
     908:	70 e0       	ldi	r23, 0x00	; 0
     90a:	40 e0       	ldi	r20, 0x00	; 0
     90c:	50 e0       	ldi	r21, 0x00	; 0
     90e:	d8 de       	rcall	.-592    	; 0x6c0 <SDCardManager_WriteBlockHandler>
     910:	00 5f       	subi	r16, 0xF0	; 240
     912:	1f 4f       	sbci	r17, 0xFF	; 255
	if (Endpoint_WaitUntilReady())
	  return;
	
	while (TotalBlocks)
	{
		for (i = 0; i < 32; i++)
     914:	f6 e0       	ldi	r31, 0x06	; 6
     916:	0c 35       	cpi	r16, 0x5C	; 92
     918:	1f 07       	cpc	r17, r31
     91a:	a1 f7       	brne	.-24     	; 0x904 <SDCardManager_WriteBlocks+0x6c>
		{
			SDCardManager_WriteBlockHandler(buff_to_write + (16 * i), NULL, NULL);	
		}
		
		disk_write(0, buff_to_write, BlockAddress, 1);
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	6c e5       	ldi	r22, 0x5C	; 92
     920:	74 e0       	ldi	r23, 0x04	; 4
     922:	a7 01       	movw	r20, r14
     924:	96 01       	movw	r18, r12
     926:	01 e0       	ldi	r16, 0x01	; 1
     928:	10 e0       	ldi	r17, 0x00	; 0
     92a:	a8 d0       	rcall	.+336    	; 0xa7c <disk_write>
				
		/* Check if the current command is being aborted by the host */
		if (MSInterfaceInfo->State.IsMassStoreReset)
     92c:	d5 01       	movw	r26, r10
     92e:	d8 96       	adiw	r26, 0x38	; 56
     930:	8c 91       	ld	r24, X
     932:	88 23       	and	r24, r24
     934:	a1 f4       	brne	.+40     	; 0x95e <SDCardManager_WriteBlocks+0xc6>
		  return;
			
		/* Decrement the blocks remaining counter and reset the sub block counter */
		BlockAddress++;
     936:	08 94       	sec
     938:	c1 1c       	adc	r12, r1
     93a:	d1 1c       	adc	r13, r1
     93c:	e1 1c       	adc	r14, r1
     93e:	f1 1c       	adc	r15, r1
		TotalBlocks--;
     940:	21 97       	sbiw	r28, 0x01	; 1

	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;
	
	while (TotalBlocks)
     942:	20 97       	sbiw	r28, 0x00	; 0
     944:	19 f0       	breq	.+6      	; 0x94c <SDCardManager_WriteBlocks+0xb4>
     946:	0c e5       	ldi	r16, 0x5C	; 92
     948:	14 e0       	ldi	r17, 0x04	; 4
     94a:	dc cf       	rjmp	.-72     	; 0x904 <SDCardManager_WriteBlocks+0x6c>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     94c:	80 91 e8 00 	lds	r24, 0x00E8
		BlockAddress++;
		TotalBlocks--;
	}

	/* If the endpoint is empty, clear it ready for the next packet from the host */
	if (!(Endpoint_IsReadWriteAllowed()))
     950:	85 fd       	sbrc	r24, 5
     952:	05 c0       	rjmp	.+10     	; 0x95e <SDCardManager_WriteBlocks+0xc6>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     954:	80 91 e8 00 	lds	r24, 0x00E8
     958:	8b 77       	andi	r24, 0x7B	; 123
     95a:	80 93 e8 00 	sts	0x00E8, r24
	  Endpoint_ClearOUT();
}
     95e:	df 91       	pop	r29
     960:	cf 91       	pop	r28
     962:	1f 91       	pop	r17
     964:	0f 91       	pop	r16
     966:	ff 90       	pop	r15
     968:	ef 90       	pop	r14
     96a:	df 90       	pop	r13
     96c:	cf 90       	pop	r12
     96e:	bf 90       	pop	r11
     970:	af 90       	pop	r10
     972:	08 95       	ret

00000974 <SDCardManager_GetNbBlocks>:

	printf_P(PSTR("disk_initialize success\r\n"));
}

uint32_t SDCardManager_GetNbBlocks(void)
{
     974:	df 93       	push	r29
     976:	cf 93       	push	r28
     978:	00 d0       	rcall	.+0      	; 0x97a <SDCardManager_GetNbBlocks+0x6>
     97a:	00 d0       	rcall	.+0      	; 0x97c <SDCardManager_GetNbBlocks+0x8>
     97c:	cd b7       	in	r28, 0x3d	; 61
     97e:	de b7       	in	r29, 0x3e	; 62
	DWORD ioct_rsp = 0;
	
	if (CachedTotalBlocks != 0)
     980:	20 91 5c 06 	lds	r18, 0x065C
     984:	30 91 5d 06 	lds	r19, 0x065D
     988:	40 91 5e 06 	lds	r20, 0x065E
     98c:	50 91 5f 06 	lds	r21, 0x065F
     990:	21 15       	cp	r18, r1
     992:	31 05       	cpc	r19, r1
     994:	41 05       	cpc	r20, r1
     996:	51 05       	cpc	r21, r1
     998:	a9 f5       	brne	.+106    	; 0xa04 <SDCardManager_GetNbBlocks+0x90>
	printf_P(PSTR("disk_initialize success\r\n"));
}

uint32_t SDCardManager_GetNbBlocks(void)
{
	DWORD ioct_rsp = 0;
     99a:	19 82       	std	Y+1, r1	; 0x01
     99c:	1a 82       	std	Y+2, r1	; 0x02
     99e:	1b 82       	std	Y+3, r1	; 0x03
     9a0:	1c 82       	std	Y+4, r1	; 0x04
	
	if (CachedTotalBlocks != 0)
		return CachedTotalBlocks;
		
	disk_ioctl(0, GET_SECTOR_COUNT, &ioct_rsp);
     9a2:	80 e0       	ldi	r24, 0x00	; 0
     9a4:	61 e0       	ldi	r22, 0x01	; 1
     9a6:	ae 01       	movw	r20, r28
     9a8:	4f 5f       	subi	r20, 0xFF	; 255
     9aa:	5f 4f       	sbci	r21, 0xFF	; 255
     9ac:	60 d0       	rcall	.+192    	; 0xa6e <disk_ioctl>

	CachedTotalBlocks = ioct_rsp;
     9ae:	29 81       	ldd	r18, Y+1	; 0x01
     9b0:	3a 81       	ldd	r19, Y+2	; 0x02
     9b2:	4b 81       	ldd	r20, Y+3	; 0x03
     9b4:	5c 81       	ldd	r21, Y+4	; 0x04
     9b6:	20 93 5c 06 	sts	0x065C, r18
     9ba:	30 93 5d 06 	sts	0x065D, r19
     9be:	40 93 5e 06 	sts	0x065E, r20
     9c2:	50 93 5f 06 	sts	0x065F, r21
	printf_P(PSTR("SD blocks: %li\r\n"), CachedTotalBlocks);
     9c6:	00 d0       	rcall	.+0      	; 0x9c8 <SDCardManager_GetNbBlocks+0x54>
     9c8:	00 d0       	rcall	.+0      	; 0x9ca <SDCardManager_GetNbBlocks+0x56>
     9ca:	00 d0       	rcall	.+0      	; 0x9cc <SDCardManager_GetNbBlocks+0x58>
     9cc:	89 ef       	ldi	r24, 0xF9	; 249
     9ce:	92 e0       	ldi	r25, 0x02	; 2
     9d0:	ed b7       	in	r30, 0x3d	; 61
     9d2:	fe b7       	in	r31, 0x3e	; 62
     9d4:	92 83       	std	Z+2, r25	; 0x02
     9d6:	81 83       	std	Z+1, r24	; 0x01
     9d8:	23 83       	std	Z+3, r18	; 0x03
     9da:	34 83       	std	Z+4, r19	; 0x04
     9dc:	45 83       	std	Z+5, r20	; 0x05
     9de:	56 83       	std	Z+6, r21	; 0x06
     9e0:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <printf_P>
	
	return CachedTotalBlocks;
     9e4:	20 91 5c 06 	lds	r18, 0x065C
     9e8:	30 91 5d 06 	lds	r19, 0x065D
     9ec:	40 91 5e 06 	lds	r20, 0x065E
     9f0:	50 91 5f 06 	lds	r21, 0x065F
     9f4:	8d b7       	in	r24, 0x3d	; 61
     9f6:	9e b7       	in	r25, 0x3e	; 62
     9f8:	06 96       	adiw	r24, 0x06	; 6
     9fa:	0f b6       	in	r0, 0x3f	; 63
     9fc:	f8 94       	cli
     9fe:	9e bf       	out	0x3e, r25	; 62
     a00:	0f be       	out	0x3f, r0	; 63
     a02:	8d bf       	out	0x3d, r24	; 61
}
     a04:	b9 01       	movw	r22, r18
     a06:	ca 01       	movw	r24, r20
     a08:	0f 90       	pop	r0
     a0a:	0f 90       	pop	r0
     a0c:	0f 90       	pop	r0
     a0e:	0f 90       	pop	r0
     a10:	cf 91       	pop	r28
     a12:	df 91       	pop	r29
     a14:	08 95       	ret

00000a16 <SDCardManager_Init>:
#include "diskio.h"

static uint32_t CachedTotalBlocks = 0;

void SDCardManager_Init(void)
{
     a16:	cf 93       	push	r28
     a18:	df 93       	push	r29
	printf_P(PSTR("\r\n\r\n"));
     a1a:	00 d0       	rcall	.+0      	; 0xa1c <SDCardManager_Init+0x6>
     a1c:	81 e4       	ldi	r24, 0x41	; 65
     a1e:	93 e0       	ldi	r25, 0x03	; 3
     a20:	ed b7       	in	r30, 0x3d	; 61
     a22:	fe b7       	in	r31, 0x3e	; 62
     a24:	92 83       	std	Z+2, r25	; 0x02
     a26:	81 83       	std	Z+1, r24	; 0x01
     a28:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <printf_P>
     a2c:	0f 90       	pop	r0
     a2e:	0f 90       	pop	r0
	do
	{
		printf_P(PSTR("trying ... disk_initialize\r\n"));
     a30:	c4 e2       	ldi	r28, 0x24	; 36
     a32:	d3 e0       	ldi	r29, 0x03	; 3
     a34:	00 d0       	rcall	.+0      	; 0xa36 <SDCardManager_Init+0x20>
     a36:	ed b7       	in	r30, 0x3d	; 61
     a38:	fe b7       	in	r31, 0x3e	; 62
     a3a:	d2 83       	std	Z+2, r29	; 0x02
     a3c:	c1 83       	std	Z+1, r28	; 0x01
     a3e:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <printf_P>
	} while(disk_initialize(0) != FR_OK);
     a42:	0f 90       	pop	r0
     a44:	0f 90       	pop	r0
     a46:	80 e0       	ldi	r24, 0x00	; 0
     a48:	35 d0       	rcall	.+106    	; 0xab4 <disk_initialize>
     a4a:	88 23       	and	r24, r24
     a4c:	99 f7       	brne	.-26     	; 0xa34 <SDCardManager_Init+0x1e>

	printf_P(PSTR("disk_initialize success\r\n"));
     a4e:	00 d0       	rcall	.+0      	; 0xa50 <SDCardManager_Init+0x3a>
     a50:	8a e0       	ldi	r24, 0x0A	; 10
     a52:	93 e0       	ldi	r25, 0x03	; 3
     a54:	ed b7       	in	r30, 0x3d	; 61
     a56:	fe b7       	in	r31, 0x3e	; 62
     a58:	92 83       	std	Z+2, r25	; 0x02
     a5a:	81 83       	std	Z+1, r24	; 0x01
     a5c:	0e 94 3f 16 	call	0x2c7e	; 0x2c7e <printf_P>
     a60:	0f 90       	pop	r0
     a62:	0f 90       	pop	r0
}
     a64:	df 91       	pop	r29
     a66:	cf 91       	pop	r28
     a68:	08 95       	ret

00000a6a <disk_timerproc>:
{
#ifdef DRV_CFC
	cf_disk_timerproc();
#endif
#ifdef DRV_MMC
	mmc_disk_timerproc();
     a6a:	3e c5       	rjmp	.+2684   	; 0x14e8 <mmc_disk_timerproc>
#endif
}
     a6c:	08 95       	ret

00000a6e <disk_ioctl>:
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
	switch (pdrv) {
     a6e:	88 23       	and	r24, r24
     a70:	11 f0       	breq	.+4      	; 0xa76 <disk_ioctl+0x8>
     a72:	84 e0       	ldi	r24, 0x04	; 4
     a74:	08 95       	ret
	case DRV_CFC :
		return cf_disk_ioctl(cmd, buff);
#endif
#ifdef DRV_MMC
	case DRV_MMC :
		return mmc_disk_ioctl(cmd, buff);
     a76:	86 2f       	mov	r24, r22
     a78:	ba 01       	movw	r22, r20
#endif
	}
	return RES_PARERR;
}
     a7a:	5d c2       	rjmp	.+1210   	; 0xf36 <mmc_disk_ioctl>

00000a7c <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count			/* Number of sectors to write */
)
{
     a7c:	0f 93       	push	r16
     a7e:	1f 93       	push	r17
	switch (pdrv) {
     a80:	88 23       	and	r24, r24
     a82:	11 f0       	breq	.+4      	; 0xa88 <disk_write+0xc>
     a84:	84 e0       	ldi	r24, 0x04	; 4
     a86:	05 c0       	rjmp	.+10     	; 0xa92 <disk_write+0x16>
	case DRV_CFC :
		return cf_disk_write(buff, sector, count);
#endif
#ifdef DRV_MMC
	case DRV_MMC :
		return mmc_disk_write(buff, sector, count);
     a88:	cb 01       	movw	r24, r22
     a8a:	ba 01       	movw	r22, r20
     a8c:	a9 01       	movw	r20, r18
     a8e:	98 01       	movw	r18, r16
     a90:	e7 d1       	rcall	.+974    	; 0xe60 <mmc_disk_write>
#endif
	}
	return RES_PARERR;
}
     a92:	1f 91       	pop	r17
     a94:	0f 91       	pop	r16
     a96:	08 95       	ret

00000a98 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	/* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
     a98:	0f 93       	push	r16
     a9a:	1f 93       	push	r17
	switch (pdrv) {
     a9c:	88 23       	and	r24, r24
     a9e:	11 f0       	breq	.+4      	; 0xaa4 <disk_read+0xc>
     aa0:	84 e0       	ldi	r24, 0x04	; 4
     aa2:	05 c0       	rjmp	.+10     	; 0xaae <disk_read+0x16>
	case DRV_CFC :
		return cf_disk_read(buff, sector, count);
#endif
#ifdef DRV_MMC
	case DRV_MMC :
		return mmc_disk_read(buff, sector, count);
     aa4:	cb 01       	movw	r24, r22
     aa6:	ba 01       	movw	r22, r20
     aa8:	a9 01       	movw	r20, r18
     aaa:	98 01       	movw	r18, r16
     aac:	91 d1       	rcall	.+802    	; 0xdd0 <mmc_disk_read>
#endif
	}
	return RES_PARERR;
}
     aae:	1f 91       	pop	r17
     ab0:	0f 91       	pop	r16
     ab2:	08 95       	ret

00000ab4 <disk_initialize>:

DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
	switch (pdrv) {
     ab4:	88 23       	and	r24, r24
     ab6:	11 f0       	breq	.+4      	; 0xabc <disk_initialize+0x8>
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	08 95       	ret
	case DRV_MMC :
		return mmc_disk_initialize();
#endif
	}
	return STA_NOINIT;
}
     abc:	eb c0       	rjmp	.+470    	; 0xc94 <mmc_disk_initialize>

00000abe <power_off>:

static
void power_off (void)
{
	/* Disable SPI function */
	SPCR = 0;
     abe:	1c bc       	out	0x2c, r1	; 44


	/* De-configure MOSI/MISO/SCLK/CS pins (set hi-z) */
	// Set SCK/MOSI/CS as hi-z, INS#/WP as pull-up
	// CHECK THIS
	DDR_SPI &= ~(1<<DD_MOSI)|(1<<DD_SCK)|(1<<DD_CS);    
     ac0:	22 98       	cbi	0x04, 2	; 4
	PORT_SPI &= ~(1<<DD_MOSI)|(1<<DD_SCK)|(1<<DD_CS);     
     ac2:	2a 98       	cbi	0x05, 2	; 5


	/* Trun socket power off (nothing to do if no power controls) */
	//To be filled
}
     ac4:	08 95       	ret

00000ac6 <xchg_spi>:
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
     ac6:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
     ac8:	0d b4       	in	r0, 0x2d	; 45
     aca:	07 fe       	sbrs	r0, 7
     acc:	fd cf       	rjmp	.-6      	; 0xac8 <xchg_spi+0x2>
	return SPDR;
     ace:	8e b5       	in	r24, 0x2e	; 46
}
     ad0:	08 95       	ret

00000ad2 <wait_ready>:
)
{
	BYTE d;


	Timer2 = wt / 10;
     ad2:	6a e0       	ldi	r22, 0x0A	; 10
     ad4:	70 e0       	ldi	r23, 0x00	; 0
     ad6:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <__udivmodhi4>
     ada:	60 93 61 06 	sts	0x0661, r22
	do
		d = xchg_spi(0xFF);
     ade:	8f ef       	ldi	r24, 0xFF	; 255
     ae0:	f2 df       	rcall	.-28     	; 0xac6 <xchg_spi>
     ae2:	98 2f       	mov	r25, r24

		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */

	while (d != 0xFF && Timer2);
     ae4:	8f 3f       	cpi	r24, 0xFF	; 255
     ae6:	21 f0       	breq	.+8      	; 0xaf0 <wait_ready+0x1e>
     ae8:	80 91 61 06 	lds	r24, 0x0661
     aec:	88 23       	and	r24, r24
     aee:	b9 f7       	brne	.-18     	; 0xade <wait_ready+0xc>
     af0:	20 e0       	ldi	r18, 0x00	; 0
     af2:	30 e0       	ldi	r19, 0x00	; 0
     af4:	9f 3f       	cpi	r25, 0xFF	; 255
     af6:	11 f4       	brne	.+4      	; 0xafc <wait_ready+0x2a>
     af8:	21 e0       	ldi	r18, 0x01	; 1
     afa:	30 e0       	ldi	r19, 0x00	; 0

	return (d == 0xFF) ? 1 : 0;
}
     afc:	c9 01       	movw	r24, r18
     afe:	08 95       	ret

00000b00 <deselect>:
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();		/* Set CS# high */
     b00:	28 9a       	sbi	0x05, 0	; 5
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
     b02:	8f ef       	ldi	r24, 0xFF	; 255
}
     b04:	e0 cf       	rjmp	.-64     	; 0xac6 <xchg_spi>

00000b06 <select>:
/*-----------------------------------------------------------------------*/

static
int select (void)	/* 1:Successful, 0:Timeout */
{
	CS_LOW();		/* Set CS# low */
     b06:	28 98       	cbi	0x05, 0	; 5
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
     b08:	8f ef       	ldi	r24, 0xFF	; 255
     b0a:	dd df       	rcall	.-70     	; 0xac6 <xchg_spi>

	if (wait_ready(500)) return 1;	/* Leading busy check: Wait for card ready */
     b0c:	84 ef       	ldi	r24, 0xF4	; 244
     b0e:	91 e0       	ldi	r25, 0x01	; 1
     b10:	e0 df       	rcall	.-64     	; 0xad2 <wait_ready>
     b12:	89 2b       	or	r24, r25
     b14:	19 f0       	breq	.+6      	; 0xb1c <select+0x16>
     b16:	21 e0       	ldi	r18, 0x01	; 1
     b18:	30 e0       	ldi	r19, 0x00	; 0
     b1a:	03 c0       	rjmp	.+6      	; 0xb22 <select+0x1c>

	deselect();		/* Timeout */
     b1c:	f1 df       	rcall	.-30     	; 0xb00 <deselect>
     b1e:	20 e0       	ldi	r18, 0x00	; 0
     b20:	30 e0       	ldi	r19, 0x00	; 0
	return 0;
}
     b22:	c9 01       	movw	r24, r18
     b24:	08 95       	ret

00000b26 <rcvr_datablock>:
static
int rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
     b26:	0f 93       	push	r16
     b28:	1f 93       	push	r17
     b2a:	cf 93       	push	r28
     b2c:	df 93       	push	r29
     b2e:	ec 01       	movw	r28, r24
     b30:	8b 01       	movw	r16, r22
	BYTE token;


	Timer1 = 20;
     b32:	84 e1       	ldi	r24, 0x14	; 20
     b34:	80 93 60 06 	sts	0x0660, r24
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
     b38:	8f ef       	ldi	r24, 0xFF	; 255
     b3a:	c5 df       	rcall	.-118    	; 0xac6 <xchg_spi>
	} while ((token == 0xFF) && Timer1);
     b3c:	8f 3f       	cpi	r24, 0xFF	; 255
     b3e:	29 f4       	brne	.+10     	; 0xb4a <rcvr_datablock+0x24>
     b40:	80 91 60 06 	lds	r24, 0x0660
     b44:	88 23       	and	r24, r24
     b46:	c1 f7       	brne	.-16     	; 0xb38 <rcvr_datablock+0x12>
     b48:	1b c0       	rjmp	.+54     	; 0xb80 <rcvr_datablock+0x5a>
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
     b4a:	8e 3f       	cpi	r24, 0xFE	; 254
     b4c:	c9 f4       	brne	.+50     	; 0xb80 <rcvr_datablock+0x5a>
	BYTE *p,	/* Data read buffer */
	UINT cnt	/* Size of data block */
)
{
	do {
		SPDR = 0xFF;
     b4e:	9f ef       	ldi	r25, 0xFF	; 255
     b50:	9e bd       	out	0x2e, r25	; 46
		while (!(SPSR & (1<<SPIF)));
     b52:	0d b4       	in	r0, 0x2d	; 45
     b54:	07 fe       	sbrs	r0, 7
     b56:	fd cf       	rjmp	.-6      	; 0xb52 <rcvr_datablock+0x2c>
		*p++ = SPDR;
     b58:	8e b5       	in	r24, 0x2e	; 46
     b5a:	88 83       	st	Y, r24
		SPDR = 0xFF;
     b5c:	9e bd       	out	0x2e, r25	; 46
		while (!(SPSR & (1<<SPIF)));
     b5e:	0d b4       	in	r0, 0x2d	; 45
     b60:	07 fe       	sbrs	r0, 7
     b62:	fd cf       	rjmp	.-6      	; 0xb5e <rcvr_datablock+0x38>
		*p++ = SPDR;
     b64:	8e b5       	in	r24, 0x2e	; 46
     b66:	89 83       	std	Y+1, r24	; 0x01
	} while (cnt -= 2);
     b68:	02 50       	subi	r16, 0x02	; 2
     b6a:	10 40       	sbci	r17, 0x00	; 0
     b6c:	11 f0       	breq	.+4      	; 0xb72 <rcvr_datablock+0x4c>
static
int rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
     b6e:	22 96       	adiw	r28, 0x02	; 2
     b70:	ef cf       	rjmp	.-34     	; 0xb50 <rcvr_datablock+0x2a>
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */

	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	xchg_spi(0xFF);					/* Discard CRC */
     b72:	8f ef       	ldi	r24, 0xFF	; 255
     b74:	a8 df       	rcall	.-176    	; 0xac6 <xchg_spi>
	xchg_spi(0xFF);
     b76:	8f ef       	ldi	r24, 0xFF	; 255
     b78:	a6 df       	rcall	.-180    	; 0xac6 <xchg_spi>
     b7a:	21 e0       	ldi	r18, 0x01	; 1
     b7c:	30 e0       	ldi	r19, 0x00	; 0
     b7e:	02 c0       	rjmp	.+4      	; 0xb84 <rcvr_datablock+0x5e>

	return 1;						/* Return with success */
     b80:	20 e0       	ldi	r18, 0x00	; 0
     b82:	30 e0       	ldi	r19, 0x00	; 0
}
     b84:	c9 01       	movw	r24, r18
     b86:	df 91       	pop	r29
     b88:	cf 91       	pop	r28
     b8a:	1f 91       	pop	r17
     b8c:	0f 91       	pop	r16
     b8e:	08 95       	ret

00000b90 <xmit_datablock>:
static
int xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
     b90:	1f 93       	push	r17
     b92:	cf 93       	push	r28
     b94:	df 93       	push	r29
     b96:	ec 01       	movw	r28, r24
     b98:	16 2f       	mov	r17, r22
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Leading busy check: Wait for card ready to accept data block */
     b9a:	84 ef       	ldi	r24, 0xF4	; 244
     b9c:	91 e0       	ldi	r25, 0x01	; 1
     b9e:	99 df       	rcall	.-206    	; 0xad2 <wait_ready>
     ba0:	89 2b       	or	r24, r25
     ba2:	19 f4       	brne	.+6      	; 0xbaa <xmit_datablock+0x1a>
     ba4:	20 e0       	ldi	r18, 0x00	; 0
     ba6:	30 e0       	ldi	r19, 0x00	; 0
     ba8:	22 c0       	rjmp	.+68     	; 0xbee <xmit_datablock+0x5e>

	xchg_spi(token);					/* Xmit data token */
     baa:	81 2f       	mov	r24, r17
     bac:	8c df       	rcall	.-232    	; 0xac6 <xchg_spi>
	if (token == 0xFD) return 1;		/* Do not send data if token is StopTran */
     bae:	1d 3f       	cpi	r17, 0xFD	; 253
     bb0:	e1 f0       	breq	.+56     	; 0xbea <xmit_datablock+0x5a>
     bb2:	20 e0       	ldi	r18, 0x00	; 0
     bb4:	32 e0       	ldi	r19, 0x02	; 2
	const BYTE *p,	/* Data block to be sent */
	UINT cnt		/* Size of data block */
)
{
	do {
		SPDR = *p++;
     bb6:	88 81       	ld	r24, Y
     bb8:	8e bd       	out	0x2e, r24	; 46
		while (!(SPSR & (1<<SPIF)));
     bba:	0d b4       	in	r0, 0x2d	; 45
     bbc:	07 fe       	sbrs	r0, 7
     bbe:	fd cf       	rjmp	.-6      	; 0xbba <xmit_datablock+0x2a>
		SPDR = *p++;
     bc0:	89 81       	ldd	r24, Y+1	; 0x01
     bc2:	8e bd       	out	0x2e, r24	; 46
		while (!(SPSR & (1<<SPIF)));
     bc4:	0d b4       	in	r0, 0x2d	; 45
     bc6:	07 fe       	sbrs	r0, 7
     bc8:	fd cf       	rjmp	.-6      	; 0xbc4 <xmit_datablock+0x34>
	} while (cnt -= 2);
     bca:	22 50       	subi	r18, 0x02	; 2
     bcc:	30 40       	sbci	r19, 0x00	; 0
     bce:	11 f0       	breq	.+4      	; 0xbd4 <xmit_datablock+0x44>
static
int xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
     bd0:	22 96       	adiw	r28, 0x02	; 2
     bd2:	f1 cf       	rjmp	.-30     	; 0xbb6 <xmit_datablock+0x26>

	xchg_spi(token);					/* Xmit data token */
	if (token == 0xFD) return 1;		/* Do not send data if token is StopTran */

	xmit_spi_multi(buff, 512);			/* Data */
	xchg_spi(0xFF); xchg_spi(0xFF);		/* Dummy CRC */
     bd4:	8f ef       	ldi	r24, 0xFF	; 255
     bd6:	77 df       	rcall	.-274    	; 0xac6 <xchg_spi>
     bd8:	8f ef       	ldi	r24, 0xFF	; 255
     bda:	75 df       	rcall	.-278    	; 0xac6 <xchg_spi>

	resp = xchg_spi(0xFF);				/* Receive data resp */
     bdc:	8f ef       	ldi	r24, 0xFF	; 255
     bde:	73 df       	rcall	.-282    	; 0xac6 <xchg_spi>

	return (resp & 0x1F) == 0x05 ? 1 : 0;	/* Data was accepted or not */
     be0:	20 e0       	ldi	r18, 0x00	; 0
     be2:	30 e0       	ldi	r19, 0x00	; 0
     be4:	8f 71       	andi	r24, 0x1F	; 31
     be6:	85 30       	cpi	r24, 0x05	; 5
     be8:	11 f4       	brne	.+4      	; 0xbee <xmit_datablock+0x5e>
     bea:	21 e0       	ldi	r18, 0x01	; 1
     bec:	30 e0       	ldi	r19, 0x00	; 0

	/* Busy check is done at next transmission */
}
     bee:	c9 01       	movw	r24, r18
     bf0:	df 91       	pop	r29
     bf2:	cf 91       	pop	r28
     bf4:	1f 91       	pop	r17
     bf6:	08 95       	ret

00000bf8 <send_cmd>:
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
     bf8:	df 92       	push	r13
     bfa:	ef 92       	push	r14
     bfc:	ff 92       	push	r15
     bfe:	0f 93       	push	r16
     c00:	1f 93       	push	r17
     c02:	d8 2e       	mov	r13, r24
     c04:	7a 01       	movw	r14, r20
     c06:	8b 01       	movw	r16, r22
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
     c08:	87 ff       	sbrs	r24, 7
     c0a:	0b c0       	rjmp	.+22     	; 0xc22 <send_cmd+0x2a>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
     c0c:	87 e3       	ldi	r24, 0x37	; 55
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	60 e0       	ldi	r22, 0x00	; 0
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	f0 df       	rcall	.-32     	; 0xbf8 <send_cmd>
		if (res > 1) return res;
     c18:	82 30       	cpi	r24, 0x02	; 2
     c1a:	08 f0       	brcs	.+2      	; 0xc1e <send_cmd+0x26>
     c1c:	35 c0       	rjmp	.+106    	; 0xc88 <send_cmd+0x90>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
     c1e:	8f e7       	ldi	r24, 0x7F	; 127
     c20:	d8 22       	and	r13, r24
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
     c22:	8c e0       	ldi	r24, 0x0C	; 12
     c24:	d8 16       	cp	r13, r24
     c26:	31 f0       	breq	.+12     	; 0xc34 <send_cmd+0x3c>
		deselect();
     c28:	6b df       	rcall	.-298    	; 0xb00 <deselect>
		if (!select()) return 0xFF;
     c2a:	6d df       	rcall	.-294    	; 0xb06 <select>
     c2c:	89 2b       	or	r24, r25
     c2e:	11 f4       	brne	.+4      	; 0xc34 <send_cmd+0x3c>
     c30:	8f ef       	ldi	r24, 0xFF	; 255
     c32:	2a c0       	rjmp	.+84     	; 0xc88 <send_cmd+0x90>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + Command index */
     c34:	8d 2d       	mov	r24, r13
     c36:	80 64       	ori	r24, 0x40	; 64
     c38:	46 df       	rcall	.-372    	; 0xac6 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
     c3a:	81 2f       	mov	r24, r17
     c3c:	99 27       	eor	r25, r25
     c3e:	aa 27       	eor	r26, r26
     c40:	bb 27       	eor	r27, r27
     c42:	41 df       	rcall	.-382    	; 0xac6 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
     c44:	c8 01       	movw	r24, r16
     c46:	aa 27       	eor	r26, r26
     c48:	bb 27       	eor	r27, r27
     c4a:	3d df       	rcall	.-390    	; 0xac6 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
     c4c:	bb 27       	eor	r27, r27
     c4e:	a1 2f       	mov	r26, r17
     c50:	90 2f       	mov	r25, r16
     c52:	8f 2d       	mov	r24, r15
     c54:	38 df       	rcall	.-400    	; 0xac6 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
     c56:	8e 2d       	mov	r24, r14
     c58:	36 df       	rcall	.-404    	; 0xac6 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
     c5a:	dd 20       	and	r13, r13
     c5c:	11 f4       	brne	.+4      	; 0xc62 <send_cmd+0x6a>
     c5e:	85 e9       	ldi	r24, 0x95	; 149
     c60:	06 c0       	rjmp	.+12     	; 0xc6e <send_cmd+0x76>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
     c62:	88 e0       	ldi	r24, 0x08	; 8
     c64:	d8 16       	cp	r13, r24
     c66:	11 f4       	brne	.+4      	; 0xc6c <send_cmd+0x74>
     c68:	87 e8       	ldi	r24, 0x87	; 135
     c6a:	01 c0       	rjmp	.+2      	; 0xc6e <send_cmd+0x76>
     c6c:	81 e0       	ldi	r24, 0x01	; 1
	xchg_spi(n);
     c6e:	2b df       	rcall	.-426    	; 0xac6 <xchg_spi>

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
     c70:	8c e0       	ldi	r24, 0x0C	; 12
     c72:	d8 16       	cp	r13, r24
     c74:	11 f4       	brne	.+4      	; 0xc7a <send_cmd+0x82>
     c76:	8f ef       	ldi	r24, 0xFF	; 255
     c78:	26 df       	rcall	.-436    	; 0xac6 <xchg_spi>
     c7a:	1a e0       	ldi	r17, 0x0A	; 10
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		res = xchg_spi(0xFF);
     c7c:	8f ef       	ldi	r24, 0xFF	; 255
     c7e:	23 df       	rcall	.-442    	; 0xac6 <xchg_spi>
	while ((res & 0x80) && --n);
     c80:	87 ff       	sbrs	r24, 7
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <send_cmd+0x90>
     c84:	11 50       	subi	r17, 0x01	; 1
     c86:	d1 f7       	brne	.-12     	; 0xc7c <send_cmd+0x84>

	return res;			/* Return with the response value */
}
     c88:	1f 91       	pop	r17
     c8a:	0f 91       	pop	r16
     c8c:	ff 90       	pop	r15
     c8e:	ef 90       	pop	r14
     c90:	df 90       	pop	r13
     c92:	08 95       	ret

00000c94 <mmc_disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS mmc_disk_initialize (void)
{
     c94:	0f 93       	push	r16
     c96:	1f 93       	push	r17
	BYTE n, cmd, ty, ocr[4];


	power_off();						/* Turn off the socket power to reset the card */
     c98:	12 df       	rcall	.-476    	; 0xabe <power_off>
	for (Timer1 = 10; Timer1; ) ;		/* Wait for 100ms */
     c9a:	8a e0       	ldi	r24, 0x0A	; 10
     c9c:	80 93 60 06 	sts	0x0660, r24
     ca0:	80 91 60 06 	lds	r24, 0x0660
     ca4:	88 23       	and	r24, r24
     ca6:	e1 f7       	brne	.-8      	; 0xca0 <mmc_disk_initialize+0xc>
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket? */
     ca8:	80 91 1c 02 	lds	r24, 0x021C
     cac:	81 fd       	sbrc	r24, 1
     cae:	8b c0       	rjmp	.+278    	; 0xdc6 <mmc_disk_initialize+0x132>
	//To be filled


	/* Configure MOSI/MISO/SCLK/CS pins */
	//CHECK THIS
	PORT_SPI = (1<<DD_MOSI)|(1<<DD_SCK)|(1<<DD_CS);
     cb0:	87 e0       	ldi	r24, 0x07	; 7
     cb2:	85 b9       	out	0x05, r24	; 5
	DDR_SPI = (1<<DD_MOSI)|(1<<DD_SCK)|(1<<DD_CS);
     cb4:	84 b9       	out	0x04, r24	; 4

	/* Enable SPI module in SPI mode 0 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR1)|(1<<SPR0);
     cb6:	83 e5       	ldi	r24, 0x53	; 83
     cb8:	8c bd       	out	0x2c, r24	; 44
	power_off();						/* Turn off the socket power to reset the card */
	for (Timer1 = 10; Timer1; ) ;		/* Wait for 100ms */
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket? */

	power_on();							/* Turn on the socket power */
	FCLK_SLOW();
     cba:	82 e5       	ldi	r24, 0x52	; 82
     cbc:	8c bd       	out	0x2c, r24	; 44
     cbe:	1a e0       	ldi	r17, 0x0A	; 10
	for (n = 10; n; n--) xchg_spi(0xFF);	/* 80 dummy clocks */
     cc0:	8f ef       	ldi	r24, 0xFF	; 255
     cc2:	01 df       	rcall	.-510    	; 0xac6 <xchg_spi>
     cc4:	11 50       	subi	r17, 0x01	; 1
     cc6:	e1 f7       	brne	.-8      	; 0xcc0 <mmc_disk_initialize+0x2c>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI mode */
     cc8:	80 e0       	ldi	r24, 0x00	; 0
     cca:	40 e0       	ldi	r20, 0x00	; 0
     ccc:	50 e0       	ldi	r21, 0x00	; 0
     cce:	60 e0       	ldi	r22, 0x00	; 0
     cd0:	70 e0       	ldi	r23, 0x00	; 0
     cd2:	92 df       	rcall	.-220    	; 0xbf8 <send_cmd>
     cd4:	81 30       	cpi	r24, 0x01	; 1
     cd6:	09 f0       	breq	.+2      	; 0xcda <mmc_disk_initialize+0x46>
     cd8:	67 c0       	rjmp	.+206    	; 0xda8 <mmc_disk_initialize+0x114>
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
     cda:	84 e6       	ldi	r24, 0x64	; 100
     cdc:	80 93 60 06 	sts	0x0660, r24
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* Is the card SDv2? */
     ce0:	88 e0       	ldi	r24, 0x08	; 8
     ce2:	4a ea       	ldi	r20, 0xAA	; 170
     ce4:	51 e0       	ldi	r21, 0x01	; 1
     ce6:	60 e0       	ldi	r22, 0x00	; 0
     ce8:	70 e0       	ldi	r23, 0x00	; 0
     cea:	86 df       	rcall	.-244    	; 0xbf8 <send_cmd>
     cec:	81 30       	cpi	r24, 0x01	; 1
     cee:	09 f0       	breq	.+2      	; 0xcf2 <mmc_disk_initialize+0x5e>
     cf0:	37 c0       	rjmp	.+110    	; 0xd60 <mmc_disk_initialize+0xcc>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get trailing return value of R7 resp */
     cf2:	8f ef       	ldi	r24, 0xFF	; 255
     cf4:	e8 de       	rcall	.-560    	; 0xac6 <xchg_spi>
     cf6:	8f ef       	ldi	r24, 0xFF	; 255
     cf8:	e6 de       	rcall	.-564    	; 0xac6 <xchg_spi>
     cfa:	8f ef       	ldi	r24, 0xFF	; 255
     cfc:	e4 de       	rcall	.-568    	; 0xac6 <xchg_spi>
     cfe:	18 2f       	mov	r17, r24
     d00:	8f ef       	ldi	r24, 0xFF	; 255
     d02:	e1 de       	rcall	.-574    	; 0xac6 <xchg_spi>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
     d04:	11 30       	cpi	r17, 0x01	; 1
     d06:	09 f0       	breq	.+2      	; 0xd0a <mmc_disk_initialize+0x76>
     d08:	4f c0       	rjmp	.+158    	; 0xda8 <mmc_disk_initialize+0x114>
     d0a:	8a 3a       	cpi	r24, 0xAA	; 170
     d0c:	09 f0       	breq	.+2      	; 0xd10 <mmc_disk_initialize+0x7c>
     d0e:	4c c0       	rjmp	.+152    	; 0xda8 <mmc_disk_initialize+0x114>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
     d10:	80 91 60 06 	lds	r24, 0x0660
     d14:	88 23       	and	r24, r24
     d16:	41 f0       	breq	.+16     	; 0xd28 <mmc_disk_initialize+0x94>
     d18:	89 ea       	ldi	r24, 0xA9	; 169
     d1a:	40 e0       	ldi	r20, 0x00	; 0
     d1c:	50 e0       	ldi	r21, 0x00	; 0
     d1e:	60 e0       	ldi	r22, 0x00	; 0
     d20:	70 e4       	ldi	r23, 0x40	; 64
     d22:	6a df       	rcall	.-300    	; 0xbf8 <send_cmd>
     d24:	88 23       	and	r24, r24
     d26:	a1 f7       	brne	.-24     	; 0xd10 <mmc_disk_initialize+0x7c>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
     d28:	80 91 60 06 	lds	r24, 0x0660
     d2c:	88 23       	and	r24, r24
     d2e:	09 f4       	brne	.+2      	; 0xd32 <mmc_disk_initialize+0x9e>
     d30:	3b c0       	rjmp	.+118    	; 0xda8 <mmc_disk_initialize+0x114>
     d32:	8a e3       	ldi	r24, 0x3A	; 58
     d34:	40 e0       	ldi	r20, 0x00	; 0
     d36:	50 e0       	ldi	r21, 0x00	; 0
     d38:	60 e0       	ldi	r22, 0x00	; 0
     d3a:	70 e0       	ldi	r23, 0x00	; 0
     d3c:	5d df       	rcall	.-326    	; 0xbf8 <send_cmd>
     d3e:	88 23       	and	r24, r24
     d40:	99 f5       	brne	.+102    	; 0xda8 <mmc_disk_initialize+0x114>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
     d42:	8f ef       	ldi	r24, 0xFF	; 255
     d44:	c0 de       	rcall	.-640    	; 0xac6 <xchg_spi>
     d46:	18 2f       	mov	r17, r24
     d48:	8f ef       	ldi	r24, 0xFF	; 255
     d4a:	bd de       	rcall	.-646    	; 0xac6 <xchg_spi>
     d4c:	8f ef       	ldi	r24, 0xFF	; 255
     d4e:	bb de       	rcall	.-650    	; 0xac6 <xchg_spi>
     d50:	8f ef       	ldi	r24, 0xFF	; 255
     d52:	b9 de       	rcall	.-654    	; 0xac6 <xchg_spi>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Check if the card is SDv2 */
     d54:	16 fd       	sbrc	r17, 6
     d56:	02 c0       	rjmp	.+4      	; 0xd5c <mmc_disk_initialize+0xc8>
     d58:	14 e0       	ldi	r17, 0x04	; 4
     d5a:	27 c0       	rjmp	.+78     	; 0xdaa <mmc_disk_initialize+0x116>
     d5c:	1c e0       	ldi	r17, 0x0C	; 12
     d5e:	25 c0       	rjmp	.+74     	; 0xdaa <mmc_disk_initialize+0x116>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
     d60:	89 ea       	ldi	r24, 0xA9	; 169
     d62:	40 e0       	ldi	r20, 0x00	; 0
     d64:	50 e0       	ldi	r21, 0x00	; 0
     d66:	60 e0       	ldi	r22, 0x00	; 0
     d68:	70 e0       	ldi	r23, 0x00	; 0
     d6a:	46 df       	rcall	.-372    	; 0xbf8 <send_cmd>
     d6c:	82 30       	cpi	r24, 0x02	; 2
     d6e:	18 f0       	brcs	.+6      	; 0xd76 <mmc_disk_initialize+0xe2>
     d70:	01 e0       	ldi	r16, 0x01	; 1
     d72:	11 e0       	ldi	r17, 0x01	; 1
     d74:	02 c0       	rjmp	.+4      	; 0xd7a <mmc_disk_initialize+0xe6>
     d76:	09 ea       	ldi	r16, 0xA9	; 169
     d78:	12 e0       	ldi	r17, 0x02	; 2
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
     d7a:	80 91 60 06 	lds	r24, 0x0660
     d7e:	88 23       	and	r24, r24
     d80:	41 f0       	breq	.+16     	; 0xd92 <mmc_disk_initialize+0xfe>
     d82:	80 2f       	mov	r24, r16
     d84:	40 e0       	ldi	r20, 0x00	; 0
     d86:	50 e0       	ldi	r21, 0x00	; 0
     d88:	60 e0       	ldi	r22, 0x00	; 0
     d8a:	70 e0       	ldi	r23, 0x00	; 0
     d8c:	35 df       	rcall	.-406    	; 0xbf8 <send_cmd>
     d8e:	88 23       	and	r24, r24
     d90:	a1 f7       	brne	.-24     	; 0xd7a <mmc_disk_initialize+0xe6>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
     d92:	80 91 60 06 	lds	r24, 0x0660
     d96:	88 23       	and	r24, r24
     d98:	39 f0       	breq	.+14     	; 0xda8 <mmc_disk_initialize+0x114>
     d9a:	80 e1       	ldi	r24, 0x10	; 16
     d9c:	40 e0       	ldi	r20, 0x00	; 0
     d9e:	52 e0       	ldi	r21, 0x02	; 2
     da0:	60 e0       	ldi	r22, 0x00	; 0
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	29 df       	rcall	.-430    	; 0xbf8 <send_cmd>
     da6:	81 11       	cpse	r24, r1
     da8:	10 e0       	ldi	r17, 0x00	; 0
				ty = 0;
		}
	}
	CardType = ty;
     daa:	10 93 62 06 	sts	0x0662, r17
	deselect();
     dae:	a8 de       	rcall	.-688    	; 0xb00 <deselect>

	if (ty) {			/* Initialization succeded */
     db0:	11 23       	and	r17, r17
     db2:	41 f0       	breq	.+16     	; 0xdc4 <mmc_disk_initialize+0x130>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
     db4:	80 91 1c 02 	lds	r24, 0x021C
     db8:	8e 7f       	andi	r24, 0xFE	; 254
     dba:	80 93 1c 02 	sts	0x021C, r24
		FCLK_FAST();
     dbe:	81 e5       	ldi	r24, 0x51	; 81
     dc0:	8c bd       	out	0x2c, r24	; 44
     dc2:	01 c0       	rjmp	.+2      	; 0xdc6 <mmc_disk_initialize+0x132>
	} else {			/* Initialization failed */
		power_off();
     dc4:	7c de       	rcall	.-776    	; 0xabe <power_off>
	}

	return Stat;
     dc6:	80 91 1c 02 	lds	r24, 0x021C
}
     dca:	1f 91       	pop	r17
     dcc:	0f 91       	pop	r16
     dce:	08 95       	ret

00000dd0 <mmc_disk_read>:
DRESULT mmc_disk_read (
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
     dd0:	ff 92       	push	r15
     dd2:	0f 93       	push	r16
     dd4:	1f 93       	push	r17
     dd6:	cf 93       	push	r28
     dd8:	df 93       	push	r29
     dda:	8c 01       	movw	r16, r24
     ddc:	e9 01       	movw	r28, r18
	BYTE cmd;


	if (!count) return RES_PARERR;
     dde:	21 15       	cp	r18, r1
     de0:	31 05       	cpc	r19, r1
     de2:	11 f4       	brne	.+4      	; 0xde8 <mmc_disk_read+0x18>
     de4:	84 e0       	ldi	r24, 0x04	; 4
     de6:	36 c0       	rjmp	.+108    	; 0xe54 <mmc_disk_read+0x84>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
     de8:	80 91 1c 02 	lds	r24, 0x021C
     dec:	80 ff       	sbrs	r24, 0
     dee:	02 c0       	rjmp	.+4      	; 0xdf4 <mmc_disk_read+0x24>
     df0:	83 e0       	ldi	r24, 0x03	; 3
     df2:	30 c0       	rjmp	.+96     	; 0xe54 <mmc_disk_read+0x84>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
     df4:	80 91 62 06 	lds	r24, 0x0662
     df8:	83 fd       	sbrc	r24, 3
     dfa:	07 c0       	rjmp	.+14     	; 0xe0a <mmc_disk_read+0x3a>
     dfc:	f9 e0       	ldi	r31, 0x09	; 9
     dfe:	44 0f       	add	r20, r20
     e00:	55 1f       	adc	r21, r21
     e02:	66 1f       	adc	r22, r22
     e04:	77 1f       	adc	r23, r23
     e06:	fa 95       	dec	r31
     e08:	d1 f7       	brne	.-12     	; 0xdfe <mmc_disk_read+0x2e>

	cmd = count > 1 ? CMD18 : CMD17;			/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
     e0a:	c2 30       	cpi	r28, 0x02	; 2
     e0c:	d1 05       	cpc	r29, r1
     e0e:	18 f4       	brcc	.+6      	; 0xe16 <mmc_disk_read+0x46>
     e10:	e1 e1       	ldi	r30, 0x11	; 17
     e12:	fe 2e       	mov	r15, r30
     e14:	02 c0       	rjmp	.+4      	; 0xe1a <mmc_disk_read+0x4a>
     e16:	32 e1       	ldi	r19, 0x12	; 18
     e18:	f3 2e       	mov	r15, r19
	if (send_cmd(cmd, sector) == 0) {
     e1a:	8f 2d       	mov	r24, r15
     e1c:	ed de       	rcall	.-550    	; 0xbf8 <send_cmd>
     e1e:	88 23       	and	r24, r24
     e20:	a1 f4       	brne	.+40     	; 0xe4a <mmc_disk_read+0x7a>
		do {
			if (!rcvr_datablock(buff, 512)) break;
     e22:	c8 01       	movw	r24, r16
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	72 e0       	ldi	r23, 0x02	; 2
     e28:	7e de       	rcall	.-772    	; 0xb26 <rcvr_datablock>
     e2a:	89 2b       	or	r24, r25
     e2c:	29 f0       	breq	.+10     	; 0xe38 <mmc_disk_read+0x68>
			buff += 512;
		} while (--count);
     e2e:	21 97       	sbiw	r28, 0x01	; 1
     e30:	19 f0       	breq	.+6      	; 0xe38 <mmc_disk_read+0x68>

	cmd = count > 1 ? CMD18 : CMD17;			/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
	if (send_cmd(cmd, sector) == 0) {
		do {
			if (!rcvr_datablock(buff, 512)) break;
			buff += 512;
     e32:	00 50       	subi	r16, 0x00	; 0
     e34:	1e 4f       	sbci	r17, 0xFE	; 254
     e36:	f5 cf       	rjmp	.-22     	; 0xe22 <mmc_disk_read+0x52>
		} while (--count);
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
     e38:	82 e1       	ldi	r24, 0x12	; 18
     e3a:	f8 16       	cp	r15, r24
     e3c:	31 f4       	brne	.+12     	; 0xe4a <mmc_disk_read+0x7a>
     e3e:	8c e0       	ldi	r24, 0x0C	; 12
     e40:	40 e0       	ldi	r20, 0x00	; 0
     e42:	50 e0       	ldi	r21, 0x00	; 0
     e44:	60 e0       	ldi	r22, 0x00	; 0
     e46:	70 e0       	ldi	r23, 0x00	; 0
     e48:	d7 de       	rcall	.-594    	; 0xbf8 <send_cmd>
	}
	deselect();
     e4a:	5a de       	rcall	.-844    	; 0xb00 <deselect>

	return count ? RES_ERROR : RES_OK;
     e4c:	80 e0       	ldi	r24, 0x00	; 0
     e4e:	cd 2b       	or	r28, r29
     e50:	09 f0       	breq	.+2      	; 0xe54 <mmc_disk_read+0x84>
     e52:	81 e0       	ldi	r24, 0x01	; 1
}
     e54:	df 91       	pop	r29
     e56:	cf 91       	pop	r28
     e58:	1f 91       	pop	r17
     e5a:	0f 91       	pop	r16
     e5c:	ff 90       	pop	r15
     e5e:	08 95       	ret

00000e60 <mmc_disk_write>:
DRESULT mmc_disk_write (
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
     e60:	cf 92       	push	r12
     e62:	df 92       	push	r13
     e64:	ef 92       	push	r14
     e66:	ff 92       	push	r15
     e68:	0f 93       	push	r16
     e6a:	1f 93       	push	r17
     e6c:	cf 93       	push	r28
     e6e:	df 93       	push	r29
     e70:	6c 01       	movw	r12, r24
     e72:	7a 01       	movw	r14, r20
     e74:	8b 01       	movw	r16, r22
     e76:	e9 01       	movw	r28, r18
	if (!count) return RES_PARERR;
     e78:	21 15       	cp	r18, r1
     e7a:	31 05       	cpc	r19, r1
     e7c:	11 f4       	brne	.+4      	; 0xe82 <mmc_disk_write+0x22>
     e7e:	84 e0       	ldi	r24, 0x04	; 4
     e80:	51 c0       	rjmp	.+162    	; 0xf24 <mmc_disk_write+0xc4>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
     e82:	80 91 1c 02 	lds	r24, 0x021C
     e86:	80 ff       	sbrs	r24, 0
     e88:	02 c0       	rjmp	.+4      	; 0xe8e <mmc_disk_write+0x2e>
     e8a:	83 e0       	ldi	r24, 0x03	; 3
     e8c:	4b c0       	rjmp	.+150    	; 0xf24 <mmc_disk_write+0xc4>
	if (Stat & STA_PROTECT) return RES_WRPRT;
     e8e:	80 91 1c 02 	lds	r24, 0x021C
     e92:	82 ff       	sbrs	r24, 2
     e94:	02 c0       	rjmp	.+4      	; 0xe9a <mmc_disk_write+0x3a>
     e96:	82 e0       	ldi	r24, 0x02	; 2
     e98:	45 c0       	rjmp	.+138    	; 0xf24 <mmc_disk_write+0xc4>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
     e9a:	80 91 62 06 	lds	r24, 0x0662
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	83 fd       	sbrc	r24, 3
     ea2:	07 c0       	rjmp	.+14     	; 0xeb2 <mmc_disk_write+0x52>
     ea4:	a9 e0       	ldi	r26, 0x09	; 9
     ea6:	ee 0c       	add	r14, r14
     ea8:	ff 1c       	adc	r15, r15
     eaa:	00 1f       	adc	r16, r16
     eac:	11 1f       	adc	r17, r17
     eae:	aa 95       	dec	r26
     eb0:	d1 f7       	brne	.-12     	; 0xea6 <mmc_disk_write+0x46>

	if (count == 1) {	/* Single block write */
     eb2:	c1 30       	cpi	r28, 0x01	; 1
     eb4:	d1 05       	cpc	r29, r1
     eb6:	71 f4       	brne	.+28     	; 0xed4 <mmc_disk_write+0x74>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
     eb8:	88 e1       	ldi	r24, 0x18	; 24
     eba:	b8 01       	movw	r22, r16
     ebc:	a7 01       	movw	r20, r14
     ebe:	9c de       	rcall	.-712    	; 0xbf8 <send_cmd>
     ec0:	88 23       	and	r24, r24
     ec2:	59 f5       	brne	.+86     	; 0xf1a <mmc_disk_write+0xba>
     ec4:	c6 01       	movw	r24, r12
     ec6:	6e ef       	ldi	r22, 0xFE	; 254
     ec8:	63 de       	rcall	.-826    	; 0xb90 <xmit_datablock>
     eca:	89 2b       	or	r24, r25
     ecc:	31 f1       	breq	.+76     	; 0xf1a <mmc_disk_write+0xba>
     ece:	c0 e0       	ldi	r28, 0x00	; 0
     ed0:	d0 e0       	ldi	r29, 0x00	; 0
     ed2:	23 c0       	rjmp	.+70     	; 0xf1a <mmc_disk_write+0xba>
			&& xmit_datablock(buff, 0xFE)) {
			count = 0;
		}
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
     ed4:	86 70       	andi	r24, 0x06	; 6
     ed6:	90 70       	andi	r25, 0x00	; 0
     ed8:	89 2b       	or	r24, r25
     eda:	29 f0       	breq	.+10     	; 0xee6 <mmc_disk_write+0x86>
     edc:	ae 01       	movw	r20, r28
     ede:	60 e0       	ldi	r22, 0x00	; 0
     ee0:	70 e0       	ldi	r23, 0x00	; 0
     ee2:	87 e9       	ldi	r24, 0x97	; 151
     ee4:	89 de       	rcall	.-750    	; 0xbf8 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
     ee6:	89 e1       	ldi	r24, 0x19	; 25
     ee8:	b8 01       	movw	r22, r16
     eea:	a7 01       	movw	r20, r14
     eec:	85 de       	rcall	.-758    	; 0xbf8 <send_cmd>
     eee:	88 23       	and	r24, r24
     ef0:	a1 f4       	brne	.+40     	; 0xf1a <mmc_disk_write+0xba>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
     ef2:	c6 01       	movw	r24, r12
     ef4:	6c ef       	ldi	r22, 0xFC	; 252
     ef6:	4c de       	rcall	.-872    	; 0xb90 <xmit_datablock>
     ef8:	89 2b       	or	r24, r25
     efa:	39 f0       	breq	.+14     	; 0xf0a <mmc_disk_write+0xaa>
				buff += 512;
			} while (--count);
     efc:	21 97       	sbiw	r28, 0x01	; 1
     efe:	29 f0       	breq	.+10     	; 0xf0a <mmc_disk_write+0xaa>
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
				buff += 512;
     f00:	80 e0       	ldi	r24, 0x00	; 0
     f02:	92 e0       	ldi	r25, 0x02	; 2
     f04:	c8 0e       	add	r12, r24
     f06:	d9 1e       	adc	r13, r25
     f08:	f4 cf       	rjmp	.-24     	; 0xef2 <mmc_disk_write+0x92>
			} while (--count);
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
     f0a:	80 e0       	ldi	r24, 0x00	; 0
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	6d ef       	ldi	r22, 0xFD	; 253
     f10:	3f de       	rcall	.-898    	; 0xb90 <xmit_datablock>
     f12:	89 2b       	or	r24, r25
     f14:	11 f4       	brne	.+4      	; 0xf1a <mmc_disk_write+0xba>
     f16:	c1 e0       	ldi	r28, 0x01	; 1
     f18:	d0 e0       	ldi	r29, 0x00	; 0
		}
	}
	deselect();
     f1a:	f2 dd       	rcall	.-1052   	; 0xb00 <deselect>

	return count ? RES_ERROR : RES_OK;
     f1c:	80 e0       	ldi	r24, 0x00	; 0
     f1e:	cd 2b       	or	r28, r29
     f20:	09 f0       	breq	.+2      	; 0xf24 <mmc_disk_write+0xc4>
     f22:	81 e0       	ldi	r24, 0x01	; 1
}
     f24:	df 91       	pop	r29
     f26:	cf 91       	pop	r28
     f28:	1f 91       	pop	r17
     f2a:	0f 91       	pop	r16
     f2c:	ff 90       	pop	r15
     f2e:	ef 90       	pop	r14
     f30:	df 90       	pop	r13
     f32:	cf 90       	pop	r12
     f34:	08 95       	ret

00000f36 <mmc_disk_ioctl>:
#if _USE_IOCTL
DRESULT mmc_disk_ioctl (
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
     f36:	cf 92       	push	r12
     f38:	df 92       	push	r13
     f3a:	ef 92       	push	r14
     f3c:	ff 92       	push	r15
     f3e:	0f 93       	push	r16
     f40:	1f 93       	push	r17
     f42:	df 93       	push	r29
     f44:	cf 93       	push	r28
     f46:	cd b7       	in	r28, 0x3d	; 61
     f48:	de b7       	in	r29, 0x3e	; 62
     f4a:	60 97       	sbiw	r28, 0x10	; 16
     f4c:	0f b6       	in	r0, 0x3f	; 63
     f4e:	f8 94       	cli
     f50:	de bf       	out	0x3e, r29	; 62
     f52:	0f be       	out	0x3f, r0	; 63
     f54:	cd bf       	out	0x3d, r28	; 61
     f56:	98 2f       	mov	r25, r24
     f58:	7b 01       	movw	r14, r22
	SDIO_CTRL *sdi;
	BYTE rc, *bp;
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;
     f5a:	80 91 1c 02 	lds	r24, 0x021C
     f5e:	80 ff       	sbrs	r24, 0
     f60:	02 c0       	rjmp	.+4      	; 0xf66 <mmc_disk_ioctl+0x30>
     f62:	13 e0       	ldi	r17, 0x03	; 3
     f64:	b1 c2       	rjmp	.+1378   	; 0x14c8 <mmc_disk_ioctl+0x592>

	res = RES_ERROR;
	switch (cmd) {
     f66:	93 33       	cpi	r25, 0x33	; 51
     f68:	09 f4       	brne	.+2      	; 0xf6c <mmc_disk_ioctl+0x36>
     f6a:	80 c1       	rjmp	.+768    	; 0x126c <mmc_disk_ioctl+0x336>
     f6c:	94 33       	cpi	r25, 0x34	; 52
     f6e:	98 f4       	brcc	.+38     	; 0xf96 <mmc_disk_ioctl+0x60>
     f70:	93 30       	cpi	r25, 0x03	; 3
     f72:	09 f4       	brne	.+2      	; 0xf76 <mmc_disk_ioctl+0x40>
     f74:	9b c0       	rjmp	.+310    	; 0x10ac <mmc_disk_ioctl+0x176>
     f76:	94 30       	cpi	r25, 0x04	; 4
     f78:	28 f4       	brcc	.+10     	; 0xf84 <mmc_disk_ioctl+0x4e>
     f7a:	99 23       	and	r25, r25
     f7c:	11 f1       	breq	.+68     	; 0xfc2 <mmc_disk_ioctl+0x8c>
     f7e:	91 30       	cpi	r25, 0x01	; 1
     f80:	f1 f4       	brne	.+60     	; 0xfbe <mmc_disk_ioctl+0x88>
     f82:	25 c0       	rjmp	.+74     	; 0xfce <mmc_disk_ioctl+0x98>
     f84:	97 30       	cpi	r25, 0x07	; 7
     f86:	09 f4       	brne	.+2      	; 0xf8a <mmc_disk_ioctl+0x54>
     f88:	ab c1       	rjmp	.+854    	; 0x12e0 <mmc_disk_ioctl+0x3aa>
     f8a:	92 33       	cpi	r25, 0x32	; 50
     f8c:	09 f4       	brne	.+2      	; 0xf90 <mmc_disk_ioctl+0x5a>
     f8e:	69 c1       	rjmp	.+722    	; 0x1262 <mmc_disk_ioctl+0x32c>
     f90:	94 30       	cpi	r25, 0x04	; 4
     f92:	a9 f4       	brne	.+42     	; 0xfbe <mmc_disk_ioctl+0x88>
     f94:	15 c1       	rjmp	.+554    	; 0x11c0 <mmc_disk_ioctl+0x28a>
     f96:	96 33       	cpi	r25, 0x36	; 54
     f98:	09 f4       	brne	.+2      	; 0xf9c <mmc_disk_ioctl+0x66>
     f9a:	8f c1       	rjmp	.+798    	; 0x12ba <mmc_disk_ioctl+0x384>
     f9c:	97 33       	cpi	r25, 0x37	; 55
     f9e:	30 f4       	brcc	.+12     	; 0xfac <mmc_disk_ioctl+0x76>
     fa0:	94 33       	cpi	r25, 0x34	; 52
     fa2:	09 f4       	brne	.+2      	; 0xfa6 <mmc_disk_ioctl+0x70>
     fa4:	65 c1       	rjmp	.+714    	; 0x1270 <mmc_disk_ioctl+0x33a>
     fa6:	95 33       	cpi	r25, 0x35	; 53
     fa8:	51 f4       	brne	.+20     	; 0xfbe <mmc_disk_ioctl+0x88>
     faa:	6f c1       	rjmp	.+734    	; 0x128a <mmc_disk_ioctl+0x354>
     fac:	98 33       	cpi	r25, 0x38	; 56
     fae:	09 f4       	brne	.+2      	; 0xfb2 <mmc_disk_ioctl+0x7c>
     fb0:	fb c1       	rjmp	.+1014   	; 0x13a8 <mmc_disk_ioctl+0x472>
     fb2:	98 33       	cpi	r25, 0x38	; 56
     fb4:	08 f4       	brcc	.+2      	; 0xfb8 <mmc_disk_ioctl+0x82>
     fb6:	9c c1       	rjmp	.+824    	; 0x12f0 <mmc_disk_ioctl+0x3ba>
     fb8:	99 33       	cpi	r25, 0x39	; 57
     fba:	09 f4       	brne	.+2      	; 0xfbe <mmc_disk_ioctl+0x88>
     fbc:	45 c2       	rjmp	.+1162   	; 0x1448 <mmc_disk_ioctl+0x512>
     fbe:	14 e0       	ldi	r17, 0x04	; 4
     fc0:	83 c2       	rjmp	.+1286   	; 0x14c8 <mmc_disk_ioctl+0x592>
	case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
		if (select()) res = RES_OK;
     fc2:	a1 dd       	rcall	.-1214   	; 0xb06 <select>
     fc4:	10 e0       	ldi	r17, 0x00	; 0
     fc6:	89 2b       	or	r24, r25
     fc8:	09 f0       	breq	.+2      	; 0xfcc <mmc_disk_ioctl+0x96>
     fca:	7b c2       	rjmp	.+1270   	; 0x14c2 <mmc_disk_ioctl+0x58c>
     fcc:	79 c2       	rjmp	.+1266   	; 0x14c0 <mmc_disk_ioctl+0x58a>
		deselect();
		break;

	case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
     fce:	89 e0       	ldi	r24, 0x09	; 9
     fd0:	40 e0       	ldi	r20, 0x00	; 0
     fd2:	50 e0       	ldi	r21, 0x00	; 0
     fd4:	60 e0       	ldi	r22, 0x00	; 0
     fd6:	70 e0       	ldi	r23, 0x00	; 0
     fd8:	0f de       	rcall	.-994    	; 0xbf8 <send_cmd>
     fda:	88 23       	and	r24, r24
     fdc:	09 f0       	breq	.+2      	; 0xfe0 <mmc_disk_ioctl+0xaa>
     fde:	70 c2       	rjmp	.+1248   	; 0x14c0 <mmc_disk_ioctl+0x58a>
     fe0:	ce 01       	movw	r24, r28
     fe2:	01 96       	adiw	r24, 0x01	; 1
     fe4:	60 e1       	ldi	r22, 0x10	; 16
     fe6:	70 e0       	ldi	r23, 0x00	; 0
     fe8:	9e dd       	rcall	.-1220   	; 0xb26 <rcvr_datablock>
     fea:	89 2b       	or	r24, r25
     fec:	09 f4       	brne	.+2      	; 0xff0 <mmc_disk_ioctl+0xba>
     fee:	68 c2       	rjmp	.+1232   	; 0x14c0 <mmc_disk_ioctl+0x58a>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
     ff0:	89 81       	ldd	r24, Y+1	; 0x01
     ff2:	82 95       	swap	r24
     ff4:	86 95       	lsr	r24
     ff6:	86 95       	lsr	r24
     ff8:	83 70       	andi	r24, 0x03	; 3
     ffa:	28 85       	ldd	r18, Y+8	; 0x08
     ffc:	69 85       	ldd	r22, Y+9	; 0x09
     ffe:	7a 85       	ldd	r23, Y+10	; 0x0a
    1000:	81 30       	cpi	r24, 0x01	; 1
    1002:	01 f5       	brne	.+64     	; 0x1044 <mmc_disk_ioctl+0x10e>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
				*(DWORD*)buff = csize << 10;
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	40 e0       	ldi	r20, 0x00	; 0
    1008:	50 e0       	ldi	r21, 0x00	; 0
    100a:	2f 73       	andi	r18, 0x3F	; 63
    100c:	30 70       	andi	r19, 0x00	; 0
    100e:	40 70       	andi	r20, 0x00	; 0
    1010:	50 70       	andi	r21, 0x00	; 0
    1012:	a9 01       	movw	r20, r18
    1014:	33 27       	eor	r19, r19
    1016:	22 27       	eor	r18, r18
    1018:	2f 5f       	subi	r18, 0xFF	; 255
    101a:	3f 4f       	sbci	r19, 0xFF	; 255
    101c:	4f 4f       	sbci	r20, 0xFF	; 255
    101e:	5f 4f       	sbci	r21, 0xFF	; 255
    1020:	96 2f       	mov	r25, r22
    1022:	80 e0       	ldi	r24, 0x00	; 0
    1024:	87 0f       	add	r24, r23
    1026:	91 1d       	adc	r25, r1
    1028:	a0 e0       	ldi	r26, 0x00	; 0
    102a:	b0 e0       	ldi	r27, 0x00	; 0
    102c:	28 0f       	add	r18, r24
    102e:	39 1f       	adc	r19, r25
    1030:	4a 1f       	adc	r20, r26
    1032:	5b 1f       	adc	r21, r27
    1034:	aa e0       	ldi	r26, 0x0A	; 10
    1036:	22 0f       	add	r18, r18
    1038:	33 1f       	adc	r19, r19
    103a:	44 1f       	adc	r20, r20
    103c:	55 1f       	adc	r21, r21
    103e:	aa 95       	dec	r26
    1040:	d1 f7       	brne	.-12     	; 0x1036 <mmc_disk_ioctl+0x100>
    1042:	2d c0       	rjmp	.+90     	; 0x109e <mmc_disk_ioctl+0x168>
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
				*(DWORD*)buff = csize << (n - 9);
    1044:	62 95       	swap	r22
    1046:	66 95       	lsr	r22
    1048:	66 95       	lsr	r22
    104a:	63 70       	andi	r22, 0x03	; 3
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	22 0f       	add	r18, r18
    1050:	33 1f       	adc	r19, r19
    1052:	22 0f       	add	r18, r18
    1054:	33 1f       	adc	r19, r19
    1056:	26 0f       	add	r18, r22
    1058:	31 1d       	adc	r19, r1
    105a:	2f 5f       	subi	r18, 0xFF	; 255
    105c:	3f 4f       	sbci	r19, 0xFF	; 255
    105e:	8f 81       	ldd	r24, Y+7	; 0x07
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	83 70       	andi	r24, 0x03	; 3
    1064:	90 70       	andi	r25, 0x00	; 0
    1066:	98 2f       	mov	r25, r24
    1068:	88 27       	eor	r24, r24
    106a:	99 0f       	add	r25, r25
    106c:	99 0f       	add	r25, r25
    106e:	28 0f       	add	r18, r24
    1070:	39 1f       	adc	r19, r25
    1072:	40 e0       	ldi	r20, 0x00	; 0
    1074:	50 e0       	ldi	r21, 0x00	; 0
    1076:	8e 81       	ldd	r24, Y+6	; 0x06
    1078:	8f 70       	andi	r24, 0x0F	; 15
    107a:	6b 85       	ldd	r22, Y+11	; 0x0b
    107c:	66 1f       	adc	r22, r22
    107e:	66 27       	eor	r22, r22
    1080:	66 1f       	adc	r22, r22
    1082:	86 0f       	add	r24, r22
    1084:	8e 5f       	subi	r24, 0xFE	; 254
    1086:	73 70       	andi	r23, 0x03	; 3
    1088:	77 0f       	add	r23, r23
    108a:	87 0f       	add	r24, r23
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	09 97       	sbiw	r24, 0x09	; 9
    1090:	04 c0       	rjmp	.+8      	; 0x109a <mmc_disk_ioctl+0x164>
    1092:	22 0f       	add	r18, r18
    1094:	33 1f       	adc	r19, r19
    1096:	44 1f       	adc	r20, r20
    1098:	55 1f       	adc	r21, r21
    109a:	8a 95       	dec	r24
    109c:	d2 f7       	brpl	.-12     	; 0x1092 <mmc_disk_ioctl+0x15c>
    109e:	f7 01       	movw	r30, r14
    10a0:	20 83       	st	Z, r18
    10a2:	31 83       	std	Z+1, r19	; 0x01
    10a4:	42 83       	std	Z+2, r20	; 0x02
    10a6:	53 83       	std	Z+3, r21	; 0x03
    10a8:	10 e0       	ldi	r17, 0x00	; 0
    10aa:	0b c2       	rjmp	.+1046   	; 0x14c2 <mmc_disk_ioctl+0x58c>
		}
		deselect();
		break;

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDv2? */
    10ac:	80 91 62 06 	lds	r24, 0x0662
    10b0:	18 2f       	mov	r17, r24
    10b2:	82 ff       	sbrs	r24, 2
    10b4:	2c c0       	rjmp	.+88     	; 0x110e <mmc_disk_ioctl+0x1d8>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
    10b6:	8d e8       	ldi	r24, 0x8D	; 141
    10b8:	40 e0       	ldi	r20, 0x00	; 0
    10ba:	50 e0       	ldi	r21, 0x00	; 0
    10bc:	60 e0       	ldi	r22, 0x00	; 0
    10be:	70 e0       	ldi	r23, 0x00	; 0
    10c0:	9b dd       	rcall	.-1226   	; 0xbf8 <send_cmd>
    10c2:	88 23       	and	r24, r24
    10c4:	09 f0       	breq	.+2      	; 0x10c8 <mmc_disk_ioctl+0x192>
    10c6:	fc c1       	rjmp	.+1016   	; 0x14c0 <mmc_disk_ioctl+0x58a>
				xchg_spi(0xFF);
    10c8:	8f ef       	ldi	r24, 0xFF	; 255
    10ca:	fd dc       	rcall	.-1542   	; 0xac6 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
    10cc:	ce 01       	movw	r24, r28
    10ce:	01 96       	adiw	r24, 0x01	; 1
    10d0:	60 e1       	ldi	r22, 0x10	; 16
    10d2:	70 e0       	ldi	r23, 0x00	; 0
    10d4:	28 dd       	rcall	.-1456   	; 0xb26 <rcvr_datablock>
    10d6:	89 2b       	or	r24, r25
    10d8:	09 f4       	brne	.+2      	; 0x10dc <mmc_disk_ioctl+0x1a6>
    10da:	f2 c1       	rjmp	.+996    	; 0x14c0 <mmc_disk_ioctl+0x58a>
    10dc:	10 e3       	ldi	r17, 0x30	; 48
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
    10de:	8f ef       	ldi	r24, 0xFF	; 255
    10e0:	f2 dc       	rcall	.-1564   	; 0xac6 <xchg_spi>
    10e2:	11 50       	subi	r17, 0x01	; 1
    10e4:	e1 f7       	brne	.-8      	; 0x10de <mmc_disk_ioctl+0x1a8>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
    10e6:	2b 85       	ldd	r18, Y+11	; 0x0b
    10e8:	22 95       	swap	r18
    10ea:	2f 70       	andi	r18, 0x0F	; 15
    10ec:	80 e1       	ldi	r24, 0x10	; 16
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	a0 e0       	ldi	r26, 0x00	; 0
    10f2:	b0 e0       	ldi	r27, 0x00	; 0
    10f4:	04 c0       	rjmp	.+8      	; 0x10fe <mmc_disk_ioctl+0x1c8>
    10f6:	88 0f       	add	r24, r24
    10f8:	99 1f       	adc	r25, r25
    10fa:	aa 1f       	adc	r26, r26
    10fc:	bb 1f       	adc	r27, r27
    10fe:	2a 95       	dec	r18
    1100:	d2 f7       	brpl	.-12     	; 0x10f6 <mmc_disk_ioctl+0x1c0>
    1102:	f7 01       	movw	r30, r14
    1104:	80 83       	st	Z, r24
    1106:	91 83       	std	Z+1, r25	; 0x01
    1108:	a2 83       	std	Z+2, r26	; 0x02
    110a:	b3 83       	std	Z+3, r27	; 0x03
    110c:	da c1       	rjmp	.+948    	; 0x14c2 <mmc_disk_ioctl+0x58c>
					res = RES_OK;
				}
			}
		} else {					/* SDv1 or MMCv3 */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
    110e:	89 e0       	ldi	r24, 0x09	; 9
    1110:	40 e0       	ldi	r20, 0x00	; 0
    1112:	50 e0       	ldi	r21, 0x00	; 0
    1114:	60 e0       	ldi	r22, 0x00	; 0
    1116:	70 e0       	ldi	r23, 0x00	; 0
    1118:	6f dd       	rcall	.-1314   	; 0xbf8 <send_cmd>
    111a:	88 23       	and	r24, r24
    111c:	09 f0       	breq	.+2      	; 0x1120 <mmc_disk_ioctl+0x1ea>
    111e:	d0 c1       	rjmp	.+928    	; 0x14c0 <mmc_disk_ioctl+0x58a>
    1120:	ce 01       	movw	r24, r28
    1122:	01 96       	adiw	r24, 0x01	; 1
    1124:	60 e1       	ldi	r22, 0x10	; 16
    1126:	70 e0       	ldi	r23, 0x00	; 0
    1128:	fe dc       	rcall	.-1540   	; 0xb26 <rcvr_datablock>
    112a:	89 2b       	or	r24, r25
    112c:	09 f4       	brne	.+2      	; 0x1130 <mmc_disk_ioctl+0x1fa>
    112e:	c8 c1       	rjmp	.+912    	; 0x14c0 <mmc_disk_ioctl+0x58a>
    1130:	4b 85       	ldd	r20, Y+11	; 0x0b
    1132:	8c 85       	ldd	r24, Y+12	; 0x0c
				if (CardType & CT_SD1) {	/* SDv1 */
    1134:	11 ff       	sbrs	r17, 1
    1136:	1b c0       	rjmp	.+54     	; 0x116e <mmc_disk_ioctl+0x238>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    1138:	88 1f       	adc	r24, r24
    113a:	88 27       	eor	r24, r24
    113c:	88 1f       	adc	r24, r24
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	01 96       	adiw	r24, 0x01	; 1
    1142:	24 2f       	mov	r18, r20
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	2f 73       	andi	r18, 0x3F	; 63
    1148:	30 70       	andi	r19, 0x00	; 0
    114a:	22 0f       	add	r18, r18
    114c:	33 1f       	adc	r19, r19
    114e:	82 0f       	add	r24, r18
    1150:	93 1f       	adc	r25, r19
    1152:	2e 85       	ldd	r18, Y+14	; 0x0e
    1154:	22 95       	swap	r18
    1156:	26 95       	lsr	r18
    1158:	26 95       	lsr	r18
    115a:	23 70       	andi	r18, 0x03	; 3
    115c:	30 e0       	ldi	r19, 0x00	; 0
    115e:	21 50       	subi	r18, 0x01	; 1
    1160:	30 40       	sbci	r19, 0x00	; 0
    1162:	02 c0       	rjmp	.+4      	; 0x1168 <mmc_disk_ioctl+0x232>
    1164:	88 0f       	add	r24, r24
    1166:	99 1f       	adc	r25, r25
    1168:	2a 95       	dec	r18
    116a:	e2 f7       	brpl	.-8      	; 0x1164 <mmc_disk_ioctl+0x22e>
    116c:	21 c0       	rjmp	.+66     	; 0x11b0 <mmc_disk_ioctl+0x27a>
				} else {					/* MMCv3 */
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    116e:	28 2f       	mov	r18, r24
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	23 70       	andi	r18, 0x03	; 3
    1174:	30 70       	andi	r19, 0x00	; 0
    1176:	53 e0       	ldi	r21, 0x03	; 3
    1178:	22 0f       	add	r18, r18
    117a:	33 1f       	adc	r19, r19
    117c:	5a 95       	dec	r21
    117e:	e1 f7       	brne	.-8      	; 0x1178 <mmc_disk_ioctl+0x242>
    1180:	82 95       	swap	r24
    1182:	86 95       	lsr	r24
    1184:	87 70       	andi	r24, 0x07	; 7
    1186:	28 0f       	add	r18, r24
    1188:	31 1d       	adc	r19, r1
    118a:	2f 5f       	subi	r18, 0xFF	; 255
    118c:	3f 4f       	sbci	r19, 0xFF	; 255
    118e:	84 2f       	mov	r24, r20
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	8c 77       	andi	r24, 0x7C	; 124
    1194:	90 70       	andi	r25, 0x00	; 0
    1196:	95 95       	asr	r25
    1198:	87 95       	ror	r24
    119a:	95 95       	asr	r25
    119c:	87 95       	ror	r24
    119e:	01 96       	adiw	r24, 0x01	; 1
    11a0:	ac 01       	movw	r20, r24
    11a2:	24 9f       	mul	r18, r20
    11a4:	c0 01       	movw	r24, r0
    11a6:	25 9f       	mul	r18, r21
    11a8:	90 0d       	add	r25, r0
    11aa:	34 9f       	mul	r19, r20
    11ac:	90 0d       	add	r25, r0
    11ae:	11 24       	eor	r1, r1
    11b0:	a0 e0       	ldi	r26, 0x00	; 0
    11b2:	b0 e0       	ldi	r27, 0x00	; 0
    11b4:	f7 01       	movw	r30, r14
    11b6:	80 83       	st	Z, r24
    11b8:	91 83       	std	Z+1, r25	; 0x01
    11ba:	a2 83       	std	Z+2, r26	; 0x02
    11bc:	b3 83       	std	Z+3, r27	; 0x03
    11be:	74 cf       	rjmp	.-280    	; 0x10a8 <mmc_disk_ioctl+0x172>
		}
		deselect();
		break;

	case CTRL_TRIM:		/* Erase a block of sectors (used when _USE_TRIM in ffconf.h is 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
    11c0:	80 91 62 06 	lds	r24, 0x0662
    11c4:	c8 2e       	mov	r12, r24
    11c6:	dd 24       	eor	r13, r13
    11c8:	c6 01       	movw	r24, r12
    11ca:	86 70       	andi	r24, 0x06	; 6
    11cc:	90 70       	andi	r25, 0x00	; 0
    11ce:	89 2b       	or	r24, r25
    11d0:	09 f4       	brne	.+2      	; 0x11d4 <mmc_disk_ioctl+0x29e>
    11d2:	79 c1       	rjmp	.+754    	; 0x14c6 <mmc_disk_ioctl+0x590>
		if (mmc_disk_ioctl(MMC_GET_CSD, csd)) break;	/* Get CSD */
    11d4:	83 e3       	ldi	r24, 0x33	; 51
    11d6:	be 01       	movw	r22, r28
    11d8:	6f 5f       	subi	r22, 0xFF	; 255
    11da:	7f 4f       	sbci	r23, 0xFF	; 255
    11dc:	ac de       	rcall	.-680    	; 0xf36 <mmc_disk_ioctl>
    11de:	88 23       	and	r24, r24
    11e0:	09 f0       	breq	.+2      	; 0x11e4 <mmc_disk_ioctl+0x2ae>
    11e2:	71 c1       	rjmp	.+738    	; 0x14c6 <mmc_disk_ioctl+0x590>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
    11e4:	89 81       	ldd	r24, Y+1	; 0x01
    11e6:	82 95       	swap	r24
    11e8:	86 95       	lsr	r24
    11ea:	86 95       	lsr	r24
    11ec:	83 70       	andi	r24, 0x03	; 3
    11ee:	19 f4       	brne	.+6      	; 0x11f6 <mmc_disk_ioctl+0x2c0>
    11f0:	8b 85       	ldd	r24, Y+11	; 0x0b
    11f2:	86 ff       	sbrs	r24, 6
    11f4:	68 c1       	rjmp	.+720    	; 0x14c6 <mmc_disk_ioctl+0x590>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
    11f6:	f7 01       	movw	r30, r14
    11f8:	40 81       	ld	r20, Z
    11fa:	51 81       	ldd	r21, Z+1	; 0x01
    11fc:	62 81       	ldd	r22, Z+2	; 0x02
    11fe:	73 81       	ldd	r23, Z+3	; 0x03
    1200:	e4 80       	ldd	r14, Z+4	; 0x04
    1202:	f5 80       	ldd	r15, Z+5	; 0x05
    1204:	06 81       	ldd	r16, Z+6	; 0x06
    1206:	17 81       	ldd	r17, Z+7	; 0x07
		if (!(CardType & CT_BLOCK)) {
    1208:	c3 fc       	sbrc	r12, 3
    120a:	0e c0       	rjmp	.+28     	; 0x1228 <mmc_disk_ioctl+0x2f2>
			st *= 512; ed *= 512;
    120c:	29 e0       	ldi	r18, 0x09	; 9
    120e:	44 0f       	add	r20, r20
    1210:	55 1f       	adc	r21, r21
    1212:	66 1f       	adc	r22, r22
    1214:	77 1f       	adc	r23, r23
    1216:	2a 95       	dec	r18
    1218:	d1 f7       	brne	.-12     	; 0x120e <mmc_disk_ioctl+0x2d8>
    121a:	99 e0       	ldi	r25, 0x09	; 9
    121c:	ee 0c       	add	r14, r14
    121e:	ff 1c       	adc	r15, r15
    1220:	00 1f       	adc	r16, r16
    1222:	11 1f       	adc	r17, r17
    1224:	9a 95       	dec	r25
    1226:	d1 f7       	brne	.-12     	; 0x121c <mmc_disk_ioctl+0x2e6>
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
    1228:	80 e2       	ldi	r24, 0x20	; 32
    122a:	e6 dc       	rcall	.-1588   	; 0xbf8 <send_cmd>
    122c:	88 23       	and	r24, r24
    122e:	09 f0       	breq	.+2      	; 0x1232 <mmc_disk_ioctl+0x2fc>
    1230:	4a c1       	rjmp	.+660    	; 0x14c6 <mmc_disk_ioctl+0x590>
    1232:	81 e2       	ldi	r24, 0x21	; 33
    1234:	b8 01       	movw	r22, r16
    1236:	a7 01       	movw	r20, r14
    1238:	df dc       	rcall	.-1602   	; 0xbf8 <send_cmd>
    123a:	88 23       	and	r24, r24
    123c:	09 f0       	breq	.+2      	; 0x1240 <mmc_disk_ioctl+0x30a>
    123e:	43 c1       	rjmp	.+646    	; 0x14c6 <mmc_disk_ioctl+0x590>
    1240:	86 e2       	ldi	r24, 0x26	; 38
    1242:	40 e0       	ldi	r20, 0x00	; 0
    1244:	50 e0       	ldi	r21, 0x00	; 0
    1246:	60 e0       	ldi	r22, 0x00	; 0
    1248:	70 e0       	ldi	r23, 0x00	; 0
    124a:	d6 dc       	rcall	.-1620   	; 0xbf8 <send_cmd>
    124c:	88 23       	and	r24, r24
    124e:	09 f0       	breq	.+2      	; 0x1252 <mmc_disk_ioctl+0x31c>
    1250:	3a c1       	rjmp	.+628    	; 0x14c6 <mmc_disk_ioctl+0x590>
    1252:	80 e3       	ldi	r24, 0x30	; 48
    1254:	95 e7       	ldi	r25, 0x75	; 117
    1256:	3d dc       	rcall	.-1926   	; 0xad2 <wait_ready>
    1258:	10 e0       	ldi	r17, 0x00	; 0
    125a:	89 2b       	or	r24, r25
    125c:	09 f0       	breq	.+2      	; 0x1260 <mmc_disk_ioctl+0x32a>
    125e:	34 c1       	rjmp	.+616    	; 0x14c8 <mmc_disk_ioctl+0x592>
    1260:	32 c1       	rjmp	.+612    	; 0x14c6 <mmc_disk_ioctl+0x590>
		break;

	/* Following commands are never used by FatFs module */

	case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
		*ptr = CardType;
    1262:	80 91 62 06 	lds	r24, 0x0662
    1266:	fb 01       	movw	r30, r22
    1268:	80 83       	st	Z, r24
    126a:	40 c0       	rjmp	.+128    	; 0x12ec <mmc_disk_ioctl+0x3b6>
		res = RES_OK;
		break;

	case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
		if (send_cmd(CMD9, 0) == 0 && rcvr_datablock(ptr, 16)) {	/* READ_CSD */
    126c:	89 e0       	ldi	r24, 0x09	; 9
    126e:	01 c0       	rjmp	.+2      	; 0x1272 <mmc_disk_ioctl+0x33c>
		}
		deselect();
		break;

	case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
		if (send_cmd(CMD10, 0) == 0 && rcvr_datablock(ptr, 16)) {	/* READ_CID */
    1270:	8a e0       	ldi	r24, 0x0A	; 10
    1272:	40 e0       	ldi	r20, 0x00	; 0
    1274:	50 e0       	ldi	r21, 0x00	; 0
    1276:	60 e0       	ldi	r22, 0x00	; 0
    1278:	70 e0       	ldi	r23, 0x00	; 0
    127a:	be dc       	rcall	.-1668   	; 0xbf8 <send_cmd>
    127c:	88 23       	and	r24, r24
    127e:	09 f0       	breq	.+2      	; 0x1282 <mmc_disk_ioctl+0x34c>
    1280:	1f c1       	rjmp	.+574    	; 0x14c0 <mmc_disk_ioctl+0x58a>
    1282:	c7 01       	movw	r24, r14
    1284:	60 e1       	ldi	r22, 0x10	; 16
    1286:	70 e0       	ldi	r23, 0x00	; 0
    1288:	26 c0       	rjmp	.+76     	; 0x12d6 <mmc_disk_ioctl+0x3a0>
		}
		deselect();
		break;

	case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
		if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
    128a:	8a e3       	ldi	r24, 0x3A	; 58
    128c:	40 e0       	ldi	r20, 0x00	; 0
    128e:	50 e0       	ldi	r21, 0x00	; 0
    1290:	60 e0       	ldi	r22, 0x00	; 0
    1292:	70 e0       	ldi	r23, 0x00	; 0
    1294:	b1 dc       	rcall	.-1694   	; 0xbf8 <send_cmd>
    1296:	88 23       	and	r24, r24
    1298:	09 f0       	breq	.+2      	; 0x129c <mmc_disk_ioctl+0x366>
    129a:	12 c1       	rjmp	.+548    	; 0x14c0 <mmc_disk_ioctl+0x58a>
    129c:	87 01       	movw	r16, r14
			for (n = 4; n; n--) *ptr++ = xchg_spi(0xFF);
    129e:	84 e0       	ldi	r24, 0x04	; 4
    12a0:	e8 2e       	mov	r14, r24
    12a2:	f1 2c       	mov	r15, r1
    12a4:	e0 0e       	add	r14, r16
    12a6:	f1 1e       	adc	r15, r17
    12a8:	8f ef       	ldi	r24, 0xFF	; 255
    12aa:	0d dc       	rcall	.-2022   	; 0xac6 <xchg_spi>
    12ac:	f8 01       	movw	r30, r16
    12ae:	81 93       	st	Z+, r24
    12b0:	8f 01       	movw	r16, r30
    12b2:	ee 15       	cp	r30, r14
    12b4:	ff 05       	cpc	r31, r15
    12b6:	c1 f7       	brne	.-16     	; 0x12a8 <mmc_disk_ioctl+0x372>
    12b8:	f7 ce       	rjmp	.-530    	; 0x10a8 <mmc_disk_ioctl+0x172>
		}
		deselect();
		break;

	case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
		if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
    12ba:	8d e8       	ldi	r24, 0x8D	; 141
    12bc:	40 e0       	ldi	r20, 0x00	; 0
    12be:	50 e0       	ldi	r21, 0x00	; 0
    12c0:	60 e0       	ldi	r22, 0x00	; 0
    12c2:	70 e0       	ldi	r23, 0x00	; 0
    12c4:	99 dc       	rcall	.-1742   	; 0xbf8 <send_cmd>
    12c6:	88 23       	and	r24, r24
    12c8:	09 f0       	breq	.+2      	; 0x12cc <mmc_disk_ioctl+0x396>
    12ca:	fa c0       	rjmp	.+500    	; 0x14c0 <mmc_disk_ioctl+0x58a>
			xchg_spi(0xFF);
    12cc:	8f ef       	ldi	r24, 0xFF	; 255
    12ce:	fb db       	rcall	.-2058   	; 0xac6 <xchg_spi>
			if (rcvr_datablock(ptr, 64)) res = RES_OK;
    12d0:	c7 01       	movw	r24, r14
    12d2:	60 e4       	ldi	r22, 0x40	; 64
    12d4:	70 e0       	ldi	r23, 0x00	; 0
    12d6:	27 dc       	rcall	.-1970   	; 0xb26 <rcvr_datablock>
    12d8:	89 2b       	or	r24, r25
    12da:	09 f4       	brne	.+2      	; 0x12de <mmc_disk_ioctl+0x3a8>
    12dc:	f1 c0       	rjmp	.+482    	; 0x14c0 <mmc_disk_ioctl+0x58a>
    12de:	e4 ce       	rjmp	.-568    	; 0x10a8 <mmc_disk_ioctl+0x172>
		}
		deselect();
		break;

	case CTRL_POWER_OFF :	/* Power off */
		power_off();
    12e0:	ee db       	rcall	.-2084   	; 0xabe <power_off>
		Stat |= STA_NOINIT;
    12e2:	80 91 1c 02 	lds	r24, 0x021C
    12e6:	81 60       	ori	r24, 0x01	; 1
    12e8:	80 93 1c 02 	sts	0x021C, r24
    12ec:	10 e0       	ldi	r17, 0x00	; 0
    12ee:	ec c0       	rjmp	.+472    	; 0x14c8 <mmc_disk_ioctl+0x592>
		res = RES_OK;
		break;
#if _USE_ISDIO
	case ISDIO_READ:
		sdi = buff;
		if (send_cmd(CMD48, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0) {
    12f0:	fb 01       	movw	r30, r22
    12f2:	43 81       	ldd	r20, Z+3	; 0x03
    12f4:	54 81       	ldd	r21, Z+4	; 0x04
    12f6:	65 81       	ldd	r22, Z+5	; 0x05
    12f8:	76 81       	ldd	r23, Z+6	; 0x06
    12fa:	09 e0       	ldi	r16, 0x09	; 9
    12fc:	44 0f       	add	r20, r20
    12fe:	55 1f       	adc	r21, r21
    1300:	66 1f       	adc	r22, r22
    1302:	77 1f       	adc	r23, r23
    1304:	0a 95       	dec	r16
    1306:	d1 f7       	brne	.-12     	; 0x12fc <mmc_disk_ioctl+0x3c6>
    1308:	70 68       	ori	r23, 0x80	; 128
    130a:	80 81       	ld	r24, Z
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	a0 e0       	ldi	r26, 0x00	; 0
    1310:	b0 e0       	ldi	r27, 0x00	; 0
    1312:	1c e1       	ldi	r17, 0x1C	; 28
    1314:	88 0f       	add	r24, r24
    1316:	99 1f       	adc	r25, r25
    1318:	aa 1f       	adc	r26, r26
    131a:	bb 1f       	adc	r27, r27
    131c:	1a 95       	dec	r17
    131e:	d1 f7       	brne	.-12     	; 0x1314 <mmc_disk_ioctl+0x3de>
    1320:	48 2b       	or	r20, r24
    1322:	59 2b       	or	r21, r25
    1324:	6a 2b       	or	r22, r26
    1326:	7b 2b       	or	r23, r27
    1328:	81 81       	ldd	r24, Z+1	; 0x01
    132a:	92 81       	ldd	r25, Z+2	; 0x02
    132c:	01 97       	sbiw	r24, 0x01	; 1
    132e:	a0 e0       	ldi	r26, 0x00	; 0
    1330:	b0 e0       	ldi	r27, 0x00	; 0
    1332:	91 70       	andi	r25, 0x01	; 1
    1334:	a0 70       	andi	r26, 0x00	; 0
    1336:	b0 70       	andi	r27, 0x00	; 0
    1338:	48 2b       	or	r20, r24
    133a:	59 2b       	or	r21, r25
    133c:	6a 2b       	or	r22, r26
    133e:	7b 2b       	or	r23, r27
    1340:	80 e3       	ldi	r24, 0x30	; 48
    1342:	5a dc       	rcall	.-1868   	; 0xbf8 <send_cmd>
    1344:	88 23       	and	r24, r24
    1346:	09 f0       	breq	.+2      	; 0x134a <mmc_disk_ioctl+0x414>
    1348:	bb c0       	rjmp	.+374    	; 0x14c0 <mmc_disk_ioctl+0x58a>
			for (Timer1 = 100; (rc = xchg_spi(0xFF)) == 0xFF && Timer1; ) ;
    134a:	84 e6       	ldi	r24, 0x64	; 100
    134c:	80 93 60 06 	sts	0x0660, r24
    1350:	8f ef       	ldi	r24, 0xFF	; 255
    1352:	b9 db       	rcall	.-2190   	; 0xac6 <xchg_spi>
    1354:	8f 3f       	cpi	r24, 0xFF	; 255
    1356:	29 f4       	brne	.+10     	; 0x1362 <mmc_disk_ioctl+0x42c>
    1358:	80 91 60 06 	lds	r24, 0x0660
    135c:	88 23       	and	r24, r24
    135e:	c1 f7       	brne	.-16     	; 0x1350 <mmc_disk_ioctl+0x41a>
    1360:	af c0       	rjmp	.+350    	; 0x14c0 <mmc_disk_ioctl+0x58a>
			if (rc == 0xFE) {
    1362:	8e 3f       	cpi	r24, 0xFE	; 254
    1364:	09 f0       	breq	.+2      	; 0x1368 <mmc_disk_ioctl+0x432>
    1366:	ac c0       	rjmp	.+344    	; 0x14c0 <mmc_disk_ioctl+0x58a>
				for (bp = sdi->data, dc = sdi->ndata; dc; dc--) *bp++ = xchg_spi(0xFF);
    1368:	f7 01       	movw	r30, r14
    136a:	c7 80       	ldd	r12, Z+7	; 0x07
    136c:	d0 84       	ldd	r13, Z+8	; 0x08
    136e:	01 81       	ldd	r16, Z+1	; 0x01
    1370:	12 81       	ldd	r17, Z+2	; 0x02
    1372:	07 c0       	rjmp	.+14     	; 0x1382 <mmc_disk_ioctl+0x44c>
    1374:	8f ef       	ldi	r24, 0xFF	; 255
    1376:	a7 db       	rcall	.-2226   	; 0xac6 <xchg_spi>
    1378:	f6 01       	movw	r30, r12
    137a:	81 93       	st	Z+, r24
    137c:	6f 01       	movw	r12, r30
    137e:	01 50       	subi	r16, 0x01	; 1
    1380:	10 40       	sbci	r17, 0x00	; 0
    1382:	01 15       	cp	r16, r1
    1384:	11 05       	cpc	r17, r1
    1386:	b1 f7       	brne	.-20     	; 0x1374 <mmc_disk_ioctl+0x43e>
				for (dc = 514 - sdi->ndata; dc; dc--) xchg_spi(0xFF);
    1388:	02 e0       	ldi	r16, 0x02	; 2
    138a:	12 e0       	ldi	r17, 0x02	; 2
    138c:	f7 01       	movw	r30, r14
    138e:	81 81       	ldd	r24, Z+1	; 0x01
    1390:	92 81       	ldd	r25, Z+2	; 0x02
    1392:	08 1b       	sub	r16, r24
    1394:	19 0b       	sbc	r17, r25
    1396:	04 c0       	rjmp	.+8      	; 0x13a0 <mmc_disk_ioctl+0x46a>
    1398:	8f ef       	ldi	r24, 0xFF	; 255
    139a:	95 db       	rcall	.-2262   	; 0xac6 <xchg_spi>
    139c:	01 50       	subi	r16, 0x01	; 1
    139e:	10 40       	sbci	r17, 0x00	; 0
    13a0:	01 15       	cp	r16, r1
    13a2:	11 05       	cpc	r17, r1
    13a4:	c9 f7       	brne	.-14     	; 0x1398 <mmc_disk_ioctl+0x462>
    13a6:	80 ce       	rjmp	.-768    	; 0x10a8 <mmc_disk_ioctl+0x172>
		deselect();
		break;

	case ISDIO_WRITE:
		sdi = buff;
		if (send_cmd(CMD49, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0) {
    13a8:	fb 01       	movw	r30, r22
    13aa:	43 81       	ldd	r20, Z+3	; 0x03
    13ac:	54 81       	ldd	r21, Z+4	; 0x04
    13ae:	65 81       	ldd	r22, Z+5	; 0x05
    13b0:	76 81       	ldd	r23, Z+6	; 0x06
    13b2:	39 e0       	ldi	r19, 0x09	; 9
    13b4:	44 0f       	add	r20, r20
    13b6:	55 1f       	adc	r21, r21
    13b8:	66 1f       	adc	r22, r22
    13ba:	77 1f       	adc	r23, r23
    13bc:	3a 95       	dec	r19
    13be:	d1 f7       	brne	.-12     	; 0x13b4 <mmc_disk_ioctl+0x47e>
    13c0:	70 68       	ori	r23, 0x80	; 128
    13c2:	80 81       	ld	r24, Z
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	a0 e0       	ldi	r26, 0x00	; 0
    13c8:	b0 e0       	ldi	r27, 0x00	; 0
    13ca:	2c e1       	ldi	r18, 0x1C	; 28
    13cc:	88 0f       	add	r24, r24
    13ce:	99 1f       	adc	r25, r25
    13d0:	aa 1f       	adc	r26, r26
    13d2:	bb 1f       	adc	r27, r27
    13d4:	2a 95       	dec	r18
    13d6:	d1 f7       	brne	.-12     	; 0x13cc <mmc_disk_ioctl+0x496>
    13d8:	48 2b       	or	r20, r24
    13da:	59 2b       	or	r21, r25
    13dc:	6a 2b       	or	r22, r26
    13de:	7b 2b       	or	r23, r27
    13e0:	81 81       	ldd	r24, Z+1	; 0x01
    13e2:	92 81       	ldd	r25, Z+2	; 0x02
    13e4:	01 97       	sbiw	r24, 0x01	; 1
    13e6:	a0 e0       	ldi	r26, 0x00	; 0
    13e8:	b0 e0       	ldi	r27, 0x00	; 0
    13ea:	91 70       	andi	r25, 0x01	; 1
    13ec:	a0 70       	andi	r26, 0x00	; 0
    13ee:	b0 70       	andi	r27, 0x00	; 0
    13f0:	48 2b       	or	r20, r24
    13f2:	59 2b       	or	r21, r25
    13f4:	6a 2b       	or	r22, r26
    13f6:	7b 2b       	or	r23, r27
    13f8:	81 e3       	ldi	r24, 0x31	; 49
    13fa:	fe db       	rcall	.-2052   	; 0xbf8 <send_cmd>
    13fc:	88 23       	and	r24, r24
    13fe:	09 f0       	breq	.+2      	; 0x1402 <mmc_disk_ioctl+0x4cc>
    1400:	5f c0       	rjmp	.+190    	; 0x14c0 <mmc_disk_ioctl+0x58a>
			xchg_spi(0xFF); xchg_spi(0xFE);
    1402:	8f ef       	ldi	r24, 0xFF	; 255
    1404:	60 db       	rcall	.-2368   	; 0xac6 <xchg_spi>
    1406:	8e ef       	ldi	r24, 0xFE	; 254
    1408:	5e db       	rcall	.-2372   	; 0xac6 <xchg_spi>
			for (bp = sdi->data, dc = sdi->ndata; dc; dc--) xchg_spi(*bp++);
    140a:	f7 01       	movw	r30, r14
    140c:	c7 80       	ldd	r12, Z+7	; 0x07
    140e:	d0 84       	ldd	r13, Z+8	; 0x08
    1410:	01 81       	ldd	r16, Z+1	; 0x01
    1412:	12 81       	ldd	r17, Z+2	; 0x02
    1414:	06 c0       	rjmp	.+12     	; 0x1422 <mmc_disk_ioctl+0x4ec>
    1416:	f6 01       	movw	r30, r12
    1418:	81 91       	ld	r24, Z+
    141a:	6f 01       	movw	r12, r30
    141c:	54 db       	rcall	.-2392   	; 0xac6 <xchg_spi>
    141e:	01 50       	subi	r16, 0x01	; 1
    1420:	10 40       	sbci	r17, 0x00	; 0
    1422:	01 15       	cp	r16, r1
    1424:	11 05       	cpc	r17, r1
    1426:	b9 f7       	brne	.-18     	; 0x1416 <mmc_disk_ioctl+0x4e0>
			for (dc = 514 - sdi->ndata; dc; dc--) xchg_spi(0xFF);
    1428:	02 e0       	ldi	r16, 0x02	; 2
    142a:	12 e0       	ldi	r17, 0x02	; 2
    142c:	f7 01       	movw	r30, r14
    142e:	81 81       	ldd	r24, Z+1	; 0x01
    1430:	92 81       	ldd	r25, Z+2	; 0x02
    1432:	08 1b       	sub	r16, r24
    1434:	19 0b       	sbc	r17, r25
    1436:	04 c0       	rjmp	.+8      	; 0x1440 <mmc_disk_ioctl+0x50a>
    1438:	8f ef       	ldi	r24, 0xFF	; 255
    143a:	45 db       	rcall	.-2422   	; 0xac6 <xchg_spi>
    143c:	01 50       	subi	r16, 0x01	; 1
    143e:	10 40       	sbci	r17, 0x00	; 0
    1440:	01 15       	cp	r16, r1
    1442:	11 05       	cpc	r17, r1
    1444:	c9 f7       	brne	.-14     	; 0x1438 <mmc_disk_ioctl+0x502>
    1446:	36 c0       	rjmp	.+108    	; 0x14b4 <mmc_disk_ioctl+0x57e>
		deselect();
		break;

	case ISDIO_MRITE:
		sdi = buff;
		if (send_cmd(CMD49, 0x84000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | sdi->ndata >> 8) == 0) {
    1448:	fb 01       	movw	r30, r22
    144a:	43 81       	ldd	r20, Z+3	; 0x03
    144c:	54 81       	ldd	r21, Z+4	; 0x04
    144e:	65 81       	ldd	r22, Z+5	; 0x05
    1450:	76 81       	ldd	r23, Z+6	; 0x06
    1452:	09 e0       	ldi	r16, 0x09	; 9
    1454:	44 0f       	add	r20, r20
    1456:	55 1f       	adc	r21, r21
    1458:	66 1f       	adc	r22, r22
    145a:	77 1f       	adc	r23, r23
    145c:	0a 95       	dec	r16
    145e:	d1 f7       	brne	.-12     	; 0x1454 <mmc_disk_ioctl+0x51e>
    1460:	74 68       	ori	r23, 0x84	; 132
    1462:	80 81       	ld	r24, Z
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	a0 e0       	ldi	r26, 0x00	; 0
    1468:	b0 e0       	ldi	r27, 0x00	; 0
    146a:	1c e1       	ldi	r17, 0x1C	; 28
    146c:	88 0f       	add	r24, r24
    146e:	99 1f       	adc	r25, r25
    1470:	aa 1f       	adc	r26, r26
    1472:	bb 1f       	adc	r27, r27
    1474:	1a 95       	dec	r17
    1476:	d1 f7       	brne	.-12     	; 0x146c <mmc_disk_ioctl+0x536>
    1478:	48 2b       	or	r20, r24
    147a:	59 2b       	or	r21, r25
    147c:	6a 2b       	or	r22, r26
    147e:	7b 2b       	or	r23, r27
    1480:	82 81       	ldd	r24, Z+2	; 0x02
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	a0 e0       	ldi	r26, 0x00	; 0
    1486:	b0 e0       	ldi	r27, 0x00	; 0
    1488:	48 2b       	or	r20, r24
    148a:	59 2b       	or	r21, r25
    148c:	6a 2b       	or	r22, r26
    148e:	7b 2b       	or	r23, r27
    1490:	81 e3       	ldi	r24, 0x31	; 49
    1492:	b2 db       	rcall	.-2204   	; 0xbf8 <send_cmd>
    1494:	88 23       	and	r24, r24
    1496:	a1 f4       	brne	.+40     	; 0x14c0 <mmc_disk_ioctl+0x58a>
			xchg_spi(0xFF); xchg_spi(0xFE);
    1498:	8f ef       	ldi	r24, 0xFF	; 255
    149a:	15 db       	rcall	.-2518   	; 0xac6 <xchg_spi>
    149c:	8e ef       	ldi	r24, 0xFE	; 254
    149e:	13 db       	rcall	.-2522   	; 0xac6 <xchg_spi>
			xchg_spi(sdi->ndata);
    14a0:	f7 01       	movw	r30, r14
    14a2:	81 81       	ldd	r24, Z+1	; 0x01
    14a4:	10 db       	rcall	.-2528   	; 0xac6 <xchg_spi>
    14a6:	01 e0       	ldi	r16, 0x01	; 1
    14a8:	12 e0       	ldi	r17, 0x02	; 2
			for (dc = 513; dc; dc--) xchg_spi(0xFF);
    14aa:	8f ef       	ldi	r24, 0xFF	; 255
    14ac:	0c db       	rcall	.-2536   	; 0xac6 <xchg_spi>
    14ae:	01 50       	subi	r16, 0x01	; 1
    14b0:	10 40       	sbci	r17, 0x00	; 0
    14b2:	d9 f7       	brne	.-10     	; 0x14aa <mmc_disk_ioctl+0x574>
			if ((xchg_spi(0xFF) & 0x1F) == 0x05) res = RES_OK;
    14b4:	8f ef       	ldi	r24, 0xFF	; 255
    14b6:	07 db       	rcall	.-2546   	; 0xac6 <xchg_spi>
    14b8:	8f 71       	andi	r24, 0x1F	; 31
    14ba:	85 30       	cpi	r24, 0x05	; 5
    14bc:	09 f4       	brne	.+2      	; 0x14c0 <mmc_disk_ioctl+0x58a>
    14be:	f4 cd       	rjmp	.-1048   	; 0x10a8 <mmc_disk_ioctl+0x172>
    14c0:	11 e0       	ldi	r17, 0x01	; 1
		}
		deselect();
    14c2:	1e db       	rcall	.-2500   	; 0xb00 <deselect>
    14c4:	01 c0       	rjmp	.+2      	; 0x14c8 <mmc_disk_ioctl+0x592>
		break;
    14c6:	11 e0       	ldi	r17, 0x01	; 1
	default:
		res = RES_PARERR;
	}

	return res;
}
    14c8:	81 2f       	mov	r24, r17
    14ca:	60 96       	adiw	r28, 0x10	; 16
    14cc:	0f b6       	in	r0, 0x3f	; 63
    14ce:	f8 94       	cli
    14d0:	de bf       	out	0x3e, r29	; 62
    14d2:	0f be       	out	0x3f, r0	; 63
    14d4:	cd bf       	out	0x3d, r28	; 61
    14d6:	cf 91       	pop	r28
    14d8:	df 91       	pop	r29
    14da:	1f 91       	pop	r17
    14dc:	0f 91       	pop	r16
    14de:	ff 90       	pop	r15
    14e0:	ef 90       	pop	r14
    14e2:	df 90       	pop	r13
    14e4:	cf 90       	pop	r12
    14e6:	08 95       	ret

000014e8 <mmc_disk_timerproc>:
void mmc_disk_timerproc (void)
{
	BYTE n, s;


	n = Timer1;				/* 100Hz decrement timer */
    14e8:	80 91 60 06 	lds	r24, 0x0660
	if (n) Timer1 = --n;
    14ec:	88 23       	and	r24, r24
    14ee:	19 f0       	breq	.+6      	; 0x14f6 <mmc_disk_timerproc+0xe>
    14f0:	81 50       	subi	r24, 0x01	; 1
    14f2:	80 93 60 06 	sts	0x0660, r24
	n = Timer2;
    14f6:	80 91 61 06 	lds	r24, 0x0661
	if (n) Timer2 = --n;
    14fa:	88 23       	and	r24, r24
    14fc:	19 f0       	breq	.+6      	; 0x1504 <mmc_disk_timerproc+0x1c>
    14fe:	81 50       	subi	r24, 0x01	; 1
    1500:	80 93 61 06 	sts	0x0661, r24

	s = Stat;
    1504:	80 91 1c 02 	lds	r24, 0x021C
}
    1508:	08 95       	ret

0000150a <SCSI_Command_ReadWrite_10>:
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_ReadWrite_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo,
                                      const bool IsDataRead)
{
    150a:	bf 92       	push	r11
    150c:	cf 92       	push	r12
    150e:	df 92       	push	r13
    1510:	ef 92       	push	r14
    1512:	ff 92       	push	r15
    1514:	0f 93       	push	r16
    1516:	1f 93       	push	r17
    1518:	cf 93       	push	r28
    151a:	df 93       	push	r29
    151c:	6c 01       	movw	r12, r24
    151e:	b6 2e       	mov	r11, r22

				Temp = Data.Bytes[1];
				Data.Bytes[1] = Data.Bytes[2];
				Data.Bytes[2] = Temp;

				return Data.DWord;
    1520:	fc 01       	movw	r30, r24
    1522:	e0 a0       	ldd	r14, Z+32	; 0x20
    1524:	f7 8c       	ldd	r15, Z+31	; 0x1f
    1526:	06 8d       	ldd	r16, Z+30	; 0x1e
    1528:	15 8d       	ldd	r17, Z+29	; 0x1d

				Temp = Data.Bytes[0];
				Data.Bytes[0] = Data.Bytes[1];
				Data.Bytes[1] = Temp;

				return Data.Word;
    152a:	c3 a1       	ldd	r28, Z+35	; 0x23
    152c:	d2 a1       	ldd	r29, Z+34	; 0x22

	/* Load in the 16-bit total blocks (SCSI uses big-endian, so have to reverse the byte order) */
	TotalBlocks  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[7]);

	/* Check if the block address is outside the maximum allowable value for the LUN */
	if (BlockAddress >= LUN_MEDIA_BLOCKS)
    152e:	22 da       	rcall	.-3004   	; 0x974 <SDCardManager_GetNbBlocks>
    1530:	e6 16       	cp	r14, r22
    1532:	f7 06       	cpc	r15, r23
    1534:	08 07       	cpc	r16, r24
    1536:	19 07       	cpc	r17, r25
    1538:	68 f0       	brcs	.+26     	; 0x1554 <SCSI_Command_ReadWrite_10+0x4a>
	{
		/* Block address is invalid, update SENSE key and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
    153a:	80 91 1f 02 	lds	r24, 0x021F
    153e:	80 7f       	andi	r24, 0xF0	; 240
    1540:	85 60       	ori	r24, 0x05	; 5
    1542:	80 93 1f 02 	sts	0x021F, r24
    1546:	81 e2       	ldi	r24, 0x21	; 33
    1548:	80 93 29 02 	sts	0x0229, r24
    154c:	10 92 2a 02 	sts	0x022A, r1
    1550:	80 e0       	ldi	r24, 0x00	; 0
    1552:	25 c0       	rjmp	.+74     	; 0x159e <SCSI_Command_ReadWrite_10+0x94>
	/* Adjust the given block address to the real media address based on the selected LUN */
	BlockAddress += ((uint32_t)MSInterfaceInfo->State.CommandBlock.LUN * LUN_MEDIA_BLOCKS);
	#endif

	/* Determine if the packet is a READ (10) or WRITE (10) command, call appropriate function */
	if (IsDataRead == DATA_READ)
    1554:	bb 20       	and	r11, r11
    1556:	31 f0       	breq	.+12     	; 0x1564 <SCSI_Command_ReadWrite_10+0x5a>
	  SDCardManager_ReadBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
    1558:	c6 01       	movw	r24, r12
    155a:	b8 01       	movw	r22, r16
    155c:	a7 01       	movw	r20, r14
    155e:	9e 01       	movw	r18, r28
    1560:	f8 d8       	rcall	.-3600   	; 0x752 <SDCardManager_ReadBlocks>
    1562:	05 c0       	rjmp	.+10     	; 0x156e <SCSI_Command_ReadWrite_10+0x64>
	else
	  SDCardManager_WriteBlocks(MSInterfaceInfo, BlockAddress, TotalBlocks);
    1564:	c6 01       	movw	r24, r12
    1566:	b8 01       	movw	r22, r16
    1568:	a7 01       	movw	r20, r14
    156a:	9e 01       	movw	r18, r28
    156c:	95 d9       	rcall	.-3286   	; 0x898 <SDCardManager_WriteBlocks>

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= ((uint32_t)TotalBlocks * VIRTUAL_MEMORY_BLOCK_SIZE);
    156e:	9e 01       	movw	r18, r28
    1570:	40 e0       	ldi	r20, 0x00	; 0
    1572:	50 e0       	ldi	r21, 0x00	; 0
    1574:	89 e0       	ldi	r24, 0x09	; 9
    1576:	22 0f       	add	r18, r18
    1578:	33 1f       	adc	r19, r19
    157a:	44 1f       	adc	r20, r20
    157c:	55 1f       	adc	r21, r21
    157e:	8a 95       	dec	r24
    1580:	d1 f7       	brne	.-12     	; 0x1576 <SCSI_Command_ReadWrite_10+0x6c>
    1582:	f6 01       	movw	r30, r12
    1584:	84 89       	ldd	r24, Z+20	; 0x14
    1586:	95 89       	ldd	r25, Z+21	; 0x15
    1588:	a6 89       	ldd	r26, Z+22	; 0x16
    158a:	b7 89       	ldd	r27, Z+23	; 0x17
    158c:	82 1b       	sub	r24, r18
    158e:	93 0b       	sbc	r25, r19
    1590:	a4 0b       	sbc	r26, r20
    1592:	b5 0b       	sbc	r27, r21
    1594:	84 8b       	std	Z+20, r24	; 0x14
    1596:	95 8b       	std	Z+21, r25	; 0x15
    1598:	a6 8b       	std	Z+22, r26	; 0x16
    159a:	b7 8b       	std	Z+23, r27	; 0x17
    159c:	81 e0       	ldi	r24, 0x01	; 1

	return true;
}
    159e:	df 91       	pop	r29
    15a0:	cf 91       	pop	r28
    15a2:	1f 91       	pop	r17
    15a4:	0f 91       	pop	r16
    15a6:	ff 90       	pop	r15
    15a8:	ef 90       	pop	r14
    15aa:	df 90       	pop	r13
    15ac:	cf 90       	pop	r12
    15ae:	bf 90       	pop	r11
    15b0:	08 95       	ret

000015b2 <SCSI_DecodeSCSICommand>:
 *  \param[in] MSInterfaceInfo  Pointer to the Mass Storage class interface structure that the command is associated with
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise
 */
bool SCSI_DecodeSCSICommand(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    15b2:	cf 92       	push	r12
    15b4:	df 92       	push	r13
    15b6:	ef 92       	push	r14
    15b8:	ff 92       	push	r15
    15ba:	0f 93       	push	r16
    15bc:	1f 93       	push	r17
    15be:	df 93       	push	r29
    15c0:	cf 93       	push	r28
    15c2:	cd b7       	in	r28, 0x3d	; 61
    15c4:	de b7       	in	r29, 0x3e	; 62
    15c6:	28 97       	sbiw	r28, 0x08	; 8
    15c8:	0f b6       	in	r0, 0x3f	; 63
    15ca:	f8 94       	cli
    15cc:	de bf       	out	0x3e, r29	; 62
    15ce:	0f be       	out	0x3f, r0	; 63
    15d0:	cd bf       	out	0x3d, r28	; 61
    15d2:	6c 01       	movw	r12, r24
	bool CommandSuccess = false;

	/* Run the appropriate SCSI command hander function based on the passed command */
	switch (MSInterfaceInfo->State.CommandBlock.SCSICommandData[0])
    15d4:	fc 01       	movw	r30, r24
    15d6:	83 8d       	ldd	r24, Z+27	; 0x1b
    15d8:	8d 31       	cpi	r24, 0x1D	; 29
    15da:	09 f4       	brne	.+2      	; 0x15de <SCSI_DecodeSCSICommand+0x2c>
    15dc:	aa c0       	rjmp	.+340    	; 0x1732 <SCSI_DecodeSCSICommand+0x180>
    15de:	8e 31       	cpi	r24, 0x1E	; 30
    15e0:	90 f4       	brcc	.+36     	; 0x1606 <SCSI_DecodeSCSICommand+0x54>
    15e2:	82 31       	cpi	r24, 0x12	; 18
    15e4:	19 f1       	breq	.+70     	; 0x162c <SCSI_DecodeSCSICommand+0x7a>
    15e6:	83 31       	cpi	r24, 0x13	; 19
    15e8:	38 f4       	brcc	.+14     	; 0x15f8 <SCSI_DecodeSCSICommand+0x46>
    15ea:	88 23       	and	r24, r24
    15ec:	09 f4       	brne	.+2      	; 0x15f0 <SCSI_DecodeSCSICommand+0x3e>
    15ee:	df c0       	rjmp	.+446    	; 0x17ae <SCSI_DecodeSCSICommand+0x1fc>
    15f0:	83 30       	cpi	r24, 0x03	; 3
    15f2:	09 f0       	breq	.+2      	; 0x15f6 <SCSI_DecodeSCSICommand+0x44>
    15f4:	e2 c0       	rjmp	.+452    	; 0x17ba <SCSI_DecodeSCSICommand+0x208>
    15f6:	4d c0       	rjmp	.+154    	; 0x1692 <SCSI_DecodeSCSICommand+0xe0>
    15f8:	8a 31       	cpi	r24, 0x1A	; 26
    15fa:	09 f4       	brne	.+2      	; 0x15fe <SCSI_DecodeSCSICommand+0x4c>
    15fc:	be c0       	rjmp	.+380    	; 0x177a <SCSI_DecodeSCSICommand+0x1c8>
    15fe:	8b 31       	cpi	r24, 0x1B	; 27
    1600:	09 f0       	breq	.+2      	; 0x1604 <SCSI_DecodeSCSICommand+0x52>
    1602:	db c0       	rjmp	.+438    	; 0x17ba <SCSI_DecodeSCSICommand+0x208>
    1604:	d4 c0       	rjmp	.+424    	; 0x17ae <SCSI_DecodeSCSICommand+0x1fc>
    1606:	88 32       	cpi	r24, 0x28	; 40
    1608:	09 f4       	brne	.+2      	; 0x160c <SCSI_DecodeSCSICommand+0x5a>
    160a:	b1 c0       	rjmp	.+354    	; 0x176e <SCSI_DecodeSCSICommand+0x1bc>
    160c:	89 32       	cpi	r24, 0x29	; 41
    160e:	38 f4       	brcc	.+14     	; 0x161e <SCSI_DecodeSCSICommand+0x6c>
    1610:	8e 31       	cpi	r24, 0x1E	; 30
    1612:	09 f4       	brne	.+2      	; 0x1616 <SCSI_DecodeSCSICommand+0x64>
    1614:	cc c0       	rjmp	.+408    	; 0x17ae <SCSI_DecodeSCSICommand+0x1fc>
    1616:	85 32       	cpi	r24, 0x25	; 37
    1618:	09 f0       	breq	.+2      	; 0x161c <SCSI_DecodeSCSICommand+0x6a>
    161a:	cf c0       	rjmp	.+414    	; 0x17ba <SCSI_DecodeSCSICommand+0x208>
    161c:	5d c0       	rjmp	.+186    	; 0x16d8 <SCSI_DecodeSCSICommand+0x126>
    161e:	8a 32       	cpi	r24, 0x2A	; 42
    1620:	09 f4       	brne	.+2      	; 0x1624 <SCSI_DecodeSCSICommand+0x72>
    1622:	a2 c0       	rjmp	.+324    	; 0x1768 <SCSI_DecodeSCSICommand+0x1b6>
    1624:	8f 32       	cpi	r24, 0x2F	; 47
    1626:	09 f0       	breq	.+2      	; 0x162a <SCSI_DecodeSCSICommand+0x78>
    1628:	c8 c0       	rjmp	.+400    	; 0x17ba <SCSI_DecodeSCSICommand+0x208>
    162a:	c1 c0       	rjmp	.+386    	; 0x17ae <SCSI_DecodeSCSICommand+0x1fc>
    162c:	f6 01       	movw	r30, r12
    162e:	07 8d       	ldd	r16, Z+31	; 0x1f
    1630:	16 8d       	ldd	r17, Z+30	; 0x1e
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));

	/* Only the standard INQUIRY data is supported, check if any optional INQUIRY bits set */
	if ((MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & ((1 << 0) | (1 << 1))) ||
    1632:	84 8d       	ldd	r24, Z+28	; 0x1c
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	83 70       	andi	r24, 0x03	; 3
    1638:	90 70       	andi	r25, 0x00	; 0
    163a:	89 2b       	or	r24, r25
    163c:	09 f0       	breq	.+2      	; 0x1640 <SCSI_DecodeSCSICommand+0x8e>
    163e:	7d c0       	rjmp	.+250    	; 0x173a <SCSI_DecodeSCSICommand+0x188>
    1640:	85 8d       	ldd	r24, Z+29	; 0x1d
    1642:	88 23       	and	r24, r24
    1644:	09 f0       	breq	.+2      	; 0x1648 <SCSI_DecodeSCSICommand+0x96>
    1646:	79 c0       	rjmp	.+242    	; 0x173a <SCSI_DecodeSCSICommand+0x188>
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_Inquiry(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint16_t AllocationLength  = SwapEndian_16(*(uint16_t*)&MSInterfaceInfo->State.CommandBlock.SCSICommandData[3]);
	uint16_t BytesTransferred  = MIN(AllocationLength, sizeof(InquiryData));
    1648:	78 01       	movw	r14, r16
    164a:	05 32       	cpi	r16, 0x25	; 37
    164c:	11 05       	cpc	r17, r1
    164e:	18 f0       	brcs	.+6      	; 0x1656 <SCSI_DecodeSCSICommand+0xa4>
    1650:	94 e2       	ldi	r25, 0x24	; 36
    1652:	e9 2e       	mov	r14, r25
    1654:	f1 2c       	mov	r15, r1
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return false;
	}

	Endpoint_Write_Stream_LE(&InquiryData, BytesTransferred, NULL);
    1656:	8f e2       	ldi	r24, 0x2F	; 47
    1658:	92 e0       	ldi	r25, 0x02	; 2
    165a:	b7 01       	movw	r22, r14
    165c:	40 e0       	ldi	r20, 0x00	; 0
    165e:	50 e0       	ldi	r21, 0x00	; 0
    1660:	c6 d2       	rcall	.+1420   	; 0x1bee <Endpoint_Write_Stream_LE>

	/* Pad out remaining bytes with 0x00 */
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
    1662:	c8 01       	movw	r24, r16
    1664:	8e 19       	sub	r24, r14
    1666:	9f 09       	sbc	r25, r15
    1668:	60 e0       	ldi	r22, 0x00	; 0
    166a:	70 e0       	ldi	r23, 0x00	; 0
    166c:	11 d3       	rcall	.+1570   	; 0x1c90 <Endpoint_Null_Stream>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    166e:	80 91 e8 00 	lds	r24, 0x00E8
    1672:	8e 77       	andi	r24, 0x7E	; 126
    1674:	80 93 e8 00 	sts	0x00E8, r24

	/* Finalize the stream transfer to send the last packet */
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
    1678:	97 01       	movw	r18, r14
    167a:	40 e0       	ldi	r20, 0x00	; 0
    167c:	50 e0       	ldi	r21, 0x00	; 0
    167e:	f6 01       	movw	r30, r12
    1680:	84 89       	ldd	r24, Z+20	; 0x14
    1682:	95 89       	ldd	r25, Z+21	; 0x15
    1684:	a6 89       	ldd	r26, Z+22	; 0x16
    1686:	b7 89       	ldd	r27, Z+23	; 0x17
    1688:	82 1b       	sub	r24, r18
    168a:	93 0b       	sbc	r25, r19
    168c:	a4 0b       	sbc	r26, r20
    168e:	b5 0b       	sbc	r27, r21
    1690:	89 c0       	rjmp	.+274    	; 0x17a4 <SCSI_DecodeSCSICommand+0x1f2>
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_Request_Sense(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint8_t  AllocationLength = MSInterfaceInfo->State.CommandBlock.SCSICommandData[4];
    1692:	f6 01       	movw	r30, r12
    1694:	17 8d       	ldd	r17, Z+31	; 0x1f
	uint8_t  BytesTransferred = MIN(AllocationLength, sizeof(SenseData));
    1696:	01 2f       	mov	r16, r17
    1698:	13 31       	cpi	r17, 0x13	; 19
    169a:	08 f0       	brcs	.+2      	; 0x169e <SCSI_DecodeSCSICommand+0xec>
    169c:	02 e1       	ldi	r16, 0x12	; 18

	Endpoint_Write_Stream_LE(&SenseData, BytesTransferred, NULL);
    169e:	8d e1       	ldi	r24, 0x1D	; 29
    16a0:	92 e0       	ldi	r25, 0x02	; 2
    16a2:	60 2f       	mov	r22, r16
    16a4:	70 e0       	ldi	r23, 0x00	; 0
    16a6:	40 e0       	ldi	r20, 0x00	; 0
    16a8:	50 e0       	ldi	r21, 0x00	; 0
    16aa:	a1 d2       	rcall	.+1346   	; 0x1bee <Endpoint_Write_Stream_LE>
	Endpoint_Null_Stream((AllocationLength - BytesTransferred), NULL);
    16ac:	81 2f       	mov	r24, r17
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	80 1b       	sub	r24, r16
    16b2:	91 09       	sbc	r25, r1
    16b4:	60 e0       	ldi	r22, 0x00	; 0
    16b6:	70 e0       	ldi	r23, 0x00	; 0
    16b8:	eb d2       	rcall	.+1494   	; 0x1c90 <Endpoint_Null_Stream>
    16ba:	80 91 e8 00 	lds	r24, 0x00E8
    16be:	8e 77       	andi	r24, 0x7E	; 126
    16c0:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= BytesTransferred;
    16c4:	f6 01       	movw	r30, r12
    16c6:	84 89       	ldd	r24, Z+20	; 0x14
    16c8:	95 89       	ldd	r25, Z+21	; 0x15
    16ca:	a6 89       	ldd	r26, Z+22	; 0x16
    16cc:	b7 89       	ldd	r27, Z+23	; 0x17
    16ce:	80 1b       	sub	r24, r16
    16d0:	91 09       	sbc	r25, r1
    16d2:	a1 09       	sbc	r26, r1
    16d4:	b1 09       	sbc	r27, r1
    16d6:	66 c0       	rjmp	.+204    	; 0x17a4 <SCSI_DecodeSCSICommand+0x1f2>
 *
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_Read_Capacity_10(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	uint32_t LastBlockAddressInLUN = (LUN_MEDIA_BLOCKS - 1);
    16d8:	4d d9       	rcall	.-3430   	; 0x974 <SDCardManager_GetNbBlocks>
    16da:	61 50       	subi	r22, 0x01	; 1
    16dc:	70 40       	sbci	r23, 0x00	; 0
    16de:	80 40       	sbci	r24, 0x00	; 0
    16e0:	90 40       	sbci	r25, 0x00	; 0
    16e2:	69 83       	std	Y+1, r22	; 0x01
    16e4:	7a 83       	std	Y+2, r23	; 0x02
    16e6:	8b 83       	std	Y+3, r24	; 0x03
    16e8:	9c 83       	std	Y+4, r25	; 0x04
	uint32_t MediaBlockSize        = VIRTUAL_MEMORY_BLOCK_SIZE;
    16ea:	80 e0       	ldi	r24, 0x00	; 0
    16ec:	92 e0       	ldi	r25, 0x02	; 2
    16ee:	a0 e0       	ldi	r26, 0x00	; 0
    16f0:	b0 e0       	ldi	r27, 0x00	; 0
    16f2:	8d 83       	std	Y+5, r24	; 0x05
    16f4:	9e 83       	std	Y+6, r25	; 0x06
    16f6:	af 83       	std	Y+7, r26	; 0x07
    16f8:	b8 87       	std	Y+8, r27	; 0x08

	Endpoint_Write_Stream_BE(&LastBlockAddressInLUN, sizeof(LastBlockAddressInLUN), NULL);
    16fa:	ce 01       	movw	r24, r28
    16fc:	01 96       	adiw	r24, 0x01	; 1
    16fe:	64 e0       	ldi	r22, 0x04	; 4
    1700:	70 e0       	ldi	r23, 0x00	; 0
    1702:	40 e0       	ldi	r20, 0x00	; 0
    1704:	50 e0       	ldi	r21, 0x00	; 0
    1706:	22 d2       	rcall	.+1092   	; 0x1b4c <Endpoint_Write_Stream_BE>
	Endpoint_Write_Stream_BE(&MediaBlockSize, sizeof(MediaBlockSize), NULL);
    1708:	ce 01       	movw	r24, r28
    170a:	05 96       	adiw	r24, 0x05	; 5
    170c:	64 e0       	ldi	r22, 0x04	; 4
    170e:	70 e0       	ldi	r23, 0x00	; 0
    1710:	40 e0       	ldi	r20, 0x00	; 0
    1712:	50 e0       	ldi	r21, 0x00	; 0
    1714:	1b d2       	rcall	.+1078   	; 0x1b4c <Endpoint_Write_Stream_BE>
    1716:	80 91 e8 00 	lds	r24, 0x00E8
    171a:	8e 77       	andi	r24, 0x7E	; 126
    171c:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 8;
    1720:	f6 01       	movw	r30, r12
    1722:	84 89       	ldd	r24, Z+20	; 0x14
    1724:	95 89       	ldd	r25, Z+21	; 0x15
    1726:	a6 89       	ldd	r26, Z+22	; 0x16
    1728:	b7 89       	ldd	r27, Z+23	; 0x17
    172a:	08 97       	sbiw	r24, 0x08	; 8
    172c:	a1 09       	sbc	r26, r1
    172e:	b1 09       	sbc	r27, r1
    1730:	39 c0       	rjmp	.+114    	; 0x17a4 <SCSI_DecodeSCSICommand+0x1f2>
 *  \return Boolean \c true if the command completed successfully, \c false otherwise.
 */
static bool SCSI_Command_Send_Diagnostic(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	/* Check to see if the SELF TEST bit is not set */
	if (!(MSInterfaceInfo->State.CommandBlock.SCSICommandData[1] & (1 << 2)))
    1732:	f6 01       	movw	r30, r12
    1734:	84 8d       	ldd	r24, Z+28	; 0x1c
    1736:	82 fd       	sbrc	r24, 2
    1738:	08 c0       	rjmp	.+16     	; 0x174a <SCSI_DecodeSCSICommand+0x198>
	{
		/* Only self-test supported - update SENSE key and fail the command */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
    173a:	80 91 1f 02 	lds	r24, 0x021F
    173e:	80 7f       	andi	r24, 0xF0	; 240
    1740:	85 60       	ori	r24, 0x05	; 5
    1742:	80 93 1f 02 	sts	0x021F, r24
    1746:	84 e2       	ldi	r24, 0x24	; 36
    1748:	3f c0       	rjmp	.+126    	; 0x17c8 <SCSI_DecodeSCSICommand+0x216>

		return false;
	}

	/* Check to see if all attached Dataflash ICs are functional */
	if (!(SDCardManager_CheckDataflashOperation()))
    174a:	0e 94 5e 03 	call	0x6bc	; 0x6bc <SDCardManager_CheckDataflashOperation>
    174e:	88 23       	and	r24, r24
    1750:	71 f5       	brne	.+92     	; 0x17ae <SCSI_DecodeSCSICommand+0x1fc>
	{
		/* Update SENSE key with a hardware error condition and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_HARDWARE_ERROR,
    1752:	80 91 1f 02 	lds	r24, 0x021F
    1756:	80 7f       	andi	r24, 0xF0	; 240
    1758:	84 60       	ori	r24, 0x04	; 4
    175a:	80 93 1f 02 	sts	0x021F, r24
    175e:	10 92 29 02 	sts	0x0229, r1
    1762:	10 92 2a 02 	sts	0x022A, r1
    1766:	33 c0       	rjmp	.+102    	; 0x17ce <SCSI_DecodeSCSICommand+0x21c>
			break;
		case SCSI_CMD_SEND_DIAGNOSTIC:
			CommandSuccess = SCSI_Command_Send_Diagnostic(MSInterfaceInfo);
			break;
		case SCSI_CMD_WRITE_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_WRITE);
    1768:	c6 01       	movw	r24, r12
    176a:	60 e0       	ldi	r22, 0x00	; 0
    176c:	02 c0       	rjmp	.+4      	; 0x1772 <SCSI_DecodeSCSICommand+0x1c0>
			break;
		case SCSI_CMD_READ_10:
			CommandSuccess = SCSI_Command_ReadWrite_10(MSInterfaceInfo, DATA_READ);
    176e:	c6 01       	movw	r24, r12
    1770:	61 e0       	ldi	r22, 0x01	; 1
    1772:	cb de       	rcall	.-618    	; 0x150a <SCSI_Command_ReadWrite_10>
		                   SCSI_ASENSEQ_NO_QUALIFIER);
			break;
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
    1774:	88 23       	and	r24, r24
    1776:	59 f1       	breq	.+86     	; 0x17ce <SCSI_DecodeSCSICommand+0x21c>
    1778:	2c c0       	rjmp	.+88     	; 0x17d2 <SCSI_DecodeSCSICommand+0x220>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    177a:	10 92 f1 00 	sts	0x00F1, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    177e:	10 92 f1 00 	sts	0x00F1, r1
    1782:	10 92 f1 00 	sts	0x00F1, r1
    1786:	10 92 f1 00 	sts	0x00F1, r1
    178a:	80 91 e8 00 	lds	r24, 0x00E8
    178e:	8e 77       	andi	r24, 0x7E	; 126
    1790:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_Write_8(DISK_READ_ONLY ? 0x80 : 0x00);
	Endpoint_Write_8(0x00);
	Endpoint_ClearIN();

	/* Update the bytes transferred counter and succeed the command */
	MSInterfaceInfo->State.CommandBlock.DataTransferLength -= 4;
    1794:	f6 01       	movw	r30, r12
    1796:	84 89       	ldd	r24, Z+20	; 0x14
    1798:	95 89       	ldd	r25, Z+21	; 0x15
    179a:	a6 89       	ldd	r26, Z+22	; 0x16
    179c:	b7 89       	ldd	r27, Z+23	; 0x17
    179e:	04 97       	sbiw	r24, 0x04	; 4
    17a0:	a1 09       	sbc	r26, r1
    17a2:	b1 09       	sbc	r27, r1
    17a4:	84 8b       	std	Z+20, r24	; 0x14
    17a6:	95 8b       	std	Z+21, r25	; 0x15
    17a8:	a6 8b       	std	Z+22, r26	; 0x16
    17aa:	b7 8b       	std	Z+23, r27	; 0x17
    17ac:	12 c0       	rjmp	.+36     	; 0x17d2 <SCSI_DecodeSCSICommand+0x220>
		case SCSI_CMD_TEST_UNIT_READY:
		case SCSI_CMD_PREVENT_ALLOW_MEDIUM_REMOVAL:
		case SCSI_CMD_VERIFY_10:
			/* These commands should just succeed, no handling required */
			CommandSuccess = true;
			MSInterfaceInfo->State.CommandBlock.DataTransferLength = 0;
    17ae:	f6 01       	movw	r30, r12
    17b0:	14 8a       	std	Z+20, r1	; 0x14
    17b2:	15 8a       	std	Z+21, r1	; 0x15
    17b4:	16 8a       	std	Z+22, r1	; 0x16
    17b6:	17 8a       	std	Z+23, r1	; 0x17
    17b8:	0c c0       	rjmp	.+24     	; 0x17d2 <SCSI_DecodeSCSICommand+0x220>
			break;
		default:
			/* Update the SENSE key to reflect the invalid command */
			SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
    17ba:	80 91 1f 02 	lds	r24, 0x021F
    17be:	80 7f       	andi	r24, 0xF0	; 240
    17c0:	85 60       	ori	r24, 0x05	; 5
    17c2:	80 93 1f 02 	sts	0x021F, r24
    17c6:	80 e2       	ldi	r24, 0x20	; 32
    17c8:	80 93 29 02 	sts	0x0229, r24
    17cc:	ca cf       	rjmp	.-108    	; 0x1762 <SCSI_DecodeSCSICommand+0x1b0>
		                   SCSI_ASENSEQ_NO_QUALIFIER);
			break;
	}

	/* Check if command was successfully processed */
	if (CommandSuccess)
    17ce:	80 e0       	ldi	r24, 0x00	; 0
    17d0:	0a c0       	rjmp	.+20     	; 0x17e6 <SCSI_DecodeSCSICommand+0x234>
	{
		SCSI_SET_SENSE(SCSI_SENSE_KEY_GOOD,
    17d2:	80 91 1f 02 	lds	r24, 0x021F
    17d6:	80 7f       	andi	r24, 0xF0	; 240
    17d8:	80 93 1f 02 	sts	0x021F, r24
    17dc:	10 92 29 02 	sts	0x0229, r1
    17e0:	10 92 2a 02 	sts	0x022A, r1
    17e4:	81 e0       	ldi	r24, 0x01	; 1

		return true;
	}

	return false;
}
    17e6:	28 96       	adiw	r28, 0x08	; 8
    17e8:	0f b6       	in	r0, 0x3f	; 63
    17ea:	f8 94       	cli
    17ec:	de bf       	out	0x3e, r29	; 62
    17ee:	0f be       	out	0x3f, r0	; 63
    17f0:	cd bf       	out	0x3d, r28	; 61
    17f2:	cf 91       	pop	r28
    17f4:	df 91       	pop	r29
    17f6:	1f 91       	pop	r17
    17f8:	0f 91       	pop	r16
    17fa:	ff 90       	pop	r15
    17fc:	ef 90       	pop	r14
    17fe:	df 90       	pop	r13
    1800:	cf 90       	pop	r12
    1802:	08 95       	ret

00001804 <Serial_putchar>:

FILE USARTSerialStream;

int Serial_putchar(char DataByte,
                   FILE *Stream)
{
    1804:	98 2f       	mov	r25, r24
			 *  \return Boolean \c true if a character can be queued for transmission immediately, \c false otherwise.
			 */
			static inline bool Serial_IsSendReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsSendReady(void)
			{
				return ((UCSR1A & (1 << UDRE1)) ? true : false);
    1806:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(Serial_IsSendReady()));
    180a:	85 ff       	sbrs	r24, 5
    180c:	fc cf       	rjmp	.-8      	; 0x1806 <Serial_putchar+0x2>
				UDR1 = DataByte;
    180e:	90 93 ce 00 	sts	0x00CE, r25
	(void)Stream;

	Serial_SendByte(DataByte);
	return 0;
}
    1812:	80 e0       	ldi	r24, 0x00	; 0
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	08 95       	ret

00001818 <Serial_getchar>:
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
    1818:	80 91 c8 00 	lds	r24, 0x00C8

int Serial_getchar(FILE *Stream)
{
	(void)Stream;

	if (!(Serial_IsCharReceived()))
    181c:	87 fd       	sbrc	r24, 7
    181e:	03 c0       	rjmp	.+6      	; 0x1826 <Serial_getchar+0xe>
    1820:	2e ef       	ldi	r18, 0xFE	; 254
    1822:	3f ef       	ldi	r19, 0xFF	; 255
    1824:	0b c0       	rjmp	.+22     	; 0x183c <Serial_getchar+0x24>
    1826:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \return Next byte received from the USART, or a negative value if no byte has been received.
			 */
			static inline int16_t Serial_ReceiveByte(void) ATTR_ALWAYS_INLINE;
			static inline int16_t Serial_ReceiveByte(void)
			{
				if (!(Serial_IsCharReceived()))
    182a:	87 fd       	sbrc	r24, 7
    182c:	03 c0       	rjmp	.+6      	; 0x1834 <Serial_getchar+0x1c>
    182e:	2f ef       	ldi	r18, 0xFF	; 255
    1830:	3f ef       	ldi	r19, 0xFF	; 255
    1832:	04 c0       	rjmp	.+8      	; 0x183c <Serial_getchar+0x24>
				  return -1;

				return UDR1;
    1834:	80 91 ce 00 	lds	r24, 0x00CE
    1838:	28 2f       	mov	r18, r24
    183a:	30 e0       	ldi	r19, 0x00	; 0
	  return _FDEV_EOF;

	return Serial_ReceiveByte();
}
    183c:	c9 01       	movw	r24, r18
    183e:	08 95       	ret

00001840 <Serial_SendString>:
		FlashStringPtr++;
	}
}

void Serial_SendString(const char* StringPtr)
{
    1840:	fc 01       	movw	r30, r24
    1842:	07 c0       	rjmp	.+14     	; 0x1852 <Serial_SendString+0x12>
			 *  \return Boolean \c true if a character can be queued for transmission immediately, \c false otherwise.
			 */
			static inline bool Serial_IsSendReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsSendReady(void)
			{
				return ((UCSR1A & (1 << UDRE1)) ? true : false);
    1844:	80 91 c8 00 	lds	r24, 0x00C8
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(Serial_IsSendReady()));
    1848:	85 ff       	sbrs	r24, 5
    184a:	fc cf       	rjmp	.-8      	; 0x1844 <Serial_SendString+0x4>
				UDR1 = DataByte;
    184c:	90 93 ce 00 	sts	0x00CE, r25
	uint8_t CurrByte;

	while ((CurrByte = *StringPtr) != 0x00)
	{
		Serial_SendByte(CurrByte);
		StringPtr++;
    1850:	31 96       	adiw	r30, 0x01	; 1

void Serial_SendString(const char* StringPtr)
{
	uint8_t CurrByte;

	while ((CurrByte = *StringPtr) != 0x00)
    1852:	90 81       	ld	r25, Z
    1854:	99 23       	and	r25, r25
    1856:	b1 f7       	brne	.-20     	; 0x1844 <Serial_SendString+0x4>
	{
		Serial_SendByte(CurrByte);
		StringPtr++;
	}
}
    1858:	08 95       	ret

0000185a <Serial_CreateStream>:
	while (Length--)
	  Serial_SendByte(*(CurrByte++));
}

void Serial_CreateStream(FILE* Stream)
{
    185a:	fc 01       	movw	r30, r24
	if (!(Stream))
    185c:	00 97       	sbiw	r24, 0x00	; 0
    185e:	59 f4       	brne	.+22     	; 0x1876 <Serial_CreateStream+0x1c>
	{
		Stream = &USARTSerialStream;
		stdin  = Stream;
    1860:	85 e6       	ldi	r24, 0x65	; 101
    1862:	96 e0       	ldi	r25, 0x06	; 6
    1864:	90 93 81 06 	sts	0x0681, r25
    1868:	80 93 80 06 	sts	0x0680, r24
		stdout = Stream;
    186c:	90 93 83 06 	sts	0x0683, r25
    1870:	80 93 82 06 	sts	0x0682, r24
    1874:	fc 01       	movw	r30, r24
	}

	*Stream = (FILE)FDEV_SETUP_STREAM(Serial_putchar, Serial_getchar, _FDEV_SETUP_RW);
    1876:	8e e0       	ldi	r24, 0x0E	; 14
    1878:	df 01       	movw	r26, r30
    187a:	1d 92       	st	X+, r1
    187c:	8a 95       	dec	r24
    187e:	e9 f7       	brne	.-6      	; 0x187a <Serial_CreateStream+0x20>
    1880:	83 e0       	ldi	r24, 0x03	; 3
    1882:	83 83       	std	Z+3, r24	; 0x03
    1884:	82 e0       	ldi	r24, 0x02	; 2
    1886:	9c e0       	ldi	r25, 0x0C	; 12
    1888:	91 87       	std	Z+9, r25	; 0x09
    188a:	80 87       	std	Z+8, r24	; 0x08
    188c:	8c e0       	ldi	r24, 0x0C	; 12
    188e:	9c e0       	ldi	r25, 0x0C	; 12
    1890:	93 87       	std	Z+11, r25	; 0x0b
    1892:	82 87       	std	Z+10, r24	; 0x0a
}
    1894:	08 95       	ret

00001896 <Endpoint_Write_Control_Stream_LE>:
    1896:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1898:	40 91 7e 06 	lds	r20, 0x067E
    189c:	50 91 7f 06 	lds	r21, 0x067F
    18a0:	46 17       	cp	r20, r22
    18a2:	57 07       	cpc	r21, r23
    18a4:	18 f4       	brcc	.+6      	; 0x18ac <Endpoint_Write_Control_Stream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    18a6:	f9 01       	movw	r30, r18
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	3d c0       	rjmp	.+122    	; 0x1926 <Endpoint_Write_Control_Stream_LE+0x90>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    18ac:	61 15       	cp	r22, r1
    18ae:	71 05       	cpc	r23, r1
    18b0:	11 f0       	breq	.+4      	; 0x18b6 <Endpoint_Write_Control_Stream_LE+0x20>
    18b2:	ab 01       	movw	r20, r22
    18b4:	f8 cf       	rjmp	.-16     	; 0x18a6 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    18b6:	80 91 e8 00 	lds	r24, 0x00E8
    18ba:	8e 77       	andi	r24, 0x7E	; 126
    18bc:	80 93 e8 00 	sts	0x00E8, r24
    18c0:	40 e0       	ldi	r20, 0x00	; 0
    18c2:	50 e0       	ldi	r21, 0x00	; 0
    18c4:	f0 cf       	rjmp	.-32     	; 0x18a6 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    18c6:	80 91 77 06 	lds	r24, 0x0677

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    18ca:	88 23       	and	r24, r24
    18cc:	09 f4       	brne	.+2      	; 0x18d0 <Endpoint_Write_Control_Stream_LE+0x3a>
    18ce:	41 c0       	rjmp	.+130    	; 0x1952 <Endpoint_Write_Control_Stream_LE+0xbc>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    18d0:	85 30       	cpi	r24, 0x05	; 5
    18d2:	09 f4       	brne	.+2      	; 0x18d6 <Endpoint_Write_Control_Stream_LE+0x40>
    18d4:	40 c0       	rjmp	.+128    	; 0x1956 <Endpoint_Write_Control_Stream_LE+0xc0>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    18d6:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    18da:	83 fd       	sbrc	r24, 3
    18dc:	3e c0       	rjmp	.+124    	; 0x195a <Endpoint_Write_Control_Stream_LE+0xc4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    18de:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    18e2:	82 fd       	sbrc	r24, 2
    18e4:	30 c0       	rjmp	.+96     	; 0x1946 <Endpoint_Write_Control_Stream_LE+0xb0>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    18e6:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    18ea:	80 ff       	sbrs	r24, 0
    18ec:	1c c0       	rjmp	.+56     	; 0x1926 <Endpoint_Write_Control_Stream_LE+0x90>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    18ee:	20 91 f2 00 	lds	r18, 0x00F2
    18f2:	30 91 f3 00 	lds	r19, 0x00F3
    18f6:	07 c0       	rjmp	.+14     	; 0x1906 <Endpoint_Write_Control_Stream_LE+0x70>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    18f8:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    18fa:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    18fe:	41 50       	subi	r20, 0x01	; 1
    1900:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
    1902:	2f 5f       	subi	r18, 0xFF	; 255
    1904:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1906:	41 15       	cp	r20, r1
    1908:	51 05       	cpc	r21, r1
    190a:	19 f0       	breq	.+6      	; 0x1912 <Endpoint_Write_Control_Stream_LE+0x7c>
    190c:	28 30       	cpi	r18, 0x08	; 8
    190e:	31 05       	cpc	r19, r1
    1910:	98 f3       	brcs	.-26     	; 0x18f8 <Endpoint_Write_Control_Stream_LE+0x62>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	28 30       	cpi	r18, 0x08	; 8
    1916:	31 05       	cpc	r19, r1
    1918:	09 f4       	brne	.+2      	; 0x191c <Endpoint_Write_Control_Stream_LE+0x86>
    191a:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    191c:	80 91 e8 00 	lds	r24, 0x00E8
    1920:	8e 77       	andi	r24, 0x7E	; 126
    1922:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1926:	41 15       	cp	r20, r1
    1928:	51 05       	cpc	r21, r1
    192a:	69 f6       	brne	.-102    	; 0x18c6 <Endpoint_Write_Control_Stream_LE+0x30>
    192c:	99 23       	and	r25, r25
    192e:	59 f6       	brne	.-106    	; 0x18c6 <Endpoint_Write_Control_Stream_LE+0x30>
    1930:	0a c0       	rjmp	.+20     	; 0x1946 <Endpoint_Write_Control_Stream_LE+0xb0>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1932:	80 91 77 06 	lds	r24, 0x0677

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1936:	88 23       	and	r24, r24
    1938:	61 f0       	breq	.+24     	; 0x1952 <Endpoint_Write_Control_Stream_LE+0xbc>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    193a:	85 30       	cpi	r24, 0x05	; 5
    193c:	61 f0       	breq	.+24     	; 0x1956 <Endpoint_Write_Control_Stream_LE+0xc0>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    193e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1942:	83 fd       	sbrc	r24, 3
    1944:	0a c0       	rjmp	.+20     	; 0x195a <Endpoint_Write_Control_Stream_LE+0xc4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1946:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    194a:	82 ff       	sbrs	r24, 2
    194c:	f2 cf       	rjmp	.-28     	; 0x1932 <Endpoint_Write_Control_Stream_LE+0x9c>
    194e:	80 e0       	ldi	r24, 0x00	; 0
    1950:	08 95       	ret
    1952:	82 e0       	ldi	r24, 0x02	; 2
    1954:	08 95       	ret
    1956:	83 e0       	ldi	r24, 0x03	; 3
    1958:	08 95       	ret
    195a:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    195c:	08 95       	ret

0000195e <Endpoint_Read_Control_Stream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
    195e:	9c 01       	movw	r18, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
    1960:	61 15       	cp	r22, r1
    1962:	71 05       	cpc	r23, r1
    1964:	29 f4       	brne	.+10     	; 0x1970 <Endpoint_Read_Control_Stream_LE+0x12>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1966:	80 91 e8 00 	lds	r24, 0x00E8
    196a:	8b 77       	andi	r24, 0x7B	; 123
    196c:	80 93 e8 00 	sts	0x00E8, r24
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1970:	f9 01       	movw	r30, r18
    1972:	22 c0       	rjmp	.+68     	; 0x19b8 <Endpoint_Read_Control_Stream_LE+0x5a>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1974:	80 91 77 06 	lds	r24, 0x0677

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1978:	88 23       	and	r24, r24
    197a:	71 f1       	breq	.+92     	; 0x19d8 <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    197c:	85 30       	cpi	r24, 0x05	; 5
    197e:	71 f1       	breq	.+92     	; 0x19dc <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1980:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1984:	83 ff       	sbrs	r24, 3
    1986:	02 c0       	rjmp	.+4      	; 0x198c <Endpoint_Read_Control_Stream_LE+0x2e>
    1988:	81 e0       	ldi	r24, 0x01	; 1
    198a:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    198c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
    1990:	82 ff       	sbrs	r24, 2
    1992:	f0 cf       	rjmp	.-32     	; 0x1974 <Endpoint_Read_Control_Stream_LE+0x16>
    1994:	06 c0       	rjmp	.+12     	; 0x19a2 <Endpoint_Read_Control_Stream_LE+0x44>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1996:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    199a:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    199c:	61 50       	subi	r22, 0x01	; 1
    199e:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
    19a0:	31 f0       	breq	.+12     	; 0x19ae <Endpoint_Read_Control_Stream_LE+0x50>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    19a2:	80 91 f2 00 	lds	r24, 0x00F2
    19a6:	90 91 f3 00 	lds	r25, 0x00F3
    19aa:	89 2b       	or	r24, r25
    19ac:	a1 f7       	brne	.-24     	; 0x1996 <Endpoint_Read_Control_Stream_LE+0x38>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    19ae:	80 91 e8 00 	lds	r24, 0x00E8
    19b2:	8b 77       	andi	r24, 0x7B	; 123
    19b4:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
    19b8:	61 15       	cp	r22, r1
    19ba:	71 05       	cpc	r23, r1
    19bc:	d9 f6       	brne	.-74     	; 0x1974 <Endpoint_Read_Control_Stream_LE+0x16>
    19be:	06 c0       	rjmp	.+12     	; 0x19cc <Endpoint_Read_Control_Stream_LE+0x6e>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    19c0:	80 91 77 06 	lds	r24, 0x0677

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    19c4:	88 23       	and	r24, r24
    19c6:	41 f0       	breq	.+16     	; 0x19d8 <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    19c8:	85 30       	cpi	r24, 0x05	; 5
    19ca:	41 f0       	breq	.+16     	; 0x19dc <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    19cc:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
    19d0:	80 ff       	sbrs	r24, 0
    19d2:	f6 cf       	rjmp	.-20     	; 0x19c0 <Endpoint_Read_Control_Stream_LE+0x62>
    19d4:	80 e0       	ldi	r24, 0x00	; 0
    19d6:	08 95       	ret
    19d8:	82 e0       	ldi	r24, 0x02	; 2
    19da:	08 95       	ret
    19dc:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    19de:	08 95       	ret

000019e0 <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    19e0:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    19e2:	40 91 7e 06 	lds	r20, 0x067E
    19e6:	50 91 7f 06 	lds	r21, 0x067F
    19ea:	46 17       	cp	r20, r22
    19ec:	57 07       	cpc	r21, r23
    19ee:	18 f4       	brcc	.+6      	; 0x19f6 <Endpoint_Write_Control_PStream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    19f0:	f9 01       	movw	r30, r18
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	3e c0       	rjmp	.+124    	; 0x1a72 <Endpoint_Write_Control_PStream_LE+0x92>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    19f6:	61 15       	cp	r22, r1
    19f8:	71 05       	cpc	r23, r1
    19fa:	11 f0       	breq	.+4      	; 0x1a00 <Endpoint_Write_Control_PStream_LE+0x20>
    19fc:	ab 01       	movw	r20, r22
    19fe:	f8 cf       	rjmp	.-16     	; 0x19f0 <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1a00:	80 91 e8 00 	lds	r24, 0x00E8
    1a04:	8e 77       	andi	r24, 0x7E	; 126
    1a06:	80 93 e8 00 	sts	0x00E8, r24
    1a0a:	40 e0       	ldi	r20, 0x00	; 0
    1a0c:	50 e0       	ldi	r21, 0x00	; 0
    1a0e:	f0 cf       	rjmp	.-32     	; 0x19f0 <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1a10:	80 91 77 06 	lds	r24, 0x0677

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1a14:	88 23       	and	r24, r24
    1a16:	09 f4       	brne	.+2      	; 0x1a1a <Endpoint_Write_Control_PStream_LE+0x3a>
    1a18:	42 c0       	rjmp	.+132    	; 0x1a9e <Endpoint_Write_Control_PStream_LE+0xbe>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1a1a:	85 30       	cpi	r24, 0x05	; 5
    1a1c:	09 f4       	brne	.+2      	; 0x1a20 <Endpoint_Write_Control_PStream_LE+0x40>
    1a1e:	41 c0       	rjmp	.+130    	; 0x1aa2 <Endpoint_Write_Control_PStream_LE+0xc2>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1a20:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1a24:	83 fd       	sbrc	r24, 3
    1a26:	3f c0       	rjmp	.+126    	; 0x1aa6 <Endpoint_Write_Control_PStream_LE+0xc6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1a28:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1a2c:	82 fd       	sbrc	r24, 2
    1a2e:	31 c0       	rjmp	.+98     	; 0x1a92 <Endpoint_Write_Control_PStream_LE+0xb2>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1a30:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    1a34:	80 ff       	sbrs	r24, 0
    1a36:	1d c0       	rjmp	.+58     	; 0x1a72 <Endpoint_Write_Control_PStream_LE+0x92>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
    1a38:	20 91 f2 00 	lds	r18, 0x00F2
    1a3c:	30 91 f3 00 	lds	r19, 0x00F3
    1a40:	08 c0       	rjmp	.+16     	; 0x1a52 <Endpoint_Write_Control_PStream_LE+0x72>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1a42:	84 91       	lpm	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1a44:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1a48:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    1a4a:	41 50       	subi	r20, 0x01	; 1
    1a4c:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
    1a4e:	2f 5f       	subi	r18, 0xFF	; 255
    1a50:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1a52:	41 15       	cp	r20, r1
    1a54:	51 05       	cpc	r21, r1
    1a56:	19 f0       	breq	.+6      	; 0x1a5e <Endpoint_Write_Control_PStream_LE+0x7e>
    1a58:	28 30       	cpi	r18, 0x08	; 8
    1a5a:	31 05       	cpc	r19, r1
    1a5c:	90 f3       	brcs	.-28     	; 0x1a42 <Endpoint_Write_Control_PStream_LE+0x62>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	28 30       	cpi	r18, 0x08	; 8
    1a62:	31 05       	cpc	r19, r1
    1a64:	09 f4       	brne	.+2      	; 0x1a68 <Endpoint_Write_Control_PStream_LE+0x88>
    1a66:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1a68:	80 91 e8 00 	lds	r24, 0x00E8
    1a6c:	8e 77       	andi	r24, 0x7E	; 126
    1a6e:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1a72:	41 15       	cp	r20, r1
    1a74:	51 05       	cpc	r21, r1
    1a76:	61 f6       	brne	.-104    	; 0x1a10 <Endpoint_Write_Control_PStream_LE+0x30>
    1a78:	99 23       	and	r25, r25
    1a7a:	51 f6       	brne	.-108    	; 0x1a10 <Endpoint_Write_Control_PStream_LE+0x30>
    1a7c:	0a c0       	rjmp	.+20     	; 0x1a92 <Endpoint_Write_Control_PStream_LE+0xb2>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1a7e:	80 91 77 06 	lds	r24, 0x0677

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1a82:	88 23       	and	r24, r24
    1a84:	61 f0       	breq	.+24     	; 0x1a9e <Endpoint_Write_Control_PStream_LE+0xbe>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1a86:	85 30       	cpi	r24, 0x05	; 5
    1a88:	61 f0       	breq	.+24     	; 0x1aa2 <Endpoint_Write_Control_PStream_LE+0xc2>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1a8a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1a8e:	83 fd       	sbrc	r24, 3
    1a90:	0a c0       	rjmp	.+20     	; 0x1aa6 <Endpoint_Write_Control_PStream_LE+0xc6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1a92:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1a96:	82 ff       	sbrs	r24, 2
    1a98:	f2 cf       	rjmp	.-28     	; 0x1a7e <Endpoint_Write_Control_PStream_LE+0x9e>
    1a9a:	80 e0       	ldi	r24, 0x00	; 0
    1a9c:	08 95       	ret
    1a9e:	82 e0       	ldi	r24, 0x02	; 2
    1aa0:	08 95       	ret
    1aa2:	83 e0       	ldi	r24, 0x03	; 3
    1aa4:	08 95       	ret
    1aa6:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1aa8:	08 95       	ret

00001aaa <Endpoint_Read_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1aaa:	bf 92       	push	r11
    1aac:	cf 92       	push	r12
    1aae:	df 92       	push	r13
    1ab0:	ef 92       	push	r14
    1ab2:	ff 92       	push	r15
    1ab4:	0f 93       	push	r16
    1ab6:	1f 93       	push	r17
    1ab8:	cf 93       	push	r28
    1aba:	df 93       	push	r29
    1abc:	18 2f       	mov	r17, r24
    1abe:	09 2f       	mov	r16, r25
    1ac0:	7b 01       	movw	r14, r22
    1ac2:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    1ac4:	bc d1       	rcall	.+888    	; 0x1e3e <Endpoint_WaitUntilReady>
    1ac6:	b8 2e       	mov	r11, r24
    1ac8:	88 23       	and	r24, r24
    1aca:	a9 f5       	brne	.+106    	; 0x1b36 <Endpoint_Read_Stream_LE+0x8c>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1acc:	81 2f       	mov	r24, r17
    1ace:	90 2f       	mov	r25, r16
    1ad0:	9c 01       	movw	r18, r24
    1ad2:	e9 01       	movw	r28, r18
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1ad4:	c1 14       	cp	r12, r1
    1ad6:	d1 04       	cpc	r13, r1
    1ad8:	39 f0       	breq	.+14     	; 0x1ae8 <Endpoint_Read_Stream_LE+0x3e>
	{
		Length -= *BytesProcessed;
    1ada:	f6 01       	movw	r30, r12
    1adc:	80 81       	ld	r24, Z
    1ade:	91 81       	ldd	r25, Z+1	; 0x01
    1ae0:	e8 1a       	sub	r14, r24
    1ae2:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1ae4:	c8 0f       	add	r28, r24
    1ae6:	d9 1f       	adc	r29, r25
    1ae8:	00 e0       	ldi	r16, 0x00	; 0
    1aea:	10 e0       	ldi	r17, 0x00	; 0
    1aec:	21 c0       	rjmp	.+66     	; 0x1b30 <Endpoint_Read_Stream_LE+0x86>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1aee:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    1af2:	85 fd       	sbrc	r24, 5
    1af4:	15 c0       	rjmp	.+42     	; 0x1b20 <Endpoint_Read_Stream_LE+0x76>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1af6:	80 91 e8 00 	lds	r24, 0x00E8
    1afa:	8b 77       	andi	r24, 0x7B	; 123
    1afc:	80 93 e8 00 	sts	0x00E8, r24

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
    1b00:	c1 14       	cp	r12, r1
    1b02:	d1 04       	cpc	r13, r1
    1b04:	49 f0       	breq	.+18     	; 0x1b18 <Endpoint_Read_Stream_LE+0x6e>
			{
				*BytesProcessed += BytesInTransfer;
    1b06:	f6 01       	movw	r30, r12
    1b08:	80 81       	ld	r24, Z
    1b0a:	91 81       	ldd	r25, Z+1	; 0x01
    1b0c:	80 0f       	add	r24, r16
    1b0e:	91 1f       	adc	r25, r17
    1b10:	91 83       	std	Z+1, r25	; 0x01
    1b12:	80 83       	st	Z, r24
    1b14:	85 e0       	ldi	r24, 0x05	; 5
    1b16:	10 c0       	rjmp	.+32     	; 0x1b38 <Endpoint_Read_Stream_LE+0x8e>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1b18:	92 d1       	rcall	.+804    	; 0x1e3e <Endpoint_WaitUntilReady>
    1b1a:	88 23       	and	r24, r24
    1b1c:	49 f0       	breq	.+18     	; 0x1b30 <Endpoint_Read_Stream_LE+0x86>
    1b1e:	0c c0       	rjmp	.+24     	; 0x1b38 <Endpoint_Read_Stream_LE+0x8e>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1b20:	80 91 f1 00 	lds	r24, 0x00F1
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1b24:	89 93       	st	Y+, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1b26:	08 94       	sec
    1b28:	e1 08       	sbc	r14, r1
    1b2a:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
    1b2c:	0f 5f       	subi	r16, 0xFF	; 255
    1b2e:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1b30:	e1 14       	cp	r14, r1
    1b32:	f1 04       	cpc	r15, r1
    1b34:	e1 f6       	brne	.-72     	; 0x1aee <Endpoint_Read_Stream_LE+0x44>
    1b36:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    1b38:	df 91       	pop	r29
    1b3a:	cf 91       	pop	r28
    1b3c:	1f 91       	pop	r17
    1b3e:	0f 91       	pop	r16
    1b40:	ff 90       	pop	r15
    1b42:	ef 90       	pop	r14
    1b44:	df 90       	pop	r13
    1b46:	cf 90       	pop	r12
    1b48:	bf 90       	pop	r11
    1b4a:	08 95       	ret

00001b4c <Endpoint_Write_Stream_BE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1b4c:	bf 92       	push	r11
    1b4e:	cf 92       	push	r12
    1b50:	df 92       	push	r13
    1b52:	ef 92       	push	r14
    1b54:	ff 92       	push	r15
    1b56:	0f 93       	push	r16
    1b58:	1f 93       	push	r17
    1b5a:	cf 93       	push	r28
    1b5c:	df 93       	push	r29
    1b5e:	8c 01       	movw	r16, r24
    1b60:	eb 01       	movw	r28, r22
    1b62:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    1b64:	6c d1       	rcall	.+728    	; 0x1e3e <Endpoint_WaitUntilReady>
    1b66:	b8 2e       	mov	r11, r24
    1b68:	88 23       	and	r24, r24
    1b6a:	b1 f5       	brne	.+108    	; 0x1bd8 <Endpoint_Write_Stream_BE+0x8c>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1b6c:	21 97       	sbiw	r28, 0x01	; 1
    1b6e:	0c 0f       	add	r16, r28
    1b70:	1d 1f       	adc	r17, r29
    1b72:	21 96       	adiw	r28, 0x01	; 1
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1b74:	c1 14       	cp	r12, r1
    1b76:	d1 04       	cpc	r13, r1
    1b78:	39 f0       	breq	.+14     	; 0x1b88 <Endpoint_Write_Stream_BE+0x3c>
	{
		Length -= *BytesProcessed;
    1b7a:	f6 01       	movw	r30, r12
    1b7c:	80 81       	ld	r24, Z
    1b7e:	91 81       	ldd	r25, Z+1	; 0x01
    1b80:	c8 1b       	sub	r28, r24
    1b82:	d9 0b       	sbc	r29, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1b84:	08 1b       	sub	r16, r24
    1b86:	19 0b       	sbc	r17, r25
    1b88:	ee 24       	eor	r14, r14
    1b8a:	ff 24       	eor	r15, r15
    1b8c:	23 c0       	rjmp	.+70     	; 0x1bd4 <Endpoint_Write_Stream_BE+0x88>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1b8e:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    1b92:	85 fd       	sbrc	r24, 5
    1b94:	15 c0       	rjmp	.+42     	; 0x1bc0 <Endpoint_Write_Stream_BE+0x74>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1b96:	80 91 e8 00 	lds	r24, 0x00E8
    1b9a:	8e 77       	andi	r24, 0x7E	; 126
    1b9c:	80 93 e8 00 	sts	0x00E8, r24

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
    1ba0:	c1 14       	cp	r12, r1
    1ba2:	d1 04       	cpc	r13, r1
    1ba4:	49 f0       	breq	.+18     	; 0x1bb8 <Endpoint_Write_Stream_BE+0x6c>
			{
				*BytesProcessed += BytesInTransfer;
    1ba6:	f6 01       	movw	r30, r12
    1ba8:	80 81       	ld	r24, Z
    1baa:	91 81       	ldd	r25, Z+1	; 0x01
    1bac:	8e 0d       	add	r24, r14
    1bae:	9f 1d       	adc	r25, r15
    1bb0:	91 83       	std	Z+1, r25	; 0x01
    1bb2:	80 83       	st	Z, r24
    1bb4:	85 e0       	ldi	r24, 0x05	; 5
    1bb6:	11 c0       	rjmp	.+34     	; 0x1bda <Endpoint_Write_Stream_BE+0x8e>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1bb8:	42 d1       	rcall	.+644    	; 0x1e3e <Endpoint_WaitUntilReady>
    1bba:	88 23       	and	r24, r24
    1bbc:	59 f0       	breq	.+22     	; 0x1bd4 <Endpoint_Write_Stream_BE+0x88>
    1bbe:	0d c0       	rjmp	.+26     	; 0x1bda <Endpoint_Write_Stream_BE+0x8e>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1bc0:	f8 01       	movw	r30, r16
    1bc2:	80 81       	ld	r24, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1bc4:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1bc8:	01 50       	subi	r16, 0x01	; 1
    1bca:	10 40       	sbci	r17, 0x00	; 0
			Length--;
    1bcc:	21 97       	sbiw	r28, 0x01	; 1
			BytesInTransfer++;
    1bce:	08 94       	sec
    1bd0:	e1 1c       	adc	r14, r1
    1bd2:	f1 1c       	adc	r15, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1bd4:	20 97       	sbiw	r28, 0x00	; 0
    1bd6:	d9 f6       	brne	.-74     	; 0x1b8e <Endpoint_Write_Stream_BE+0x42>
    1bd8:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    1bda:	df 91       	pop	r29
    1bdc:	cf 91       	pop	r28
    1bde:	1f 91       	pop	r17
    1be0:	0f 91       	pop	r16
    1be2:	ff 90       	pop	r15
    1be4:	ef 90       	pop	r14
    1be6:	df 90       	pop	r13
    1be8:	cf 90       	pop	r12
    1bea:	bf 90       	pop	r11
    1bec:	08 95       	ret

00001bee <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    1bee:	bf 92       	push	r11
    1bf0:	cf 92       	push	r12
    1bf2:	df 92       	push	r13
    1bf4:	ef 92       	push	r14
    1bf6:	ff 92       	push	r15
    1bf8:	0f 93       	push	r16
    1bfa:	1f 93       	push	r17
    1bfc:	cf 93       	push	r28
    1bfe:	df 93       	push	r29
    1c00:	18 2f       	mov	r17, r24
    1c02:	09 2f       	mov	r16, r25
    1c04:	7b 01       	movw	r14, r22
    1c06:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    1c08:	1a d1       	rcall	.+564    	; 0x1e3e <Endpoint_WaitUntilReady>
    1c0a:	b8 2e       	mov	r11, r24
    1c0c:	88 23       	and	r24, r24
    1c0e:	a9 f5       	brne	.+106    	; 0x1c7a <Endpoint_Write_Stream_LE+0x8c>

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    1c10:	81 2f       	mov	r24, r17
    1c12:	90 2f       	mov	r25, r16
    1c14:	9c 01       	movw	r18, r24
    1c16:	e9 01       	movw	r28, r18
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1c18:	c1 14       	cp	r12, r1
    1c1a:	d1 04       	cpc	r13, r1
    1c1c:	39 f0       	breq	.+14     	; 0x1c2c <Endpoint_Write_Stream_LE+0x3e>
	{
		Length -= *BytesProcessed;
    1c1e:	f6 01       	movw	r30, r12
    1c20:	80 81       	ld	r24, Z
    1c22:	91 81       	ldd	r25, Z+1	; 0x01
    1c24:	e8 1a       	sub	r14, r24
    1c26:	f9 0a       	sbc	r15, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    1c28:	c8 0f       	add	r28, r24
    1c2a:	d9 1f       	adc	r29, r25
    1c2c:	00 e0       	ldi	r16, 0x00	; 0
    1c2e:	10 e0       	ldi	r17, 0x00	; 0
    1c30:	21 c0       	rjmp	.+66     	; 0x1c74 <Endpoint_Write_Stream_LE+0x86>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1c32:	80 91 e8 00 	lds	r24, 0x00E8
	}

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    1c36:	85 fd       	sbrc	r24, 5
    1c38:	15 c0       	rjmp	.+42     	; 0x1c64 <Endpoint_Write_Stream_LE+0x76>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1c3a:	80 91 e8 00 	lds	r24, 0x00E8
    1c3e:	8e 77       	andi	r24, 0x7E	; 126
    1c40:	80 93 e8 00 	sts	0x00E8, r24

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
    1c44:	c1 14       	cp	r12, r1
    1c46:	d1 04       	cpc	r13, r1
    1c48:	49 f0       	breq	.+18     	; 0x1c5c <Endpoint_Write_Stream_LE+0x6e>
			{
				*BytesProcessed += BytesInTransfer;
    1c4a:	f6 01       	movw	r30, r12
    1c4c:	80 81       	ld	r24, Z
    1c4e:	91 81       	ldd	r25, Z+1	; 0x01
    1c50:	80 0f       	add	r24, r16
    1c52:	91 1f       	adc	r25, r17
    1c54:	91 83       	std	Z+1, r25	; 0x01
    1c56:	80 83       	st	Z, r24
    1c58:	85 e0       	ldi	r24, 0x05	; 5
    1c5a:	10 c0       	rjmp	.+32     	; 0x1c7c <Endpoint_Write_Stream_LE+0x8e>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1c5c:	f0 d0       	rcall	.+480    	; 0x1e3e <Endpoint_WaitUntilReady>
    1c5e:	88 23       	and	r24, r24
    1c60:	49 f0       	breq	.+18     	; 0x1c74 <Endpoint_Write_Stream_LE+0x86>
    1c62:	0c c0       	rjmp	.+24     	; 0x1c7c <Endpoint_Write_Stream_LE+0x8e>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1c64:	89 91       	ld	r24, Y+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1c66:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    1c6a:	08 94       	sec
    1c6c:	e1 08       	sbc	r14, r1
    1c6e:	f1 08       	sbc	r15, r1
			BytesInTransfer++;
    1c70:	0f 5f       	subi	r16, 0xFF	; 255
    1c72:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    1c74:	e1 14       	cp	r14, r1
    1c76:	f1 04       	cpc	r15, r1
    1c78:	e1 f6       	brne	.-72     	; 0x1c32 <Endpoint_Write_Stream_LE+0x44>
    1c7a:	8b 2d       	mov	r24, r11
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    1c7c:	df 91       	pop	r29
    1c7e:	cf 91       	pop	r28
    1c80:	1f 91       	pop	r17
    1c82:	0f 91       	pop	r16
    1c84:	ff 90       	pop	r15
    1c86:	ef 90       	pop	r14
    1c88:	df 90       	pop	r13
    1c8a:	cf 90       	pop	r12
    1c8c:	bf 90       	pop	r11
    1c8e:	08 95       	ret

00001c90 <Endpoint_Null_Stream>:
	return ENDPOINT_RWSTREAM_NoError;
}

uint8_t Endpoint_Null_Stream(uint16_t Length,
                             uint16_t* const BytesProcessed)
{
    1c90:	df 92       	push	r13
    1c92:	ef 92       	push	r14
    1c94:	ff 92       	push	r15
    1c96:	0f 93       	push	r16
    1c98:	1f 93       	push	r17
    1c9a:	cf 93       	push	r28
    1c9c:	df 93       	push	r29
    1c9e:	ec 01       	movw	r28, r24
    1ca0:	8b 01       	movw	r16, r22
	uint8_t  ErrorCode;
	uint16_t BytesInTransfer = 0;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    1ca2:	cd d0       	rcall	.+410    	; 0x1e3e <Endpoint_WaitUntilReady>
    1ca4:	d8 2e       	mov	r13, r24
    1ca6:	88 23       	and	r24, r24
    1ca8:	61 f5       	brne	.+88     	; 0x1d02 <Endpoint_Null_Stream+0x72>
	  return ErrorCode;

	if (BytesProcessed != NULL)
    1caa:	01 15       	cp	r16, r1
    1cac:	11 05       	cpc	r17, r1
    1cae:	29 f0       	breq	.+10     	; 0x1cba <Endpoint_Null_Stream+0x2a>
	  Length -= *BytesProcessed;
    1cb0:	f8 01       	movw	r30, r16
    1cb2:	80 81       	ld	r24, Z
    1cb4:	91 81       	ldd	r25, Z+1	; 0x01
    1cb6:	c8 1b       	sub	r28, r24
    1cb8:	d9 0b       	sbc	r29, r25
    1cba:	ee 24       	eor	r14, r14
    1cbc:	ff 24       	eor	r15, r15
    1cbe:	1f c0       	rjmp	.+62     	; 0x1cfe <Endpoint_Null_Stream+0x6e>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1cc0:	80 91 e8 00 	lds	r24, 0x00E8

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    1cc4:	85 fd       	sbrc	r24, 5
    1cc6:	15 c0       	rjmp	.+42     	; 0x1cf2 <Endpoint_Null_Stream+0x62>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1cc8:	80 91 e8 00 	lds	r24, 0x00E8
    1ccc:	8e 77       	andi	r24, 0x7E	; 126
    1cce:	80 93 e8 00 	sts	0x00E8, r24
		{
			Endpoint_ClearIN();

			if (BytesProcessed != NULL)
    1cd2:	01 15       	cp	r16, r1
    1cd4:	11 05       	cpc	r17, r1
    1cd6:	49 f0       	breq	.+18     	; 0x1cea <Endpoint_Null_Stream+0x5a>
			{
				*BytesProcessed += BytesInTransfer;
    1cd8:	f8 01       	movw	r30, r16
    1cda:	80 81       	ld	r24, Z
    1cdc:	91 81       	ldd	r25, Z+1	; 0x01
    1cde:	8e 0d       	add	r24, r14
    1ce0:	9f 1d       	adc	r25, r15
    1ce2:	91 83       	std	Z+1, r25	; 0x01
    1ce4:	80 83       	st	Z, r24
    1ce6:	85 e0       	ldi	r24, 0x05	; 5
    1ce8:	0d c0       	rjmp	.+26     	; 0x1d04 <Endpoint_Null_Stream+0x74>
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    1cea:	a9 d0       	rcall	.+338    	; 0x1e3e <Endpoint_WaitUntilReady>
    1cec:	88 23       	and	r24, r24
    1cee:	39 f0       	breq	.+14     	; 0x1cfe <Endpoint_Null_Stream+0x6e>
    1cf0:	09 c0       	rjmp	.+18     	; 0x1d04 <Endpoint_Null_Stream+0x74>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1cf2:	10 92 f1 00 	sts	0x00F1, r1
		}
		else
		{
			Endpoint_Write_8(0);

			Length--;
    1cf6:	21 97       	sbiw	r28, 0x01	; 1
			BytesInTransfer++;
    1cf8:	08 94       	sec
    1cfa:	e1 1c       	adc	r14, r1
    1cfc:	f1 1c       	adc	r15, r1
	  return ErrorCode;

	if (BytesProcessed != NULL)
	  Length -= *BytesProcessed;

	while (Length)
    1cfe:	20 97       	sbiw	r28, 0x00	; 0
    1d00:	f9 f6       	brne	.-66     	; 0x1cc0 <Endpoint_Null_Stream+0x30>
    1d02:	8d 2d       	mov	r24, r13
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    1d04:	df 91       	pop	r29
    1d06:	cf 91       	pop	r28
    1d08:	1f 91       	pop	r17
    1d0a:	0f 91       	pop	r16
    1d0c:	ff 90       	pop	r15
    1d0e:	ef 90       	pop	r14
    1d10:	df 90       	pop	r13
    1d12:	08 95       	ret

00001d14 <Endpoint_ConfigureEndpoint_Prv>:
}

bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
                                    const uint8_t UECFG0XData,
                                    const uint8_t UECFG1XData)
{
    1d14:	38 2f       	mov	r19, r24
    1d16:	28 2f       	mov	r18, r24
    1d18:	2e c0       	rjmp	.+92     	; 0x1d76 <Endpoint_ConfigureEndpoint_Prv+0x62>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1d1a:	82 2f       	mov	r24, r18
    1d1c:	8f 70       	andi	r24, 0x0F	; 15
    1d1e:	80 93 e9 00 	sts	0x00E9, r24
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
    1d22:	23 17       	cp	r18, r19
    1d24:	21 f4       	brne	.+8      	; 0x1d2e <Endpoint_ConfigureEndpoint_Prv+0x1a>
    1d26:	76 2f       	mov	r23, r22
    1d28:	94 2f       	mov	r25, r20
    1d2a:	50 e0       	ldi	r21, 0x00	; 0
    1d2c:	06 c0       	rjmp	.+12     	; 0x1d3a <Endpoint_ConfigureEndpoint_Prv+0x26>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    1d2e:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    1d32:	90 91 ed 00 	lds	r25, 0x00ED
			UEIENXTemp  = UEIENX;
    1d36:	50 91 f0 00 	lds	r21, 0x00F0
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    1d3a:	91 ff       	sbrs	r25, 1
    1d3c:	1b c0       	rjmp	.+54     	; 0x1d74 <Endpoint_ConfigureEndpoint_Prv+0x60>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    1d3e:	80 91 eb 00 	lds	r24, 0x00EB
    1d42:	8e 7f       	andi	r24, 0xFE	; 254
    1d44:	80 93 eb 00 	sts	0x00EB, r24
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    1d48:	80 91 ed 00 	lds	r24, 0x00ED
    1d4c:	8d 7f       	andi	r24, 0xFD	; 253
    1d4e:	80 93 ed 00 	sts	0x00ED, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    1d52:	80 91 eb 00 	lds	r24, 0x00EB
    1d56:	81 60       	ori	r24, 0x01	; 1
    1d58:	80 93 eb 00 	sts	0x00EB, r24

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    1d5c:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    1d60:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX  = UEIENXTemp;
    1d64:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1d68:	80 91 ee 00 	lds	r24, 0x00EE

		if (!(Endpoint_IsConfigured()))
    1d6c:	87 fd       	sbrc	r24, 7
    1d6e:	02 c0       	rjmp	.+4      	; 0x1d74 <Endpoint_ConfigureEndpoint_Prv+0x60>
    1d70:	80 e0       	ldi	r24, 0x00	; 0
    1d72:	08 95       	ret
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1d74:	2f 5f       	subi	r18, 0xFF	; 255
    1d76:	27 30       	cpi	r18, 0x07	; 7
    1d78:	80 f2       	brcs	.-96     	; 0x1d1a <Endpoint_ConfigureEndpoint_Prv+0x6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1d7a:	3f 70       	andi	r19, 0x0F	; 15
    1d7c:	30 93 e9 00 	sts	0x00E9, r19
    1d80:	81 e0       	ldi	r24, 0x01	; 1
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    1d82:	08 95       	ret

00001d84 <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
    1d84:	0f 93       	push	r16
    1d86:	1f 93       	push	r17
    1d88:	cf 93       	push	r28
    1d8a:	df 93       	push	r29
    1d8c:	06 2f       	mov	r16, r22
    1d8e:	ec 01       	movw	r28, r24
    1d90:	10 e0       	ldi	r17, 0x00	; 0
    1d92:	2a c0       	rjmp	.+84     	; 0x1de8 <Endpoint_ConfigureEndpointTable+0x64>
	for (uint8_t i = 0; i < Entries; i++)
	{
		if (!(Table[i].Address))
    1d94:	98 81       	ld	r25, Y
    1d96:	99 23       	and	r25, r25
    1d98:	29 f1       	breq	.+74     	; 0x1de4 <Endpoint_ConfigureEndpointTable+0x60>
		  continue;

		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
    1d9a:	6b 81       	ldd	r22, Y+3	; 0x03
    1d9c:	e9 81       	ldd	r30, Y+1	; 0x01
    1d9e:	fa 81       	ldd	r31, Y+2	; 0x02
    1da0:	2c 81       	ldd	r18, Y+4	; 0x04
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
    1da2:	89 2f       	mov	r24, r25
    1da4:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
    1da6:	87 30       	cpi	r24, 0x07	; 7
    1da8:	18 f5       	brcc	.+70     	; 0x1df0 <Endpoint_ConfigureEndpointTable+0x6c>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1daa:	22 30       	cpi	r18, 0x02	; 2
    1dac:	10 f4       	brcc	.+4      	; 0x1db2 <Endpoint_ConfigureEndpointTable+0x2e>
    1dae:	52 e0       	ldi	r21, 0x02	; 2
    1db0:	01 c0       	rjmp	.+2      	; 0x1db4 <Endpoint_ConfigureEndpointTable+0x30>
    1db2:	56 e0       	ldi	r21, 0x06	; 6
    1db4:	40 e0       	ldi	r20, 0x00	; 0
    1db6:	28 e0       	ldi	r18, 0x08	; 8
    1db8:	30 e0       	ldi	r19, 0x00	; 0
    1dba:	03 c0       	rjmp	.+6      	; 0x1dc2 <Endpoint_ConfigureEndpointTable+0x3e>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
    1dbc:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
    1dbe:	22 0f       	add	r18, r18
    1dc0:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
    1dc2:	2e 17       	cp	r18, r30
    1dc4:	3f 07       	cpc	r19, r31
    1dc6:	d0 f3       	brcs	.-12     	; 0x1dbc <Endpoint_ConfigureEndpointTable+0x38>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1dc8:	62 95       	swap	r22
    1dca:	66 0f       	add	r22, r22
    1dcc:	66 0f       	add	r22, r22
    1dce:	60 7c       	andi	r22, 0xC0	; 192
    1dd0:	99 1f       	adc	r25, r25
    1dd2:	99 27       	eor	r25, r25
    1dd4:	99 1f       	adc	r25, r25
    1dd6:	69 2b       	or	r22, r25
    1dd8:	42 95       	swap	r20
    1dda:	40 7f       	andi	r20, 0xF0	; 240
    1ddc:	45 2b       	or	r20, r21
    1dde:	9a df       	rcall	.-204    	; 0x1d14 <Endpoint_ConfigureEndpoint_Prv>
    1de0:	88 23       	and	r24, r24
    1de2:	31 f0       	breq	.+12     	; 0x1df0 <Endpoint_ConfigureEndpointTable+0x6c>
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
    1de4:	1f 5f       	subi	r17, 0xFF	; 255
    1de6:	25 96       	adiw	r28, 0x05	; 5
    1de8:	10 17       	cp	r17, r16
    1dea:	a0 f2       	brcs	.-88     	; 0x1d94 <Endpoint_ConfigureEndpointTable+0x10>
    1dec:	81 e0       	ldi	r24, 0x01	; 1
    1dee:	01 c0       	rjmp	.+2      	; 0x1df2 <Endpoint_ConfigureEndpointTable+0x6e>
    1df0:	80 e0       	ldi	r24, 0x00	; 0
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}

	return true;
}
    1df2:	df 91       	pop	r29
    1df4:	cf 91       	pop	r28
    1df6:	1f 91       	pop	r17
    1df8:	0f 91       	pop	r16
    1dfa:	08 95       	ret

00001dfc <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    1dfc:	80 91 78 06 	lds	r24, 0x0678
    1e00:	88 23       	and	r24, r24
    1e02:	9c f4       	brge	.+38     	; 0x1e2a <Endpoint_ClearStatusStage+0x2e>
    1e04:	04 c0       	rjmp	.+8      	; 0x1e0e <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1e06:	80 91 77 06 	lds	r24, 0x0677
    1e0a:	88 23       	and	r24, r24
    1e0c:	b9 f0       	breq	.+46     	; 0x1e3c <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1e0e:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    1e12:	82 ff       	sbrs	r24, 2
    1e14:	f8 cf       	rjmp	.-16     	; 0x1e06 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1e16:	80 91 e8 00 	lds	r24, 0x00E8
    1e1a:	8b 77       	andi	r24, 0x7B	; 123
    1e1c:	80 93 e8 00 	sts	0x00E8, r24
    1e20:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1e22:	80 91 77 06 	lds	r24, 0x0677
    1e26:	88 23       	and	r24, r24
    1e28:	49 f0       	breq	.+18     	; 0x1e3c <Endpoint_ClearStatusStage+0x40>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1e2a:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    1e2e:	80 ff       	sbrs	r24, 0
    1e30:	f8 cf       	rjmp	.-16     	; 0x1e22 <Endpoint_ClearStatusStage+0x26>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1e32:	80 91 e8 00 	lds	r24, 0x00E8
    1e36:	8e 77       	andi	r24, 0x7E	; 126
    1e38:	80 93 e8 00 	sts	0x00E8, r24
    1e3c:	08 95       	ret

00001e3e <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1e3e:	40 91 e4 00 	lds	r20, 0x00E4
    1e42:	50 91 e5 00 	lds	r21, 0x00E5
    1e46:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1e48:	80 91 ec 00 	lds	r24, 0x00EC
    1e4c:	80 ff       	sbrs	r24, 0
    1e4e:	24 c0       	rjmp	.+72     	; 0x1e98 <Endpoint_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1e50:	80 91 e8 00 	lds	r24, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    1e54:	80 fd       	sbrc	r24, 0
    1e56:	1e c0       	rjmp	.+60     	; 0x1e94 <Endpoint_WaitUntilReady+0x56>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1e58:	80 91 77 06 	lds	r24, 0x0677

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1e5c:	88 23       	and	r24, r24
    1e5e:	11 f4       	brne	.+4      	; 0x1e64 <Endpoint_WaitUntilReady+0x26>
    1e60:	82 e0       	ldi	r24, 0x02	; 2
    1e62:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1e64:	85 30       	cpi	r24, 0x05	; 5
    1e66:	11 f4       	brne	.+4      	; 0x1e6c <Endpoint_WaitUntilReady+0x2e>
    1e68:	83 e0       	ldi	r24, 0x03	; 3
    1e6a:	08 95       	ret
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1e6c:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1e70:	85 ff       	sbrs	r24, 5
    1e72:	02 c0       	rjmp	.+4      	; 0x1e78 <Endpoint_WaitUntilReady+0x3a>
    1e74:	81 e0       	ldi	r24, 0x01	; 1
    1e76:	08 95       	ret
    1e78:	80 91 e4 00 	lds	r24, 0x00E4
    1e7c:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1e80:	84 17       	cp	r24, r20
    1e82:	95 07       	cpc	r25, r21
    1e84:	09 f3       	breq	.-62     	; 0x1e48 <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1e86:	22 23       	and	r18, r18
    1e88:	11 f4       	brne	.+4      	; 0x1e8e <Endpoint_WaitUntilReady+0x50>
    1e8a:	84 e0       	ldi	r24, 0x04	; 4
    1e8c:	08 95       	ret
    1e8e:	21 50       	subi	r18, 0x01	; 1
    1e90:	ac 01       	movw	r20, r24
    1e92:	da cf       	rjmp	.-76     	; 0x1e48 <Endpoint_WaitUntilReady+0xa>
    1e94:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    1e96:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1e98:	80 91 e8 00 	lds	r24, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1e9c:	82 ff       	sbrs	r24, 2
    1e9e:	dc cf       	rjmp	.-72     	; 0x1e58 <Endpoint_WaitUntilReady+0x1a>
    1ea0:	f9 cf       	rjmp	.-14     	; 0x1e94 <Endpoint_WaitUntilReady+0x56>

00001ea2 <USB_ResetInterface>:

void USB_ResetInterface(void)
{
    1ea2:	ef 92       	push	r14
    1ea4:	ff 92       	push	r15
    1ea6:	0f 93       	push	r16
    1ea8:	1f 93       	push	r17
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    1eaa:	52 d0       	rcall	.+164    	; 0x1f50 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1eac:	59 d0       	rcall	.+178    	; 0x1f60 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1eae:	08 ed       	ldi	r16, 0xD8	; 216
    1eb0:	10 e0       	ldi	r17, 0x00	; 0
    1eb2:	f8 01       	movw	r30, r16
    1eb4:	80 81       	ld	r24, Z
    1eb6:	8f 77       	andi	r24, 0x7F	; 127
    1eb8:	80 83       	st	Z, r24
				USBCON |=  (1 << USBE);
    1eba:	80 81       	ld	r24, Z
    1ebc:	80 68       	ori	r24, 0x80	; 128
    1ebe:	80 83       	st	Z, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1ec0:	80 81       	ld	r24, Z
    1ec2:	8f 7d       	andi	r24, 0xDF	; 223
    1ec4:	80 83       	st	Z, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
    1ec6:	e7 ed       	ldi	r30, 0xD7	; 215
    1ec8:	f0 e0       	ldi	r31, 0x00	; 0
    1eca:	80 81       	ld	r24, Z
    1ecc:	80 68       	ori	r24, 0x80	; 128
    1ece:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1ed0:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1ed2:	10 92 77 06 	sts	0x0677, r1
	USB_Device_ConfigurationNumber  = 0;
    1ed6:	10 92 73 06 	sts	0x0673, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    1eda:	10 92 75 06 	sts	0x0675, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    1ede:	10 92 74 06 	sts	0x0674, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    1ee2:	80 ee       	ldi	r24, 0xE0	; 224
    1ee4:	e8 2e       	mov	r14, r24
    1ee6:	f1 2c       	mov	r15, r1
    1ee8:	f7 01       	movw	r30, r14
    1eea:	80 81       	ld	r24, Z
    1eec:	8b 7f       	andi	r24, 0xFB	; 251
    1eee:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    1ef0:	f8 01       	movw	r30, r16
    1ef2:	80 81       	ld	r24, Z
    1ef4:	81 60       	ori	r24, 0x01	; 1
    1ef6:	80 83       	st	Z, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1ef8:	80 e0       	ldi	r24, 0x00	; 0
    1efa:	60 e0       	ldi	r22, 0x00	; 0
    1efc:	42 e0       	ldi	r20, 0x02	; 2
    1efe:	0a df       	rcall	.-492    	; 0x1d14 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1f00:	e1 ee       	ldi	r30, 0xE1	; 225
    1f02:	f0 e0       	ldi	r31, 0x00	; 0
    1f04:	80 81       	ld	r24, Z
    1f06:	8e 7f       	andi	r24, 0xFE	; 254
    1f08:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1f0a:	e2 ee       	ldi	r30, 0xE2	; 226
    1f0c:	f0 e0       	ldi	r31, 0x00	; 0
    1f0e:	80 81       	ld	r24, Z
    1f10:	81 60       	ori	r24, 0x01	; 1
    1f12:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    1f14:	80 81       	ld	r24, Z
    1f16:	88 60       	ori	r24, 0x08	; 8
    1f18:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1f1a:	f7 01       	movw	r30, r14
    1f1c:	80 81       	ld	r24, Z
    1f1e:	8e 7f       	andi	r24, 0xFE	; 254
    1f20:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    1f22:	f8 01       	movw	r30, r16
    1f24:	80 81       	ld	r24, Z
    1f26:	80 61       	ori	r24, 0x10	; 16
    1f28:	80 83       	st	Z, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    1f2a:	1f 91       	pop	r17
    1f2c:	0f 91       	pop	r16
    1f2e:	ff 90       	pop	r15
    1f30:	ef 90       	pop	r14
    1f32:	08 95       	ret

00001f34 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1f34:	e8 ed       	ldi	r30, 0xD8	; 216
    1f36:	f0 e0       	ldi	r31, 0x00	; 0
    1f38:	80 81       	ld	r24, Z
    1f3a:	8f 7e       	andi	r24, 0xEF	; 239
    1f3c:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    1f3e:	e7 ed       	ldi	r30, 0xD7	; 215
    1f40:	f0 e0       	ldi	r31, 0x00	; 0
    1f42:	80 81       	ld	r24, Z
    1f44:	81 60       	ori	r24, 0x01	; 1
    1f46:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1f48:	81 e0       	ldi	r24, 0x01	; 1
    1f4a:	80 93 76 06 	sts	0x0676, r24

	USB_ResetInterface();
}
    1f4e:	a9 cf       	rjmp	.-174    	; 0x1ea2 <USB_ResetInterface>

00001f50 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    1f50:	e8 ed       	ldi	r30, 0xD8	; 216
    1f52:	f0 e0       	ldi	r31, 0x00	; 0
    1f54:	80 81       	ld	r24, Z
    1f56:	8c 7f       	andi	r24, 0xFC	; 252
    1f58:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1f5a:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
    1f5e:	08 95       	ret

00001f60 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1f60:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1f64:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
    1f68:	08 95       	ret

00001f6a <__vector_11>:
	#endif
}

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    1f6a:	1f 92       	push	r1
    1f6c:	0f 92       	push	r0
    1f6e:	0f b6       	in	r0, 0x3f	; 63
    1f70:	0f 92       	push	r0
    1f72:	0b b6       	in	r0, 0x3b	; 59
    1f74:	0f 92       	push	r0
    1f76:	11 24       	eor	r1, r1
    1f78:	1f 93       	push	r17
    1f7a:	2f 93       	push	r18
    1f7c:	3f 93       	push	r19
    1f7e:	4f 93       	push	r20
    1f80:	5f 93       	push	r21
    1f82:	6f 93       	push	r22
    1f84:	7f 93       	push	r23
    1f86:	8f 93       	push	r24
    1f88:	9f 93       	push	r25
    1f8a:	af 93       	push	r26
    1f8c:	bf 93       	push	r27
    1f8e:	ef 93       	push	r30
    1f90:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1f92:	10 91 e9 00 	lds	r17, 0x00E9
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1f96:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1f9a:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    1f9e:	80 91 f0 00 	lds	r24, 0x00F0
    1fa2:	87 7f       	andi	r24, 0xF7	; 247
    1fa4:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    1fa8:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    1faa:	f0 d0       	rcall	.+480    	; 0x218c <USB_Device_ProcessControlRequest>
    1fac:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1fb0:	80 91 f0 00 	lds	r24, 0x00F0
    1fb4:	88 60       	ori	r24, 0x08	; 8
    1fb6:	80 93 f0 00 	sts	0x00F0, r24
    1fba:	1f 70       	andi	r17, 0x0F	; 15
    1fbc:	10 93 e9 00 	sts	0x00E9, r17

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    1fc0:	ff 91       	pop	r31
    1fc2:	ef 91       	pop	r30
    1fc4:	bf 91       	pop	r27
    1fc6:	af 91       	pop	r26
    1fc8:	9f 91       	pop	r25
    1fca:	8f 91       	pop	r24
    1fcc:	7f 91       	pop	r23
    1fce:	6f 91       	pop	r22
    1fd0:	5f 91       	pop	r21
    1fd2:	4f 91       	pop	r20
    1fd4:	3f 91       	pop	r19
    1fd6:	2f 91       	pop	r18
    1fd8:	1f 91       	pop	r17
    1fda:	0f 90       	pop	r0
    1fdc:	0b be       	out	0x3b, r0	; 59
    1fde:	0f 90       	pop	r0
    1fe0:	0f be       	out	0x3f, r0	; 63
    1fe2:	0f 90       	pop	r0
    1fe4:	1f 90       	pop	r1
    1fe6:	18 95       	reti

00001fe8 <__vector_10>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1fe8:	1f 92       	push	r1
    1fea:	0f 92       	push	r0
    1fec:	0f b6       	in	r0, 0x3f	; 63
    1fee:	0f 92       	push	r0
    1ff0:	0b b6       	in	r0, 0x3b	; 59
    1ff2:	0f 92       	push	r0
    1ff4:	11 24       	eor	r1, r1
    1ff6:	2f 93       	push	r18
    1ff8:	3f 93       	push	r19
    1ffa:	4f 93       	push	r20
    1ffc:	5f 93       	push	r21
    1ffe:	6f 93       	push	r22
    2000:	7f 93       	push	r23
    2002:	8f 93       	push	r24
    2004:	9f 93       	push	r25
    2006:	af 93       	push	r26
    2008:	bf 93       	push	r27
    200a:	ef 93       	push	r30
    200c:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    200e:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    2012:	82 ff       	sbrs	r24, 2
    2014:	0b c0       	rjmp	.+22     	; 0x202c <__vector_10+0x44>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    2016:	80 91 e2 00 	lds	r24, 0x00E2
    201a:	82 ff       	sbrs	r24, 2
    201c:	07 c0       	rjmp	.+14     	; 0x202c <__vector_10+0x44>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    201e:	80 91 e1 00 	lds	r24, 0x00E1
    2022:	8b 7f       	andi	r24, 0xFB	; 251
    2024:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    2028:	0e 94 c2 01 	call	0x384	; 0x384 <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    202c:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    2030:	80 ff       	sbrs	r24, 0
    2032:	1f c0       	rjmp	.+62     	; 0x2072 <__vector_10+0x8a>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    2034:	80 91 d8 00 	lds	r24, 0x00D8
    2038:	80 ff       	sbrs	r24, 0
    203a:	1b c0       	rjmp	.+54     	; 0x2072 <__vector_10+0x8a>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    203c:	80 91 da 00 	lds	r24, 0x00DA
    2040:	8e 7f       	andi	r24, 0xFE	; 254
    2042:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    2046:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    204a:	80 ff       	sbrs	r24, 0
    204c:	0d c0       	rjmp	.+26     	; 0x2068 <__vector_10+0x80>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    204e:	8c e0       	ldi	r24, 0x0C	; 12
    2050:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    2052:	8e e0       	ldi	r24, 0x0E	; 14
    2054:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    2056:	09 b4       	in	r0, 0x29	; 41
    2058:	00 fe       	sbrs	r0, 0
    205a:	fd cf       	rjmp	.-6      	; 0x2056 <__vector_10+0x6e>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    205c:	81 e0       	ldi	r24, 0x01	; 1
    205e:	80 93 77 06 	sts	0x0677, r24
			EVENT_USB_Device_Connect();
    2062:	0e 94 32 02 	call	0x464	; 0x464 <EVENT_USB_Device_Connect>
    2066:	05 c0       	rjmp	.+10     	; 0x2072 <__vector_10+0x8a>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    2068:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    206a:	10 92 77 06 	sts	0x0677, r1
			EVENT_USB_Device_Disconnect();
    206e:	0e 94 22 02 	call	0x444	; 0x444 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    2072:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    2076:	80 ff       	sbrs	r24, 0
    2078:	18 c0       	rjmp	.+48     	; 0x20aa <__vector_10+0xc2>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    207a:	80 91 e2 00 	lds	r24, 0x00E2
    207e:	80 ff       	sbrs	r24, 0
    2080:	14 c0       	rjmp	.+40     	; 0x20aa <__vector_10+0xc2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    2082:	80 91 e2 00 	lds	r24, 0x00E2
    2086:	8e 7f       	andi	r24, 0xFE	; 254
    2088:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    208c:	80 91 e2 00 	lds	r24, 0x00E2
    2090:	80 61       	ori	r24, 0x10	; 16
    2092:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    2096:	80 91 d8 00 	lds	r24, 0x00D8
    209a:	80 62       	ori	r24, 0x20	; 32
    209c:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    20a0:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    20a2:	85 e0       	ldi	r24, 0x05	; 5
    20a4:	80 93 77 06 	sts	0x0677, r24
		EVENT_USB_Device_Suspend();
    20a8:	e4 d1       	rcall	.+968    	; 0x2472 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    20aa:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    20ae:	84 ff       	sbrs	r24, 4
    20b0:	2f c0       	rjmp	.+94     	; 0x2110 <__stack+0x11>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    20b2:	80 91 e2 00 	lds	r24, 0x00E2
    20b6:	84 ff       	sbrs	r24, 4
    20b8:	2b c0       	rjmp	.+86     	; 0x2110 <__stack+0x11>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    20ba:	8c e0       	ldi	r24, 0x0C	; 12
    20bc:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    20be:	8e e0       	ldi	r24, 0x0E	; 14
    20c0:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    20c2:	09 b4       	in	r0, 0x29	; 41
    20c4:	00 fe       	sbrs	r0, 0
    20c6:	fd cf       	rjmp	.-6      	; 0x20c2 <__vector_10+0xda>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    20c8:	80 91 d8 00 	lds	r24, 0x00D8
    20cc:	8f 7d       	andi	r24, 0xDF	; 223
    20ce:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    20d2:	80 91 e1 00 	lds	r24, 0x00E1
    20d6:	8f 7e       	andi	r24, 0xEF	; 239
    20d8:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    20dc:	80 91 e2 00 	lds	r24, 0x00E2
    20e0:	8f 7e       	andi	r24, 0xEF	; 239
    20e2:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    20e6:	80 91 e2 00 	lds	r24, 0x00E2
    20ea:	81 60       	ori	r24, 0x01	; 1
    20ec:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    20f0:	80 91 73 06 	lds	r24, 0x0673
    20f4:	88 23       	and	r24, r24
    20f6:	11 f0       	breq	.+4      	; 0x20fc <__vector_10+0x114>
		  USB_DeviceState = DEVICE_STATE_Configured;
    20f8:	84 e0       	ldi	r24, 0x04	; 4
    20fa:	07 c0       	rjmp	.+14     	; 0x210a <__stack+0xb>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    20fc:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    2100:	87 fd       	sbrc	r24, 7
    2102:	02 c0       	rjmp	.+4      	; 0x2108 <__stack+0x9>
    2104:	81 e0       	ldi	r24, 0x01	; 1
    2106:	01 c0       	rjmp	.+2      	; 0x210a <__stack+0xb>
    2108:	83 e0       	ldi	r24, 0x03	; 3
    210a:	80 93 77 06 	sts	0x0677, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    210e:	b1 d1       	rcall	.+866    	; 0x2472 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    2110:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    2114:	83 ff       	sbrs	r24, 3
    2116:	27 c0       	rjmp	.+78     	; 0x2166 <__stack+0x67>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    2118:	80 91 e2 00 	lds	r24, 0x00E2
    211c:	83 ff       	sbrs	r24, 3
    211e:	23 c0       	rjmp	.+70     	; 0x2166 <__stack+0x67>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    2120:	80 91 e1 00 	lds	r24, 0x00E1
    2124:	87 7f       	andi	r24, 0xF7	; 247
    2126:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    212a:	82 e0       	ldi	r24, 0x02	; 2
    212c:	80 93 77 06 	sts	0x0677, r24
		USB_Device_ConfigurationNumber = 0;
    2130:	10 92 73 06 	sts	0x0673, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    2134:	80 91 e1 00 	lds	r24, 0x00E1
    2138:	8e 7f       	andi	r24, 0xFE	; 254
    213a:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    213e:	80 91 e2 00 	lds	r24, 0x00E2
    2142:	8e 7f       	andi	r24, 0xFE	; 254
    2144:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    2148:	80 91 e2 00 	lds	r24, 0x00E2
    214c:	80 61       	ori	r24, 0x10	; 16
    214e:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    2152:	80 e0       	ldi	r24, 0x00	; 0
    2154:	60 e0       	ldi	r22, 0x00	; 0
    2156:	42 e0       	ldi	r20, 0x02	; 2
    2158:	dd dd       	rcall	.-1094   	; 0x1d14 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    215a:	80 91 f0 00 	lds	r24, 0x00F0
    215e:	88 60       	ori	r24, 0x08	; 8
    2160:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    2164:	86 d1       	rcall	.+780    	; 0x2472 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    2166:	ff 91       	pop	r31
    2168:	ef 91       	pop	r30
    216a:	bf 91       	pop	r27
    216c:	af 91       	pop	r26
    216e:	9f 91       	pop	r25
    2170:	8f 91       	pop	r24
    2172:	7f 91       	pop	r23
    2174:	6f 91       	pop	r22
    2176:	5f 91       	pop	r21
    2178:	4f 91       	pop	r20
    217a:	3f 91       	pop	r19
    217c:	2f 91       	pop	r18
    217e:	0f 90       	pop	r0
    2180:	0b be       	out	0x3b, r0	; 59
    2182:	0f 90       	pop	r0
    2184:	0f be       	out	0x3f, r0	; 63
    2186:	0f 90       	pop	r0
    2188:	1f 90       	pop	r1
    218a:	18 95       	reti

0000218c <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    218c:	1f 93       	push	r17
    218e:	df 93       	push	r29
    2190:	cf 93       	push	r28
    2192:	cd b7       	in	r28, 0x3d	; 61
    2194:	de b7       	in	r29, 0x3e	; 62
    2196:	ac 97       	sbiw	r28, 0x2c	; 44
    2198:	0f b6       	in	r0, 0x3f	; 63
    219a:	f8 94       	cli
    219c:	de bf       	out	0x3e, r29	; 62
    219e:	0f be       	out	0x3f, r0	; 63
    21a0:	cd bf       	out	0x3d, r28	; 61
    21a2:	e8 e7       	ldi	r30, 0x78	; 120
    21a4:	f6 e0       	ldi	r31, 0x06	; 6
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    21a6:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    21aa:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    21ac:	26 e0       	ldi	r18, 0x06	; 6
    21ae:	e0 38       	cpi	r30, 0x80	; 128
    21b0:	f2 07       	cpc	r31, r18
    21b2:	c9 f7       	brne	.-14     	; 0x21a6 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    21b4:	0e 94 1a 02 	call	0x434	; 0x434 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    21b8:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    21bc:	83 ff       	sbrs	r24, 3
    21be:	41 c1       	rjmp	.+642    	; 0x2442 <USB_Device_ProcessControlRequest+0x2b6>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    21c0:	80 91 78 06 	lds	r24, 0x0678

		switch (USB_ControlRequest.bRequest)
    21c4:	30 91 79 06 	lds	r19, 0x0679
    21c8:	35 30       	cpi	r19, 0x05	; 5
    21ca:	09 f4       	brne	.+2      	; 0x21ce <USB_Device_ProcessControlRequest+0x42>
    21cc:	8d c0       	rjmp	.+282    	; 0x22e8 <USB_Device_ProcessControlRequest+0x15c>
    21ce:	36 30       	cpi	r19, 0x06	; 6
    21d0:	40 f4       	brcc	.+16     	; 0x21e2 <USB_Device_ProcessControlRequest+0x56>
    21d2:	31 30       	cpi	r19, 0x01	; 1
    21d4:	e1 f1       	breq	.+120    	; 0x224e <USB_Device_ProcessControlRequest+0xc2>
    21d6:	31 30       	cpi	r19, 0x01	; 1
    21d8:	70 f0       	brcs	.+28     	; 0x21f6 <USB_Device_ProcessControlRequest+0x6a>
    21da:	33 30       	cpi	r19, 0x03	; 3
    21dc:	09 f0       	breq	.+2      	; 0x21e0 <USB_Device_ProcessControlRequest+0x54>
    21de:	31 c1       	rjmp	.+610    	; 0x2442 <USB_Device_ProcessControlRequest+0x2b6>
    21e0:	36 c0       	rjmp	.+108    	; 0x224e <USB_Device_ProcessControlRequest+0xc2>
    21e2:	38 30       	cpi	r19, 0x08	; 8
    21e4:	09 f4       	brne	.+2      	; 0x21e8 <USB_Device_ProcessControlRequest+0x5c>
    21e6:	fe c0       	rjmp	.+508    	; 0x23e4 <USB_Device_ProcessControlRequest+0x258>
    21e8:	39 30       	cpi	r19, 0x09	; 9
    21ea:	09 f4       	brne	.+2      	; 0x21ee <USB_Device_ProcessControlRequest+0x62>
    21ec:	0d c1       	rjmp	.+538    	; 0x2408 <USB_Device_ProcessControlRequest+0x27c>
    21ee:	36 30       	cpi	r19, 0x06	; 6
    21f0:	09 f0       	breq	.+2      	; 0x21f4 <USB_Device_ProcessControlRequest+0x68>
    21f2:	27 c1       	rjmp	.+590    	; 0x2442 <USB_Device_ProcessControlRequest+0x2b6>
    21f4:	9c c0       	rjmp	.+312    	; 0x232e <USB_Device_ProcessControlRequest+0x1a2>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    21f6:	80 38       	cpi	r24, 0x80	; 128
    21f8:	21 f0       	breq	.+8      	; 0x2202 <USB_Device_ProcessControlRequest+0x76>
    21fa:	82 38       	cpi	r24, 0x82	; 130
    21fc:	09 f0       	breq	.+2      	; 0x2200 <USB_Device_ProcessControlRequest+0x74>
    21fe:	21 c1       	rjmp	.+578    	; 0x2442 <USB_Device_ProcessControlRequest+0x2b6>
    2200:	08 c0       	rjmp	.+16     	; 0x2212 <USB_Device_ProcessControlRequest+0x86>
    2202:	90 91 74 06 	lds	r25, 0x0674
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    2206:	80 91 75 06 	lds	r24, 0x0675
    220a:	88 23       	and	r24, r24
    220c:	b1 f0       	breq	.+44     	; 0x223a <USB_Device_ProcessControlRequest+0xae>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    220e:	92 60       	ori	r25, 0x02	; 2
    2210:	14 c0       	rjmp	.+40     	; 0x223a <USB_Device_ProcessControlRequest+0xae>
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    2212:	80 91 7c 06 	lds	r24, 0x067C
    2216:	8f 70       	andi	r24, 0x0F	; 15

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    2218:	87 30       	cpi	r24, 0x07	; 7
    221a:	08 f0       	brcs	.+2      	; 0x221e <USB_Device_ProcessControlRequest+0x92>
    221c:	12 c1       	rjmp	.+548    	; 0x2442 <USB_Device_ProcessControlRequest+0x2b6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    221e:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    2222:	80 91 eb 00 	lds	r24, 0x00EB
				return;

			Endpoint_SelectEndpoint(EndpointIndex);

			CurrentStatus = Endpoint_IsStalled();
    2226:	90 e0       	ldi	r25, 0x00	; 0
    2228:	25 e0       	ldi	r18, 0x05	; 5
    222a:	96 95       	lsr	r25
    222c:	87 95       	ror	r24
    222e:	2a 95       	dec	r18
    2230:	e1 f7       	brne	.-8      	; 0x222a <USB_Device_ProcessControlRequest+0x9e>
    2232:	98 2f       	mov	r25, r24
    2234:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2236:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    223a:	80 91 e8 00 	lds	r24, 0x00E8
    223e:	87 7f       	andi	r24, 0xF7	; 247
    2240:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    2244:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Data >> 8);
    2248:	10 92 f1 00 	sts	0x00F1, r1
    224c:	d6 c0       	rjmp	.+428    	; 0x23fa <USB_Device_ProcessControlRequest+0x26e>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    224e:	88 23       	and	r24, r24
    2250:	19 f0       	breq	.+6      	; 0x2258 <USB_Device_ProcessControlRequest+0xcc>
    2252:	82 30       	cpi	r24, 0x02	; 2
    2254:	09 f0       	breq	.+2      	; 0x2258 <USB_Device_ProcessControlRequest+0xcc>
    2256:	f5 c0       	rjmp	.+490    	; 0x2442 <USB_Device_ProcessControlRequest+0x2b6>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	8f 71       	andi	r24, 0x1F	; 31
    225c:	90 70       	andi	r25, 0x00	; 0
    225e:	00 97       	sbiw	r24, 0x00	; 0
    2260:	21 f0       	breq	.+8      	; 0x226a <USB_Device_ProcessControlRequest+0xde>
    2262:	02 97       	sbiw	r24, 0x02	; 2
    2264:	09 f0       	breq	.+2      	; 0x2268 <USB_Device_ProcessControlRequest+0xdc>
    2266:	ed c0       	rjmp	.+474    	; 0x2442 <USB_Device_ProcessControlRequest+0x2b6>
    2268:	0c c0       	rjmp	.+24     	; 0x2282 <USB_Device_ProcessControlRequest+0xf6>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    226a:	80 91 7a 06 	lds	r24, 0x067A
    226e:	81 30       	cpi	r24, 0x01	; 1
    2270:	09 f0       	breq	.+2      	; 0x2274 <USB_Device_ProcessControlRequest+0xe8>
    2272:	e7 c0       	rjmp	.+462    	; 0x2442 <USB_Device_ProcessControlRequest+0x2b6>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    2274:	10 92 75 06 	sts	0x0675, r1
    2278:	33 30       	cpi	r19, 0x03	; 3
    227a:	81 f5       	brne	.+96     	; 0x22dc <USB_Device_ProcessControlRequest+0x150>
    227c:	80 93 75 06 	sts	0x0675, r24
    2280:	2d c0       	rjmp	.+90     	; 0x22dc <USB_Device_ProcessControlRequest+0x150>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    2282:	80 91 7a 06 	lds	r24, 0x067A
    2286:	88 23       	and	r24, r24
    2288:	49 f5       	brne	.+82     	; 0x22dc <USB_Device_ProcessControlRequest+0x150>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    228a:	20 91 7c 06 	lds	r18, 0x067C
    228e:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    2290:	82 2f       	mov	r24, r18
    2292:	81 50       	subi	r24, 0x01	; 1
    2294:	86 30       	cpi	r24, 0x06	; 6
    2296:	08 f0       	brcs	.+2      	; 0x229a <USB_Device_ProcessControlRequest+0x10e>
    2298:	d4 c0       	rjmp	.+424    	; 0x2442 <USB_Device_ProcessControlRequest+0x2b6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    229a:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    229e:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    22a2:	80 ff       	sbrs	r24, 0
    22a4:	1b c0       	rjmp	.+54     	; 0x22dc <USB_Device_ProcessControlRequest+0x150>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    22a6:	33 30       	cpi	r19, 0x03	; 3
    22a8:	21 f4       	brne	.+8      	; 0x22b2 <USB_Device_ProcessControlRequest+0x126>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    22aa:	80 91 eb 00 	lds	r24, 0x00EB
    22ae:	80 62       	ori	r24, 0x20	; 32
    22b0:	13 c0       	rjmp	.+38     	; 0x22d8 <USB_Device_ProcessControlRequest+0x14c>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    22b2:	80 91 eb 00 	lds	r24, 0x00EB
    22b6:	80 61       	ori	r24, 0x10	; 16
    22b8:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    22bc:	81 e0       	ldi	r24, 0x01	; 1
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	02 c0       	rjmp	.+4      	; 0x22c6 <USB_Device_ProcessControlRequest+0x13a>
    22c2:	88 0f       	add	r24, r24
    22c4:	99 1f       	adc	r25, r25
    22c6:	2a 95       	dec	r18
    22c8:	e2 f7       	brpl	.-8      	; 0x22c2 <USB_Device_ProcessControlRequest+0x136>
    22ca:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    22ce:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    22d2:	80 91 eb 00 	lds	r24, 0x00EB
    22d6:	88 60       	ori	r24, 0x08	; 8
    22d8:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    22dc:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    22e0:	80 91 e8 00 	lds	r24, 0x00E8
    22e4:	87 7f       	andi	r24, 0xF7	; 247
    22e6:	8c c0       	rjmp	.+280    	; 0x2400 <USB_Device_ProcessControlRequest+0x274>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    22e8:	88 23       	and	r24, r24
    22ea:	09 f0       	breq	.+2      	; 0x22ee <USB_Device_ProcessControlRequest+0x162>
    22ec:	aa c0       	rjmp	.+340    	; 0x2442 <USB_Device_ProcessControlRequest+0x2b6>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    22ee:	10 91 7a 06 	lds	r17, 0x067A
    22f2:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    22f4:	80 91 e3 00 	lds	r24, 0x00E3
    22f8:	80 78       	andi	r24, 0x80	; 128
    22fa:	81 2b       	or	r24, r17
    22fc:	80 93 e3 00 	sts	0x00E3, r24
    2300:	80 91 e8 00 	lds	r24, 0x00E8
    2304:	87 7f       	andi	r24, 0xF7	; 247
    2306:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    230a:	78 dd       	rcall	.-1296   	; 0x1dfc <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    230c:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    2310:	80 ff       	sbrs	r24, 0
    2312:	fc cf       	rjmp	.-8      	; 0x230c <USB_Device_ProcessControlRequest+0x180>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    2314:	80 91 e3 00 	lds	r24, 0x00E3
    2318:	80 68       	ori	r24, 0x80	; 128
    231a:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    231e:	11 23       	and	r17, r17
    2320:	11 f4       	brne	.+4      	; 0x2326 <USB_Device_ProcessControlRequest+0x19a>
    2322:	82 e0       	ldi	r24, 0x02	; 2
    2324:	01 c0       	rjmp	.+2      	; 0x2328 <USB_Device_ProcessControlRequest+0x19c>
    2326:	83 e0       	ldi	r24, 0x03	; 3
    2328:	80 93 77 06 	sts	0x0677, r24
    232c:	8a c0       	rjmp	.+276    	; 0x2442 <USB_Device_ProcessControlRequest+0x2b6>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    232e:	80 58       	subi	r24, 0x80	; 128
    2330:	82 30       	cpi	r24, 0x02	; 2
    2332:	08 f0       	brcs	.+2      	; 0x2336 <USB_Device_ProcessControlRequest+0x1aa>
    2334:	86 c0       	rjmp	.+268    	; 0x2442 <USB_Device_ProcessControlRequest+0x2b6>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    2336:	80 91 7a 06 	lds	r24, 0x067A
    233a:	90 91 7b 06 	lds	r25, 0x067B
    233e:	23 e0       	ldi	r18, 0x03	; 3
    2340:	8c 3d       	cpi	r24, 0xDC	; 220
    2342:	92 07       	cpc	r25, r18
    2344:	09 f0       	breq	.+2      	; 0x2348 <USB_Device_ProcessControlRequest+0x1bc>
    2346:	33 c0       	rjmp	.+102    	; 0x23ae <USB_Device_ProcessControlRequest+0x222>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    2348:	83 e0       	ldi	r24, 0x03	; 3
    234a:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    234c:	8a e2       	ldi	r24, 0x2A	; 42
    234e:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    2350:	7f b7       	in	r23, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    2352:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    2354:	de 01       	movw	r26, r28
    2356:	15 96       	adiw	r26, 0x05	; 5
    2358:	6e e0       	ldi	r22, 0x0E	; 14
    235a:	40 e0       	ldi	r20, 0x00	; 0
    235c:	50 e0       	ldi	r21, 0x00	; 0

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    235e:	11 e2       	ldi	r17, 0x21	; 33
    2360:	e6 2f       	mov	r30, r22
    2362:	f0 e0       	ldi	r31, 0x00	; 0
    2364:	10 93 57 00 	sts	0x0057, r17
    2368:	84 91       	lpm	r24, Z+

					if (SerialCharNum & 0x01)
    236a:	40 ff       	sbrs	r20, 0
    236c:	03 c0       	rjmp	.+6      	; 0x2374 <USB_Device_ProcessControlRequest+0x1e8>
					{
						SerialByte >>= 4;
    236e:	82 95       	swap	r24
    2370:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
    2372:	6f 5f       	subi	r22, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    2374:	8f 70       	andi	r24, 0x0F	; 15
    2376:	28 2f       	mov	r18, r24
    2378:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    237a:	8a 30       	cpi	r24, 0x0A	; 10
    237c:	18 f0       	brcs	.+6      	; 0x2384 <USB_Device_ProcessControlRequest+0x1f8>
    237e:	c9 01       	movw	r24, r18
    2380:	c7 96       	adiw	r24, 0x37	; 55
    2382:	02 c0       	rjmp	.+4      	; 0x2388 <USB_Device_ProcessControlRequest+0x1fc>
    2384:	c9 01       	movw	r24, r18
    2386:	c0 96       	adiw	r24, 0x30	; 48
    2388:	8d 93       	st	X+, r24
    238a:	9d 93       	st	X+, r25
    238c:	4f 5f       	subi	r20, 0xFF	; 255
    238e:	5f 4f       	sbci	r21, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    2390:	44 31       	cpi	r20, 0x14	; 20
    2392:	51 05       	cpc	r21, r1
    2394:	29 f7       	brne	.-54     	; 0x2360 <USB_Device_ProcessControlRequest+0x1d4>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    2396:	7f bf       	out	0x3f, r23	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2398:	80 91 e8 00 	lds	r24, 0x00E8
    239c:	87 7f       	andi	r24, 0xF7	; 247
    239e:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    23a2:	ce 01       	movw	r24, r28
    23a4:	03 96       	adiw	r24, 0x03	; 3
    23a6:	6a e2       	ldi	r22, 0x2A	; 42
    23a8:	70 e0       	ldi	r23, 0x00	; 0
    23aa:	75 da       	rcall	.-2838   	; 0x1896 <Endpoint_Write_Control_Stream_LE>
    23ac:	15 c0       	rjmp	.+42     	; 0x23d8 <USB_Device_ProcessControlRequest+0x24c>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    23ae:	60 91 7c 06 	lds	r22, 0x067C
    23b2:	70 91 7d 06 	lds	r23, 0x067D
    23b6:	ae 01       	movw	r20, r28
    23b8:	4f 5f       	subi	r20, 0xFF	; 255
    23ba:	5f 4f       	sbci	r21, 0xFF	; 255
    23bc:	0e 94 1e 03 	call	0x63c	; 0x63c <CALLBACK_USB_GetDescriptor>
    23c0:	bc 01       	movw	r22, r24
    23c2:	00 97       	sbiw	r24, 0x00	; 0
    23c4:	09 f4       	brne	.+2      	; 0x23c8 <USB_Device_ProcessControlRequest+0x23c>
    23c6:	3d c0       	rjmp	.+122    	; 0x2442 <USB_Device_ProcessControlRequest+0x2b6>
    23c8:	80 91 e8 00 	lds	r24, 0x00E8
    23cc:	87 7f       	andi	r24, 0xF7	; 247
    23ce:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    23d2:	89 81       	ldd	r24, Y+1	; 0x01
    23d4:	9a 81       	ldd	r25, Y+2	; 0x02
    23d6:	04 db       	rcall	.-2552   	; 0x19e0 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    23d8:	80 91 e8 00 	lds	r24, 0x00E8
    23dc:	8b 77       	andi	r24, 0x7B	; 123
    23de:	80 93 e8 00 	sts	0x00E8, r24
    23e2:	2f c0       	rjmp	.+94     	; 0x2442 <USB_Device_ProcessControlRequest+0x2b6>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    23e4:	80 38       	cpi	r24, 0x80	; 128
    23e6:	69 f5       	brne	.+90     	; 0x2442 <USB_Device_ProcessControlRequest+0x2b6>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    23e8:	80 91 e8 00 	lds	r24, 0x00E8
    23ec:	87 7f       	andi	r24, 0xF7	; 247
    23ee:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    23f2:	80 91 73 06 	lds	r24, 0x0673
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    23f6:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    23fa:	80 91 e8 00 	lds	r24, 0x00E8
    23fe:	8e 77       	andi	r24, 0x7E	; 126
    2400:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    2404:	fb dc       	rcall	.-1546   	; 0x1dfc <Endpoint_ClearStatusStage>
    2406:	1d c0       	rjmp	.+58     	; 0x2442 <USB_Device_ProcessControlRequest+0x2b6>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    2408:	88 23       	and	r24, r24
    240a:	d9 f4       	brne	.+54     	; 0x2442 <USB_Device_ProcessControlRequest+0x2b6>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    240c:	90 91 7a 06 	lds	r25, 0x067A
    2410:	92 30       	cpi	r25, 0x02	; 2
    2412:	b8 f4       	brcc	.+46     	; 0x2442 <USB_Device_ProcessControlRequest+0x2b6>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2414:	80 91 e8 00 	lds	r24, 0x00E8
    2418:	87 7f       	andi	r24, 0xF7	; 247
    241a:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    241e:	90 93 73 06 	sts	0x0673, r25

	Endpoint_ClearStatusStage();
    2422:	ec dc       	rcall	.-1576   	; 0x1dfc <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    2424:	80 91 73 06 	lds	r24, 0x0673
    2428:	88 23       	and	r24, r24
    242a:	31 f4       	brne	.+12     	; 0x2438 <USB_Device_ProcessControlRequest+0x2ac>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    242c:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    2430:	87 fd       	sbrc	r24, 7
    2432:	02 c0       	rjmp	.+4      	; 0x2438 <USB_Device_ProcessControlRequest+0x2ac>
    2434:	81 e0       	ldi	r24, 0x01	; 1
    2436:	01 c0       	rjmp	.+2      	; 0x243a <USB_Device_ProcessControlRequest+0x2ae>
    2438:	84 e0       	ldi	r24, 0x04	; 4
    243a:	80 93 77 06 	sts	0x0677, r24

	EVENT_USB_Device_ConfigurationChanged();
    243e:	0e 94 42 02 	call	0x484	; 0x484 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2442:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    2446:	83 ff       	sbrs	r24, 3
    2448:	0a c0       	rjmp	.+20     	; 0x245e <USB_Device_ProcessControlRequest+0x2d2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    244a:	80 91 e8 00 	lds	r24, 0x00E8
    244e:	87 7f       	andi	r24, 0xF7	; 247
    2450:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    2454:	80 91 eb 00 	lds	r24, 0x00EB
    2458:	80 62       	ori	r24, 0x20	; 32
    245a:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    245e:	ac 96       	adiw	r28, 0x2c	; 44
    2460:	0f b6       	in	r0, 0x3f	; 63
    2462:	f8 94       	cli
    2464:	de bf       	out	0x3e, r29	; 62
    2466:	0f be       	out	0x3f, r0	; 63
    2468:	cd bf       	out	0x3d, r28	; 61
    246a:	cf 91       	pop	r28
    246c:	df 91       	pop	r29
    246e:	1f 91       	pop	r17
    2470:	08 95       	ret

00002472 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    2472:	08 95       	ret

00002474 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    2474:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    2476:	80 91 77 06 	lds	r24, 0x0677
    247a:	88 23       	and	r24, r24
    247c:	71 f0       	breq	.+28     	; 0x249a <USB_USBTask+0x26>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    247e:	10 91 e9 00 	lds	r17, 0x00E9
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    2482:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2486:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    248a:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    248e:	83 ff       	sbrs	r24, 3
    2490:	01 c0       	rjmp	.+2      	; 0x2494 <USB_USBTask+0x20>
	  USB_Device_ProcessControlRequest();
    2492:	7c de       	rcall	.-776    	; 0x218c <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2494:	1f 70       	andi	r17, 0x0F	; 15
    2496:	10 93 e9 00 	sts	0x00E9, r17
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    249a:	1f 91       	pop	r17
    249c:	08 95       	ret

0000249e <HID_Device_USBTask>:

	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    249e:	4f 92       	push	r4
    24a0:	5f 92       	push	r5
    24a2:	6f 92       	push	r6
    24a4:	7f 92       	push	r7
    24a6:	8f 92       	push	r8
    24a8:	9f 92       	push	r9
    24aa:	af 92       	push	r10
    24ac:	bf 92       	push	r11
    24ae:	cf 92       	push	r12
    24b0:	df 92       	push	r13
    24b2:	ef 92       	push	r14
    24b4:	ff 92       	push	r15
    24b6:	0f 93       	push	r16
    24b8:	1f 93       	push	r17
    24ba:	df 93       	push	r29
    24bc:	cf 93       	push	r28
    24be:	00 d0       	rcall	.+0      	; 0x24c0 <HID_Device_USBTask+0x22>
    24c0:	0f 92       	push	r0
    24c2:	cd b7       	in	r28, 0x3d	; 61
    24c4:	de b7       	in	r29, 0x3e	; 62
    24c6:	7c 01       	movw	r14, r24
			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
	}
}
    24c8:	6d b6       	in	r6, 0x3d	; 61
    24ca:	7e b6       	in	r7, 0x3e	; 62
	return true;
}

void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
    24cc:	80 91 77 06 	lds	r24, 0x0677
    24d0:	84 30       	cpi	r24, 0x04	; 4
    24d2:	09 f0       	breq	.+2      	; 0x24d6 <HID_Device_USBTask+0x38>
    24d4:	9a c0       	rjmp	.+308    	; 0x260a <HID_Device_USBTask+0x16c>
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    24d6:	20 91 e4 00 	lds	r18, 0x00E4
    24da:	30 91 e5 00 	lds	r19, 0x00E5
	  return;

	if (HIDInterfaceInfo->State.PrevFrameNum == USB_Device_GetFrameNumber())
    24de:	f7 01       	movw	r30, r14
    24e0:	82 85       	ldd	r24, Z+10	; 0x0a
    24e2:	93 85       	ldd	r25, Z+11	; 0x0b
    24e4:	82 17       	cp	r24, r18
    24e6:	93 07       	cpc	r25, r19
    24e8:	09 f4       	brne	.+2      	; 0x24ec <HID_Device_USBTask+0x4e>
    24ea:	8f c0       	rjmp	.+286    	; 0x260a <HID_Device_USBTask+0x16c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    24ec:	81 81       	ldd	r24, Z+1	; 0x01
    24ee:	8f 70       	andi	r24, 0x0F	; 15
    24f0:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    24f4:	80 91 e8 00 	lds	r24, 0x00E8
		#endif
	}

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

	if (Endpoint_IsReadWriteAllowed())
    24f8:	85 ff       	sbrs	r24, 5
    24fa:	87 c0       	rjmp	.+270    	; 0x260a <HID_Device_USBTask+0x16c>
    24fc:	5d b6       	in	r5, 0x3d	; 61
    24fe:	4e b6       	in	r4, 0x3e	; 62
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    2500:	40 85       	ldd	r20, Z+8	; 0x08
    2502:	50 e0       	ldi	r21, 0x00	; 0
    2504:	8d b7       	in	r24, 0x3d	; 61
    2506:	9e b7       	in	r25, 0x3e	; 62
    2508:	84 1b       	sub	r24, r20
    250a:	95 0b       	sbc	r25, r21
    250c:	0f b6       	in	r0, 0x3f	; 63
    250e:	f8 94       	cli
    2510:	9e bf       	out	0x3e, r25	; 62
    2512:	0f be       	out	0x3f, r0	; 63
    2514:	8d bf       	out	0x3d, r24	; 61
    2516:	0d b7       	in	r16, 0x3d	; 61
    2518:	1e b7       	in	r17, 0x3e	; 62
    251a:	0f 5f       	subi	r16, 0xFF	; 255
    251c:	1f 4f       	sbci	r17, 0xFF	; 255
		uint8_t  ReportID     = 0;
    251e:	19 82       	std	Y+1, r1	; 0x01
		uint16_t ReportINSize = 0;
    2520:	1b 82       	std	Y+3, r1	; 0x03
    2522:	1a 82       	std	Y+2, r1	; 0x02

		memset(ReportINData, 0, sizeof(ReportINData));
    2524:	c0 2e       	mov	r12, r16
    2526:	91 2e       	mov	r9, r17
    2528:	c8 01       	movw	r24, r16
    252a:	60 e0       	ldi	r22, 0x00	; 0
    252c:	70 e0       	ldi	r23, 0x00	; 0
    252e:	50 e0       	ldi	r21, 0x00	; 0
    2530:	9f d3       	rcall	.+1854   	; 0x2c70 <memset>

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, HID_REPORT_ITEM_In,
		                                                             ReportINData, &ReportINSize);
    2532:	c7 01       	movw	r24, r14
    2534:	be 01       	movw	r22, r28
    2536:	6f 5f       	subi	r22, 0xFF	; 255
    2538:	7f 4f       	sbci	r23, 0xFF	; 255
    253a:	40 e0       	ldi	r20, 0x00	; 0
    253c:	98 01       	movw	r18, r16
    253e:	8e 01       	movw	r16, r28
    2540:	0e 5f       	subi	r16, 0xFE	; 254
    2542:	1f 4f       	sbci	r17, 0xFF	; 255
    2544:	0e 94 ce 01 	call	0x39c	; 0x39c <CALLBACK_HID_Device_CreateHIDReport>
    2548:	88 2e       	mov	r8, r24
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
    254a:	f7 01       	movw	r30, r14
    254c:	84 85       	ldd	r24, Z+12	; 0x0c
    254e:	95 85       	ldd	r25, Z+13	; 0x0d
    2550:	89 2b       	or	r24, r25
    2552:	19 f4       	brne	.+6      	; 0x255a <HID_Device_USBTask+0xbc>
    2554:	aa 24       	eor	r10, r10
    2556:	bb 24       	eor	r11, r11
    2558:	0b c0       	rjmp	.+22     	; 0x2570 <HID_Device_USBTask+0xd2>
    255a:	20 e0       	ldi	r18, 0x00	; 0
    255c:	f7 01       	movw	r30, r14
    255e:	86 85       	ldd	r24, Z+14	; 0x0e
    2560:	97 85       	ldd	r25, Z+15	; 0x0f
    2562:	89 2b       	or	r24, r25
    2564:	09 f0       	breq	.+2      	; 0x2568 <HID_Device_USBTask+0xca>
    2566:	21 e0       	ldi	r18, 0x01	; 1
    2568:	81 e0       	ldi	r24, 0x01	; 1
    256a:	28 27       	eor	r18, r24
    256c:	a2 2e       	mov	r10, r18
    256e:	bb 24       	eor	r11, r11

		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    2570:	f7 01       	movw	r30, r14
    2572:	06 81       	ldd	r16, Z+6	; 0x06
    2574:	17 81       	ldd	r17, Z+7	; 0x07
    2576:	01 15       	cp	r16, r1
    2578:	11 05       	cpc	r17, r1
    257a:	11 f4       	brne	.+4      	; 0x2580 <HID_Device_USBTask+0xe2>
    257c:	dd 24       	eor	r13, r13
    257e:	12 c0       	rjmp	.+36     	; 0x25a4 <HID_Device_USBTask+0x106>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
    2580:	4a 81       	ldd	r20, Y+2	; 0x02
    2582:	5b 81       	ldd	r21, Y+3	; 0x03
    2584:	8c 2d       	mov	r24, r12
    2586:	99 2d       	mov	r25, r9
    2588:	b8 01       	movw	r22, r16
    258a:	5c d3       	rcall	.+1720   	; 0x2c44 <memcmp>
    258c:	dd 24       	eor	r13, r13
    258e:	00 97       	sbiw	r24, 0x00	; 0
    2590:	11 f0       	breq	.+4      	; 0x2596 <HID_Device_USBTask+0xf8>
    2592:	dd 24       	eor	r13, r13
    2594:	d3 94       	inc	r13
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
    2596:	f7 01       	movw	r30, r14
    2598:	40 85       	ldd	r20, Z+8	; 0x08
    259a:	c8 01       	movw	r24, r16
    259c:	6c 2d       	mov	r22, r12
    259e:	79 2d       	mov	r23, r9
    25a0:	50 e0       	ldi	r21, 0x00	; 0
    25a2:	5d d3       	rcall	.+1722   	; 0x2c5e <memcpy>
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
    25a4:	8a 81       	ldd	r24, Y+2	; 0x02
    25a6:	9b 81       	ldd	r25, Y+3	; 0x03
    25a8:	89 2b       	or	r24, r25
    25aa:	01 f1       	breq	.+64     	; 0x25ec <HID_Device_USBTask+0x14e>
    25ac:	88 20       	and	r8, r8
    25ae:	21 f4       	brne	.+8      	; 0x25b8 <HID_Device_USBTask+0x11a>
    25b0:	dd 20       	and	r13, r13
    25b2:	11 f4       	brne	.+4      	; 0x25b8 <HID_Device_USBTask+0x11a>
    25b4:	ab 28       	or	r10, r11
    25b6:	d1 f0       	breq	.+52     	; 0x25ec <HID_Device_USBTask+0x14e>
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
    25b8:	f7 01       	movw	r30, r14
    25ba:	84 85       	ldd	r24, Z+12	; 0x0c
    25bc:	95 85       	ldd	r25, Z+13	; 0x0d
    25be:	97 87       	std	Z+15, r25	; 0x0f
    25c0:	86 87       	std	Z+14, r24	; 0x0e
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    25c2:	81 81       	ldd	r24, Z+1	; 0x01
    25c4:	8f 70       	andi	r24, 0x0F	; 15
    25c6:	80 93 e9 00 	sts	0x00E9, r24

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpoint.Address);

			if (ReportID)
    25ca:	89 81       	ldd	r24, Y+1	; 0x01
    25cc:	88 23       	and	r24, r24
    25ce:	11 f0       	breq	.+4      	; 0x25d4 <HID_Device_USBTask+0x136>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    25d0:	80 93 f1 00 	sts	0x00F1, r24
			  Endpoint_Write_8(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NULL);
    25d4:	6a 81       	ldd	r22, Y+2	; 0x02
    25d6:	7b 81       	ldd	r23, Y+3	; 0x03
    25d8:	8c 2d       	mov	r24, r12
    25da:	99 2d       	mov	r25, r9
    25dc:	40 e0       	ldi	r20, 0x00	; 0
    25de:	50 e0       	ldi	r21, 0x00	; 0
    25e0:	06 db       	rcall	.-2548   	; 0x1bee <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    25e2:	80 91 e8 00 	lds	r24, 0x00E8
    25e6:	8e 77       	andi	r24, 0x7E	; 126
    25e8:	80 93 e8 00 	sts	0x00E8, r24
    25ec:	80 91 e4 00 	lds	r24, 0x00E4
    25f0:	90 91 e5 00 	lds	r25, 0x00E5

			Endpoint_ClearIN();
		}

		HIDInterfaceInfo->State.PrevFrameNum = USB_Device_GetFrameNumber();
    25f4:	f7 01       	movw	r30, r14
    25f6:	93 87       	std	Z+11, r25	; 0x0b
    25f8:	82 87       	std	Z+10, r24	; 0x0a
    25fa:	25 2d       	mov	r18, r5
    25fc:	34 2d       	mov	r19, r4
    25fe:	c9 01       	movw	r24, r18
    2600:	0f b6       	in	r0, 0x3f	; 63
    2602:	f8 94       	cli
    2604:	9e bf       	out	0x3e, r25	; 62
    2606:	0f be       	out	0x3f, r0	; 63
    2608:	8d bf       	out	0x3d, r24	; 61
	}
}
    260a:	0f b6       	in	r0, 0x3f	; 63
    260c:	f8 94       	cli
    260e:	7e be       	out	0x3e, r7	; 62
    2610:	0f be       	out	0x3f, r0	; 63
    2612:	6d be       	out	0x3d, r6	; 61
    2614:	0f 90       	pop	r0
    2616:	0f 90       	pop	r0
    2618:	0f 90       	pop	r0
    261a:	cf 91       	pop	r28
    261c:	df 91       	pop	r29
    261e:	1f 91       	pop	r17
    2620:	0f 91       	pop	r16
    2622:	ff 90       	pop	r15
    2624:	ef 90       	pop	r14
    2626:	df 90       	pop	r13
    2628:	cf 90       	pop	r12
    262a:	bf 90       	pop	r11
    262c:	af 90       	pop	r10
    262e:	9f 90       	pop	r9
    2630:	8f 90       	pop	r8
    2632:	7f 90       	pop	r7
    2634:	6f 90       	pop	r6
    2636:	5f 90       	pop	r5
    2638:	4f 90       	pop	r4
    263a:	08 95       	ret

0000263c <HID_Device_ConfigureEndpoints>:
			break;
	}
}

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    263c:	cf 93       	push	r28
    263e:	df 93       	push	r29
    2640:	dc 01       	movw	r26, r24
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
    2642:	09 96       	adiw	r24, 0x09	; 9
    2644:	fc 01       	movw	r30, r24
    2646:	87 e0       	ldi	r24, 0x07	; 7
    2648:	ef 01       	movw	r28, r30
    264a:	19 92       	st	Y+, r1
    264c:	8a 95       	dec	r24
    264e:	e9 f7       	brne	.-6      	; 0x264a <HID_Device_ConfigureEndpoints+0xe>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
    2650:	81 e0       	ldi	r24, 0x01	; 1
    2652:	19 96       	adiw	r26, 0x09	; 9
    2654:	8c 93       	st	X, r24
    2656:	19 97       	sbiw	r26, 0x09	; 9
	HIDInterfaceInfo->State.IdleCount           = 500;
    2658:	84 ef       	ldi	r24, 0xF4	; 244
    265a:	91 e0       	ldi	r25, 0x01	; 1
    265c:	1d 96       	adiw	r26, 0x0d	; 13
    265e:	9c 93       	st	X, r25
    2660:	8e 93       	st	-X, r24
    2662:	1c 97       	sbiw	r26, 0x0c	; 12

	HIDInterfaceInfo->Config.ReportINEndpoint.Type = EP_TYPE_INTERRUPT;
    2664:	83 e0       	ldi	r24, 0x03	; 3
    2666:	14 96       	adiw	r26, 0x04	; 4
    2668:	8c 93       	st	X, r24
    266a:	14 97       	sbiw	r26, 0x04	; 4

	if (!(Endpoint_ConfigureEndpointTable(&HIDInterfaceInfo->Config.ReportINEndpoint, 1)))
    266c:	cd 01       	movw	r24, r26
    266e:	01 96       	adiw	r24, 0x01	; 1
    2670:	61 e0       	ldi	r22, 0x01	; 1
    2672:	88 db       	rcall	.-2288   	; 0x1d84 <Endpoint_ConfigureEndpointTable>
    2674:	81 11       	cpse	r24, r1
    2676:	81 e0       	ldi	r24, 0x01	; 1
	  return false;

	return true;
}
    2678:	df 91       	pop	r29
    267a:	cf 91       	pop	r28
    267c:	08 95       	ret

0000267e <HID_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_HID_DRIVER
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
    267e:	6f 92       	push	r6
    2680:	7f 92       	push	r7
    2682:	8f 92       	push	r8
    2684:	9f 92       	push	r9
    2686:	af 92       	push	r10
    2688:	bf 92       	push	r11
    268a:	cf 92       	push	r12
    268c:	df 92       	push	r13
    268e:	ef 92       	push	r14
    2690:	ff 92       	push	r15
    2692:	0f 93       	push	r16
    2694:	1f 93       	push	r17
    2696:	df 93       	push	r29
    2698:	cf 93       	push	r28
    269a:	00 d0       	rcall	.+0      	; 0x269c <HID_Device_ProcessControlRequest+0x1e>
    269c:	0f 92       	push	r0
    269e:	cd b7       	in	r28, 0x3d	; 61
    26a0:	de b7       	in	r29, 0x3e	; 62
    26a2:	6c 01       	movw	r12, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
    26a4:	6d b6       	in	r6, 0x3d	; 61
    26a6:	7e b6       	in	r7, 0x3e	; 62
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    26a8:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DEVICE_C
#include "HIDClassDevice.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
    26ac:	83 ff       	sbrs	r24, 3
    26ae:	1a c1       	rjmp	.+564    	; 0x28e4 <HID_Device_ProcessControlRequest+0x266>
	  return;

	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
    26b0:	f6 01       	movw	r30, r12
    26b2:	80 81       	ld	r24, Z
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	20 91 7c 06 	lds	r18, 0x067C
    26ba:	30 91 7d 06 	lds	r19, 0x067D
    26be:	28 17       	cp	r18, r24
    26c0:	39 07       	cpc	r19, r25
    26c2:	09 f0       	breq	.+2      	; 0x26c6 <HID_Device_ProcessControlRequest+0x48>
    26c4:	0f c1       	rjmp	.+542    	; 0x28e4 <HID_Device_ProcessControlRequest+0x266>
	  return;

	switch (USB_ControlRequest.bRequest)
    26c6:	80 91 79 06 	lds	r24, 0x0679
    26ca:	83 30       	cpi	r24, 0x03	; 3
    26cc:	09 f4       	brne	.+2      	; 0x26d0 <HID_Device_ProcessControlRequest+0x52>
    26ce:	b2 c0       	rjmp	.+356    	; 0x2834 <HID_Device_ProcessControlRequest+0x1b6>
    26d0:	84 30       	cpi	r24, 0x04	; 4
    26d2:	30 f4       	brcc	.+12     	; 0x26e0 <HID_Device_ProcessControlRequest+0x62>
    26d4:	81 30       	cpi	r24, 0x01	; 1
    26d6:	71 f0       	breq	.+28     	; 0x26f4 <HID_Device_ProcessControlRequest+0x76>
    26d8:	82 30       	cpi	r24, 0x02	; 2
    26da:	09 f0       	breq	.+2      	; 0x26de <HID_Device_ProcessControlRequest+0x60>
    26dc:	03 c1       	rjmp	.+518    	; 0x28e4 <HID_Device_ProcessControlRequest+0x266>
    26de:	e6 c0       	rjmp	.+460    	; 0x28ac <HID_Device_ProcessControlRequest+0x22e>
    26e0:	8a 30       	cpi	r24, 0x0A	; 10
    26e2:	09 f4       	brne	.+2      	; 0x26e6 <HID_Device_ProcessControlRequest+0x68>
    26e4:	cb c0       	rjmp	.+406    	; 0x287c <HID_Device_ProcessControlRequest+0x1fe>
    26e6:	8b 30       	cpi	r24, 0x0B	; 11
    26e8:	09 f4       	brne	.+2      	; 0x26ec <HID_Device_ProcessControlRequest+0x6e>
    26ea:	b5 c0       	rjmp	.+362    	; 0x2856 <HID_Device_ProcessControlRequest+0x1d8>
    26ec:	89 30       	cpi	r24, 0x09	; 9
    26ee:	09 f0       	breq	.+2      	; 0x26f2 <HID_Device_ProcessControlRequest+0x74>
    26f0:	f9 c0       	rjmp	.+498    	; 0x28e4 <HID_Device_ProcessControlRequest+0x266>
    26f2:	5c c0       	rjmp	.+184    	; 0x27ac <HID_Device_ProcessControlRequest+0x12e>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    26f4:	80 91 78 06 	lds	r24, 0x0678
    26f8:	81 3a       	cpi	r24, 0xA1	; 161
    26fa:	09 f0       	breq	.+2      	; 0x26fe <HID_Device_ProcessControlRequest+0x80>
    26fc:	f3 c0       	rjmp	.+486    	; 0x28e4 <HID_Device_ProcessControlRequest+0x266>
    26fe:	9d b6       	in	r9, 0x3d	; 61
    2700:	8e b6       	in	r8, 0x3e	; 62
			{
				uint16_t ReportSize = 0;
    2702:	1b 82       	std	Y+3, r1	; 0x03
    2704:	1a 82       	std	Y+2, r1	; 0x02
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    2706:	80 91 7a 06 	lds	r24, 0x067A
    270a:	10 91 7b 06 	lds	r17, 0x067B
    270e:	89 83       	std	Y+1, r24	; 0x01
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
    2710:	f6 01       	movw	r30, r12
    2712:	40 85       	ldd	r20, Z+8	; 0x08
    2714:	50 e0       	ldi	r21, 0x00	; 0
    2716:	8d b7       	in	r24, 0x3d	; 61
    2718:	9e b7       	in	r25, 0x3e	; 62
    271a:	84 1b       	sub	r24, r20
    271c:	95 0b       	sbc	r25, r21
    271e:	0f b6       	in	r0, 0x3f	; 63
    2720:	f8 94       	cli
    2722:	9e bf       	out	0x3e, r25	; 62
    2724:	0f be       	out	0x3f, r0	; 63
    2726:	8d bf       	out	0x3d, r24	; 61
    2728:	ed b6       	in	r14, 0x3d	; 61
    272a:	fe b6       	in	r15, 0x3e	; 62
    272c:	08 94       	sec
    272e:	e1 1c       	adc	r14, r1
    2730:	f1 1c       	adc	r15, r1

				memset(ReportData, 0, sizeof(ReportData));
    2732:	be 2c       	mov	r11, r14
    2734:	af 2c       	mov	r10, r15
    2736:	c7 01       	movw	r24, r14
    2738:	60 e0       	ldi	r22, 0x00	; 0
    273a:	70 e0       	ldi	r23, 0x00	; 0
    273c:	50 e0       	ldi	r21, 0x00	; 0
    273e:	98 d2       	rcall	.+1328   	; 0x2c70 <memset>

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
    2740:	11 50       	subi	r17, 0x01	; 1
    2742:	c6 01       	movw	r24, r12
    2744:	be 01       	movw	r22, r28
    2746:	6f 5f       	subi	r22, 0xFF	; 255
    2748:	7f 4f       	sbci	r23, 0xFF	; 255
    274a:	41 2f       	mov	r20, r17
    274c:	97 01       	movw	r18, r14
    274e:	8e 01       	movw	r16, r28
    2750:	0e 5f       	subi	r16, 0xFE	; 254
    2752:	1f 4f       	sbci	r17, 0xFF	; 255
    2754:	0e 94 ce 01 	call	0x39c	; 0x39c <CALLBACK_HID_Device_CreateHIDReport>

				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
    2758:	f6 01       	movw	r30, r12
    275a:	26 81       	ldd	r18, Z+6	; 0x06
    275c:	37 81       	ldd	r19, Z+7	; 0x07
    275e:	21 15       	cp	r18, r1
    2760:	31 05       	cpc	r19, r1
    2762:	29 f0       	breq	.+10     	; 0x276e <HID_Device_ProcessControlRequest+0xf0>
				{
					memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData,
    2764:	40 85       	ldd	r20, Z+8	; 0x08
    2766:	c9 01       	movw	r24, r18
    2768:	b7 01       	movw	r22, r14
    276a:	50 e0       	ldi	r21, 0x00	; 0
    276c:	78 d2       	rcall	.+1264   	; 0x2c5e <memcpy>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    276e:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2772:	80 91 e8 00 	lds	r24, 0x00E8
    2776:	87 7f       	andi	r24, 0xF7	; 247
    2778:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

				Endpoint_ClearSETUP();

				if (ReportID)
    277c:	89 81       	ldd	r24, Y+1	; 0x01
    277e:	88 23       	and	r24, r24
    2780:	11 f0       	breq	.+4      	; 0x2786 <HID_Device_ProcessControlRequest+0x108>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2782:	80 93 f1 00 	sts	0x00F1, r24
				  Endpoint_Write_8(ReportID);

				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    2786:	6a 81       	ldd	r22, Y+2	; 0x02
    2788:	7b 81       	ldd	r23, Y+3	; 0x03
    278a:	8b 2d       	mov	r24, r11
    278c:	9a 2d       	mov	r25, r10
    278e:	83 d8       	rcall	.-3834   	; 0x1896 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2790:	80 91 e8 00 	lds	r24, 0x00E8
    2794:	8b 77       	andi	r24, 0x7B	; 123
    2796:	80 93 e8 00 	sts	0x00E8, r24
    279a:	29 2d       	mov	r18, r9
    279c:	38 2d       	mov	r19, r8
    279e:	c9 01       	movw	r24, r18
    27a0:	0f b6       	in	r0, 0x3f	; 63
    27a2:	f8 94       	cli
    27a4:	9e bf       	out	0x3e, r25	; 62
    27a6:	0f be       	out	0x3f, r0	; 63
    27a8:	8d bf       	out	0x3d, r24	; 61
    27aa:	9c c0       	rjmp	.+312    	; 0x28e4 <HID_Device_ProcessControlRequest+0x266>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    27ac:	80 91 78 06 	lds	r24, 0x0678
    27b0:	81 32       	cpi	r24, 0x21	; 33
    27b2:	09 f0       	breq	.+2      	; 0x27b6 <HID_Device_ProcessControlRequest+0x138>
    27b4:	97 c0       	rjmp	.+302    	; 0x28e4 <HID_Device_ProcessControlRequest+0x266>
    27b6:	9d b6       	in	r9, 0x3d	; 61
    27b8:	8e b6       	in	r8, 0x3e	; 62
			{
				uint16_t ReportSize = USB_ControlRequest.wLength;
    27ba:	00 91 7e 06 	lds	r16, 0x067E
    27be:	10 91 7f 06 	lds	r17, 0x067F
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
    27c2:	a0 90 7a 06 	lds	r10, 0x067A
    27c6:	b0 90 7b 06 	lds	r11, 0x067B
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
    27ca:	8d b7       	in	r24, 0x3d	; 61
    27cc:	9e b7       	in	r25, 0x3e	; 62
    27ce:	80 1b       	sub	r24, r16
    27d0:	91 0b       	sbc	r25, r17
    27d2:	0f b6       	in	r0, 0x3f	; 63
    27d4:	f8 94       	cli
    27d6:	9e bf       	out	0x3e, r25	; 62
    27d8:	0f be       	out	0x3f, r0	; 63
    27da:	8d bf       	out	0x3d, r24	; 61
    27dc:	ed b6       	in	r14, 0x3d	; 61
    27de:	fe b6       	in	r15, 0x3e	; 62
    27e0:	08 94       	sec
    27e2:	e1 1c       	adc	r14, r1
    27e4:	f1 1c       	adc	r15, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    27e6:	80 91 e8 00 	lds	r24, 0x00E8
    27ea:	87 7f       	andi	r24, 0xF7	; 247
    27ec:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
    27f0:	c7 01       	movw	r24, r14
    27f2:	b8 01       	movw	r22, r16
    27f4:	b4 d8       	rcall	.-3736   	; 0x195e <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    27f6:	80 91 e8 00 	lds	r24, 0x00E8
    27fa:	8e 77       	andi	r24, 0x7E	; 126
    27fc:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();

				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType,
    2800:	80 e0       	ldi	r24, 0x00	; 0
    2802:	90 e0       	ldi	r25, 0x00	; 0
    2804:	aa 20       	and	r10, r10
    2806:	11 f0       	breq	.+4      	; 0x280c <HID_Device_ProcessControlRequest+0x18e>
    2808:	81 e0       	ldi	r24, 0x01	; 1
    280a:	90 e0       	ldi	r25, 0x00	; 0
    280c:	ba 94       	dec	r11
    280e:	e8 0e       	add	r14, r24
    2810:	f9 1e       	adc	r15, r25
    2812:	08 1b       	sub	r16, r24
    2814:	19 0b       	sbc	r17, r25
    2816:	c6 01       	movw	r24, r12
    2818:	6a 2d       	mov	r22, r10
    281a:	4b 2d       	mov	r20, r11
    281c:	97 01       	movw	r18, r14
    281e:	0e 94 01 02 	call	0x402	; 0x402 <CALLBACK_HID_Device_ProcessHIDReport>
    2822:	89 2d       	mov	r24, r9
    2824:	98 2d       	mov	r25, r8
    2826:	9c 01       	movw	r18, r24
    2828:	0f b6       	in	r0, 0x3f	; 63
    282a:	f8 94       	cli
    282c:	3e bf       	out	0x3e, r19	; 62
    282e:	0f be       	out	0x3f, r0	; 63
    2830:	2d bf       	out	0x3d, r18	; 61
    2832:	58 c0       	rjmp	.+176    	; 0x28e4 <HID_Device_ProcessControlRequest+0x266>
				                                     &ReportData[ReportID ? 1 : 0], ReportSize - (ReportID ? 1 : 0));
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    2834:	80 91 78 06 	lds	r24, 0x0678
    2838:	81 3a       	cpi	r24, 0xA1	; 161
    283a:	09 f0       	breq	.+2      	; 0x283e <HID_Device_ProcessControlRequest+0x1c0>
    283c:	53 c0       	rjmp	.+166    	; 0x28e4 <HID_Device_ProcessControlRequest+0x266>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    283e:	80 91 e8 00 	lds	r24, 0x00E8
    2842:	87 7f       	andi	r24, 0xF7	; 247
    2844:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2848:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    284c:	80 ff       	sbrs	r24, 0
    284e:	fc cf       	rjmp	.-8      	; 0x2848 <HID_Device_ProcessControlRequest+0x1ca>
				Endpoint_Write_8(HIDInterfaceInfo->State.UsingReportProtocol);
    2850:	f6 01       	movw	r30, r12
    2852:	81 85       	ldd	r24, Z+9	; 0x09
    2854:	3f c0       	rjmp	.+126    	; 0x28d4 <HID_Device_ProcessControlRequest+0x256>
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    2856:	80 91 78 06 	lds	r24, 0x0678
    285a:	81 32       	cpi	r24, 0x21	; 33
    285c:	09 f0       	breq	.+2      	; 0x2860 <HID_Device_ProcessControlRequest+0x1e2>
    285e:	42 c0       	rjmp	.+132    	; 0x28e4 <HID_Device_ProcessControlRequest+0x266>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2860:	80 91 e8 00 	lds	r24, 0x00E8
    2864:	87 7f       	andi	r24, 0xF7	; 247
    2866:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    286a:	c8 da       	rcall	.-2672   	; 0x1dfc <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
    286c:	90 e0       	ldi	r25, 0x00	; 0
    286e:	80 91 7a 06 	lds	r24, 0x067A
    2872:	81 11       	cpse	r24, r1
    2874:	91 e0       	ldi	r25, 0x01	; 1
    2876:	f6 01       	movw	r30, r12
    2878:	91 87       	std	Z+9, r25	; 0x09
    287a:	34 c0       	rjmp	.+104    	; 0x28e4 <HID_Device_ProcessControlRequest+0x266>
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    287c:	80 91 78 06 	lds	r24, 0x0678
    2880:	81 32       	cpi	r24, 0x21	; 33
    2882:	81 f5       	brne	.+96     	; 0x28e4 <HID_Device_ProcessControlRequest+0x266>
    2884:	80 91 e8 00 	lds	r24, 0x00E8
    2888:	87 7f       	andi	r24, 0xF7	; 247
    288a:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    288e:	b6 da       	rcall	.-2708   	; 0x1dfc <Endpoint_ClearStatusStage>

				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
    2890:	80 91 7a 06 	lds	r24, 0x067A
    2894:	90 91 7b 06 	lds	r25, 0x067B
    2898:	80 70       	andi	r24, 0x00	; 0
    289a:	36 e0       	ldi	r19, 0x06	; 6
    289c:	96 95       	lsr	r25
    289e:	87 95       	ror	r24
    28a0:	3a 95       	dec	r19
    28a2:	e1 f7       	brne	.-8      	; 0x289c <HID_Device_ProcessControlRequest+0x21e>
    28a4:	f6 01       	movw	r30, r12
    28a6:	95 87       	std	Z+13, r25	; 0x0d
    28a8:	84 87       	std	Z+12, r24	; 0x0c
    28aa:	1c c0       	rjmp	.+56     	; 0x28e4 <HID_Device_ProcessControlRequest+0x266>
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    28ac:	80 91 78 06 	lds	r24, 0x0678
    28b0:	81 3a       	cpi	r24, 0xA1	; 161
    28b2:	c1 f4       	brne	.+48     	; 0x28e4 <HID_Device_ProcessControlRequest+0x266>
    28b4:	80 91 e8 00 	lds	r24, 0x00E8
    28b8:	87 7f       	andi	r24, 0xF7	; 247
    28ba:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    28be:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    28c2:	80 ff       	sbrs	r24, 0
    28c4:	fc cf       	rjmp	.-8      	; 0x28be <HID_Device_ProcessControlRequest+0x240>
				Endpoint_Write_8(HIDInterfaceInfo->State.IdleCount >> 2);
    28c6:	f6 01       	movw	r30, r12
    28c8:	84 85       	ldd	r24, Z+12	; 0x0c
    28ca:	95 85       	ldd	r25, Z+13	; 0x0d
    28cc:	96 95       	lsr	r25
    28ce:	87 95       	ror	r24
    28d0:	96 95       	lsr	r25
    28d2:	87 95       	ror	r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    28d4:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    28d8:	80 91 e8 00 	lds	r24, 0x00E8
    28dc:	8e 77       	andi	r24, 0x7E	; 126
    28de:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    28e2:	8c da       	rcall	.-2792   	; 0x1dfc <Endpoint_ClearStatusStage>
			}

			break;
	}
}
    28e4:	0f b6       	in	r0, 0x3f	; 63
    28e6:	f8 94       	cli
    28e8:	7e be       	out	0x3e, r7	; 62
    28ea:	0f be       	out	0x3f, r0	; 63
    28ec:	6d be       	out	0x3d, r6	; 61
    28ee:	0f 90       	pop	r0
    28f0:	0f 90       	pop	r0
    28f2:	0f 90       	pop	r0
    28f4:	cf 91       	pop	r28
    28f6:	df 91       	pop	r29
    28f8:	1f 91       	pop	r17
    28fa:	0f 91       	pop	r16
    28fc:	ff 90       	pop	r15
    28fe:	ef 90       	pop	r14
    2900:	df 90       	pop	r13
    2902:	cf 90       	pop	r12
    2904:	bf 90       	pop	r11
    2906:	af 90       	pop	r10
    2908:	9f 90       	pop	r9
    290a:	8f 90       	pop	r8
    290c:	7f 90       	pop	r7
    290e:	6f 90       	pop	r6
    2910:	08 95       	ret

00002912 <MS_Device_USBTask>:

	return true;
}

void MS_Device_USBTask(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    2912:	cf 92       	push	r12
    2914:	df 92       	push	r13
    2916:	ef 92       	push	r14
    2918:	ff 92       	push	r15
    291a:	0f 93       	push	r16
    291c:	1f 93       	push	r17
    291e:	df 93       	push	r29
    2920:	cf 93       	push	r28
    2922:	00 d0       	rcall	.+0      	; 0x2924 <MS_Device_USBTask+0x12>
    2924:	cd b7       	in	r28, 0x3d	; 61
    2926:	de b7       	in	r29, 0x3e	; 62
    2928:	8c 01       	movw	r16, r24
	if (USB_DeviceState != DEVICE_STATE_Configured)
    292a:	80 91 77 06 	lds	r24, 0x0677
    292e:	84 30       	cpi	r24, 0x04	; 4
    2930:	09 f0       	breq	.+2      	; 0x2934 <MS_Device_USBTask+0x22>
    2932:	10 c1       	rjmp	.+544    	; 0x2b54 <MS_Device_USBTask+0x242>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2934:	f8 01       	movw	r30, r16
    2936:	96 81       	ldd	r25, Z+6	; 0x06
    2938:	9f 70       	andi	r25, 0x0F	; 15
    293a:	90 93 e9 00 	sts	0x00E9, r25
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    293e:	80 91 e8 00 	lds	r24, 0x00E8
	  return;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
    2942:	82 ff       	sbrs	r24, 2
    2944:	cd c0       	rjmp	.+410    	; 0x2ae0 <MS_Device_USBTask+0x1ce>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2946:	90 93 e9 00 	sts	0x00E9, r25
{
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);

	BytesProcessed = 0;
    294a:	1a 82       	std	Y+2, r1	; 0x02
    294c:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    294e:	2c e0       	ldi	r18, 0x0C	; 12
    2950:	e2 2e       	mov	r14, r18
    2952:	f1 2c       	mov	r15, r1
    2954:	e0 0e       	add	r14, r16
    2956:	f1 1e       	adc	r15, r17
    2958:	6e 01       	movw	r12, r28
    295a:	08 94       	sec
    295c:	c1 1c       	adc	r12, r1
    295e:	d1 1c       	adc	r13, r1
    2960:	05 c0       	rjmp	.+10     	; 0x296c <MS_Device_USBTask+0x5a>
	                               (sizeof(MS_CommandBlockWrapper_t) - 16), &BytesProcessed) ==
	                               ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    2962:	f8 01       	movw	r30, r16
    2964:	80 ad       	ldd	r24, Z+56	; 0x38
    2966:	88 23       	and	r24, r24
    2968:	09 f0       	breq	.+2      	; 0x296c <MS_Device_USBTask+0x5a>
    296a:	ba c0       	rjmp	.+372    	; 0x2ae0 <MS_Device_USBTask+0x1ce>
	uint16_t BytesProcessed;

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);

	BytesProcessed = 0;
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock,
    296c:	c7 01       	movw	r24, r14
    296e:	6f e0       	ldi	r22, 0x0F	; 15
    2970:	70 e0       	ldi	r23, 0x00	; 0
    2972:	a6 01       	movw	r20, r12
    2974:	9a d8       	rcall	.-3788   	; 0x1aaa <Endpoint_Read_Stream_LE>
    2976:	85 30       	cpi	r24, 0x05	; 5
    2978:	a1 f3       	breq	.-24     	; 0x2962 <MS_Device_USBTask+0x50>
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return false;
	}

	if ((MSInterfaceInfo->State.CommandBlock.Signature         != CPU_TO_LE32(MS_CBW_SIGNATURE))     ||
    297a:	f8 01       	movw	r30, r16
    297c:	84 85       	ldd	r24, Z+12	; 0x0c
    297e:	95 85       	ldd	r25, Z+13	; 0x0d
    2980:	a6 85       	ldd	r26, Z+14	; 0x0e
    2982:	b7 85       	ldd	r27, Z+15	; 0x0f
    2984:	85 55       	subi	r24, 0x55	; 85
    2986:	93 45       	sbci	r25, 0x53	; 83
    2988:	a2 44       	sbci	r26, 0x42	; 66
    298a:	b3 44       	sbci	r27, 0x43	; 67
    298c:	81 f4       	brne	.+32     	; 0x29ae <MS_Device_USBTask+0x9c>
    298e:	f8 01       	movw	r30, r16
    2990:	91 8d       	ldd	r25, Z+25	; 0x19
    2992:	83 85       	ldd	r24, Z+11	; 0x0b
    2994:	98 17       	cp	r25, r24
    2996:	58 f4       	brcc	.+22     	; 0x29ae <MS_Device_USBTask+0x9c>
    2998:	80 8d       	ldd	r24, Z+24	; 0x18
    299a:	90 e0       	ldi	r25, 0x00	; 0
    299c:	8f 71       	andi	r24, 0x1F	; 31
    299e:	90 70       	andi	r25, 0x00	; 0
    29a0:	89 2b       	or	r24, r25
    29a2:	29 f4       	brne	.+10     	; 0x29ae <MS_Device_USBTask+0x9c>
    29a4:	82 8d       	ldd	r24, Z+26	; 0x1a
    29a6:	88 23       	and	r24, r24
    29a8:	11 f0       	breq	.+4      	; 0x29ae <MS_Device_USBTask+0x9c>
    29aa:	81 31       	cpi	r24, 0x11	; 17
    29ac:	80 f0       	brcs	.+32     	; 0x29ce <MS_Device_USBTask+0xbc>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    29ae:	80 91 eb 00 	lds	r24, 0x00EB
    29b2:	80 62       	ori	r24, 0x20	; 32
    29b4:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    29b8:	f8 01       	movw	r30, r16
    29ba:	81 81       	ldd	r24, Z+1	; 0x01
    29bc:	8f 70       	andi	r24, 0x0F	; 15
    29be:	80 93 e9 00 	sts	0x00E9, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    29c2:	80 91 eb 00 	lds	r24, 0x00EB
    29c6:	80 62       	ori	r24, 0x20	; 32
    29c8:	80 93 eb 00 	sts	0x00EB, r24
    29cc:	89 c0       	rjmp	.+274    	; 0x2ae0 <MS_Device_USBTask+0x1ce>
		Endpoint_StallTransaction();

		return false;
	}

	BytesProcessed = 0;
    29ce:	1a 82       	std	Y+2, r1	; 0x02
    29d0:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock.SCSICommandData,
    29d2:	9b e1       	ldi	r25, 0x1B	; 27
    29d4:	e9 2e       	mov	r14, r25
    29d6:	f1 2c       	mov	r15, r1
    29d8:	e0 0e       	add	r14, r16
    29da:	f1 1e       	adc	r15, r17
    29dc:	6e 01       	movw	r12, r28
    29de:	08 94       	sec
    29e0:	c1 1c       	adc	r12, r1
    29e2:	d1 1c       	adc	r13, r1
    29e4:	05 c0       	rjmp	.+10     	; 0x29f0 <MS_Device_USBTask+0xde>
	                                MSInterfaceInfo->State.CommandBlock.SCSICommandLength, &BytesProcessed) ==
	                                ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    29e6:	f8 01       	movw	r30, r16
    29e8:	80 ad       	ldd	r24, Z+56	; 0x38
    29ea:	88 23       	and	r24, r24
    29ec:	09 f0       	breq	.+2      	; 0x29f0 <MS_Device_USBTask+0xde>
    29ee:	78 c0       	rjmp	.+240    	; 0x2ae0 <MS_Device_USBTask+0x1ce>

		return false;
	}

	BytesProcessed = 0;
	while (Endpoint_Read_Stream_LE(&MSInterfaceInfo->State.CommandBlock.SCSICommandData,
    29f0:	f8 01       	movw	r30, r16
    29f2:	62 8d       	ldd	r22, Z+26	; 0x1a
    29f4:	c7 01       	movw	r24, r14
    29f6:	70 e0       	ldi	r23, 0x00	; 0
    29f8:	a6 01       	movw	r20, r12
    29fa:	57 d8       	rcall	.-3922   	; 0x1aaa <Endpoint_Read_Stream_LE>
    29fc:	85 30       	cpi	r24, 0x05	; 5
    29fe:	99 f3       	breq	.-26     	; 0x29e6 <MS_Device_USBTask+0xd4>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2a00:	80 91 e8 00 	lds	r24, 0x00E8
    2a04:	8b 77       	andi	r24, 0x7B	; 123
    2a06:	80 93 e8 00 	sts	0x00E8, r24

	if (Endpoint_IsOUTReceived())
	{
		if (MS_Device_ReadInCommandBlock(MSInterfaceInfo))
		{
			if (MSInterfaceInfo->State.CommandBlock.Flags & MS_COMMAND_DIR_DATA_IN)
    2a0a:	f8 01       	movw	r30, r16
    2a0c:	80 8d       	ldd	r24, Z+24	; 0x18
    2a0e:	87 ff       	sbrs	r24, 7
    2a10:	04 c0       	rjmp	.+8      	; 0x2a1a <MS_Device_USBTask+0x108>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2a12:	81 81       	ldd	r24, Z+1	; 0x01
    2a14:	8f 70       	andi	r24, 0x0F	; 15
    2a16:	80 93 e9 00 	sts	0x00E9, r24
			  Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);

			bool SCSICommandResult = CALLBACK_MS_Device_SCSICommandReceived(MSInterfaceInfo);
    2a1a:	c8 01       	movw	r24, r16
    2a1c:	0e 94 0f 02 	call	0x41e	; 0x41e <CALLBACK_MS_Device_SCSICommandReceived>

			MSInterfaceInfo->State.CommandStatus.Status              = (SCSICommandResult) ? MS_SCSI_COMMAND_Pass : MS_SCSI_COMMAND_Fail;
    2a20:	91 e0       	ldi	r25, 0x01	; 1
    2a22:	98 27       	eor	r25, r24
    2a24:	f8 01       	movw	r30, r16
    2a26:	97 ab       	std	Z+55, r25	; 0x37
			MSInterfaceInfo->State.CommandStatus.Signature           = CPU_TO_LE32(MS_CSW_SIGNATURE);
    2a28:	25 e5       	ldi	r18, 0x55	; 85
    2a2a:	33 e5       	ldi	r19, 0x53	; 83
    2a2c:	42 e4       	ldi	r20, 0x42	; 66
    2a2e:	53 e5       	ldi	r21, 0x53	; 83
    2a30:	23 a7       	std	Z+43, r18	; 0x2b
    2a32:	34 a7       	std	Z+44, r19	; 0x2c
    2a34:	45 a7       	std	Z+45, r20	; 0x2d
    2a36:	56 a7       	std	Z+46, r21	; 0x2e
			MSInterfaceInfo->State.CommandStatus.Tag                 = MSInterfaceInfo->State.CommandBlock.Tag;
    2a38:	20 89       	ldd	r18, Z+16	; 0x10
    2a3a:	31 89       	ldd	r19, Z+17	; 0x11
    2a3c:	42 89       	ldd	r20, Z+18	; 0x12
    2a3e:	53 89       	ldd	r21, Z+19	; 0x13
    2a40:	27 a7       	std	Z+47, r18	; 0x2f
    2a42:	30 ab       	std	Z+48, r19	; 0x30
    2a44:	41 ab       	std	Z+49, r20	; 0x31
    2a46:	52 ab       	std	Z+50, r21	; 0x32
			MSInterfaceInfo->State.CommandStatus.DataTransferResidue = MSInterfaceInfo->State.CommandBlock.DataTransferLength;
    2a48:	24 89       	ldd	r18, Z+20	; 0x14
    2a4a:	35 89       	ldd	r19, Z+21	; 0x15
    2a4c:	46 89       	ldd	r20, Z+22	; 0x16
    2a4e:	57 89       	ldd	r21, Z+23	; 0x17
    2a50:	23 ab       	std	Z+51, r18	; 0x33
    2a52:	34 ab       	std	Z+52, r19	; 0x34
    2a54:	45 ab       	std	Z+53, r20	; 0x35
    2a56:	56 ab       	std	Z+54, r21	; 0x36

			if (!(SCSICommandResult) && (le32_to_cpu(MSInterfaceInfo->State.CommandStatus.DataTransferResidue)))
    2a58:	88 23       	and	r24, r24
    2a5a:	51 f4       	brne	.+20     	; 0x2a70 <MS_Device_USBTask+0x15e>
    2a5c:	21 15       	cp	r18, r1
    2a5e:	31 05       	cpc	r19, r1
    2a60:	41 05       	cpc	r20, r1
    2a62:	51 05       	cpc	r21, r1
    2a64:	29 f0       	breq	.+10     	; 0x2a70 <MS_Device_USBTask+0x15e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    2a66:	80 91 eb 00 	lds	r24, 0x00EB
    2a6a:	80 62       	ori	r24, 0x20	; 32
    2a6c:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2a70:	f8 01       	movw	r30, r16
    2a72:	86 81       	ldd	r24, Z+6	; 0x06
    2a74:	8f 70       	andi	r24, 0x0F	; 15
    2a76:	80 93 e9 00 	sts	0x00E9, r24
    2a7a:	04 c0       	rjmp	.+8      	; 0x2a84 <MS_Device_USBTask+0x172>
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    2a7c:	f8 01       	movw	r30, r16
    2a7e:	80 ad       	ldd	r24, Z+56	; 0x38
    2a80:	88 23       	and	r24, r24
    2a82:	71 f5       	brne	.+92     	; 0x2ae0 <MS_Device_USBTask+0x1ce>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    2a84:	80 91 eb 00 	lds	r24, 0x00EB

static void MS_Device_ReturnCommandStatus(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);

	while (Endpoint_IsStalled())
    2a88:	85 fd       	sbrc	r24, 5
    2a8a:	f8 cf       	rjmp	.-16     	; 0x2a7c <MS_Device_USBTask+0x16a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2a8c:	f8 01       	movw	r30, r16
    2a8e:	81 81       	ldd	r24, Z+1	; 0x01
    2a90:	8f 70       	andi	r24, 0x0F	; 15
    2a92:	80 93 e9 00 	sts	0x00E9, r24
    2a96:	04 c0       	rjmp	.+8      	; 0x2aa0 <MS_Device_USBTask+0x18e>
	{
		#if !defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_USBTask();
		#endif

		if (MSInterfaceInfo->State.IsMassStoreReset)
    2a98:	f8 01       	movw	r30, r16
    2a9a:	80 ad       	ldd	r24, Z+56	; 0x38
    2a9c:	88 23       	and	r24, r24
    2a9e:	01 f5       	brne	.+64     	; 0x2ae0 <MS_Device_USBTask+0x1ce>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    2aa0:	80 91 eb 00 	lds	r24, 0x00EB
		  return;
	}

	Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);

	while (Endpoint_IsStalled())
    2aa4:	85 fd       	sbrc	r24, 5
    2aa6:	f8 cf       	rjmp	.-16     	; 0x2a98 <MS_Device_USBTask+0x186>

		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	uint16_t BytesProcessed = 0;
    2aa8:	1a 82       	std	Y+2, r1	; 0x02
    2aaa:	19 82       	std	Y+1, r1	; 0x01
	while (Endpoint_Write_Stream_LE(&MSInterfaceInfo->State.CommandStatus,
    2aac:	8b e2       	ldi	r24, 0x2B	; 43
    2aae:	e8 2e       	mov	r14, r24
    2ab0:	f1 2c       	mov	r15, r1
    2ab2:	e0 0e       	add	r14, r16
    2ab4:	f1 1e       	adc	r15, r17
    2ab6:	6e 01       	movw	r12, r28
    2ab8:	08 94       	sec
    2aba:	c1 1c       	adc	r12, r1
    2abc:	d1 1c       	adc	r13, r1
    2abe:	04 c0       	rjmp	.+8      	; 0x2ac8 <MS_Device_USBTask+0x1b6>
	                                sizeof(MS_CommandStatusWrapper_t), &BytesProcessed) ==
	                                ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (MSInterfaceInfo->State.IsMassStoreReset)
    2ac0:	f8 01       	movw	r30, r16
    2ac2:	80 ad       	ldd	r24, Z+56	; 0x38
    2ac4:	88 23       	and	r24, r24
    2ac6:	61 f4       	brne	.+24     	; 0x2ae0 <MS_Device_USBTask+0x1ce>
		if (MSInterfaceInfo->State.IsMassStoreReset)
		  return;
	}

	uint16_t BytesProcessed = 0;
	while (Endpoint_Write_Stream_LE(&MSInterfaceInfo->State.CommandStatus,
    2ac8:	c7 01       	movw	r24, r14
    2aca:	6d e0       	ldi	r22, 0x0D	; 13
    2acc:	70 e0       	ldi	r23, 0x00	; 0
    2ace:	a6 01       	movw	r20, r12
    2ad0:	8e d8       	rcall	.-3812   	; 0x1bee <Endpoint_Write_Stream_LE>
    2ad2:	85 30       	cpi	r24, 0x05	; 5
    2ad4:	a9 f3       	breq	.-22     	; 0x2ac0 <MS_Device_USBTask+0x1ae>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2ad6:	80 91 e8 00 	lds	r24, 0x00E8
    2ada:	8e 77       	andi	r24, 0x7E	; 126
    2adc:	80 93 e8 00 	sts	0x00E8, r24

			MS_Device_ReturnCommandStatus(MSInterfaceInfo);
		}
	}

	if (MSInterfaceInfo->State.IsMassStoreReset)
    2ae0:	f8 01       	movw	r30, r16
    2ae2:	80 ad       	ldd	r24, Z+56	; 0x38
    2ae4:	88 23       	and	r24, r24
    2ae6:	b1 f1       	breq	.+108    	; 0x2b54 <MS_Device_USBTask+0x242>
	{
		Endpoint_ResetEndpoint(MSInterfaceInfo->Config.DataOUTEndpoint.Address);
    2ae8:	46 81       	ldd	r20, Z+6	; 0x06
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    2aea:	84 2f       	mov	r24, r20
    2aec:	8f 70       	andi	r24, 0x0F	; 15
    2aee:	21 e0       	ldi	r18, 0x01	; 1
    2af0:	30 e0       	ldi	r19, 0x00	; 0
    2af2:	b9 01       	movw	r22, r18
    2af4:	02 c0       	rjmp	.+4      	; 0x2afa <MS_Device_USBTask+0x1e8>
    2af6:	66 0f       	add	r22, r22
    2af8:	77 1f       	adc	r23, r23
    2afa:	8a 95       	dec	r24
    2afc:	e2 f7       	brpl	.-8      	; 0x2af6 <MS_Device_USBTask+0x1e4>
    2afe:	60 93 ea 00 	sts	0x00EA, r22
				UERST = 0;
    2b02:	10 92 ea 00 	sts	0x00EA, r1
		Endpoint_ResetEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);
    2b06:	91 81       	ldd	r25, Z+1	; 0x01
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    2b08:	89 2f       	mov	r24, r25
    2b0a:	8f 70       	andi	r24, 0x0F	; 15
    2b0c:	02 c0       	rjmp	.+4      	; 0x2b12 <MS_Device_USBTask+0x200>
    2b0e:	22 0f       	add	r18, r18
    2b10:	33 1f       	adc	r19, r19
    2b12:	8a 95       	dec	r24
    2b14:	e2 f7       	brpl	.-8      	; 0x2b0e <MS_Device_USBTask+0x1fc>
    2b16:	20 93 ea 00 	sts	0x00EA, r18
				UERST = 0;
    2b1a:	10 92 ea 00 	sts	0x00EA, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2b1e:	4f 70       	andi	r20, 0x0F	; 15
    2b20:	40 93 e9 00 	sts	0x00E9, r20
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    2b24:	80 91 eb 00 	lds	r24, 0x00EB
    2b28:	80 61       	ori	r24, 0x10	; 16
    2b2a:	80 93 eb 00 	sts	0x00EB, r24

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    2b2e:	80 91 eb 00 	lds	r24, 0x00EB
    2b32:	88 60       	ori	r24, 0x08	; 8
    2b34:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2b38:	9f 70       	andi	r25, 0x0F	; 15
    2b3a:	90 93 e9 00 	sts	0x00E9, r25
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    2b3e:	80 91 eb 00 	lds	r24, 0x00EB
    2b42:	80 61       	ori	r24, 0x10	; 16
    2b44:	80 93 eb 00 	sts	0x00EB, r24

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    2b48:	80 91 eb 00 	lds	r24, 0x00EB
    2b4c:	88 60       	ori	r24, 0x08	; 8
    2b4e:	80 93 eb 00 	sts	0x00EB, r24
		Endpoint_ResetDataToggle();
		Endpoint_SelectEndpoint(MSInterfaceInfo->Config.DataINEndpoint.Address);
		Endpoint_ClearStall();
		Endpoint_ResetDataToggle();

		MSInterfaceInfo->State.IsMassStoreReset = false;
    2b52:	10 ae       	std	Z+56, r1	; 0x38
	}
}
    2b54:	0f 90       	pop	r0
    2b56:	0f 90       	pop	r0
    2b58:	cf 91       	pop	r28
    2b5a:	df 91       	pop	r29
    2b5c:	1f 91       	pop	r17
    2b5e:	0f 91       	pop	r16
    2b60:	ff 90       	pop	r15
    2b62:	ef 90       	pop	r14
    2b64:	df 90       	pop	r13
    2b66:	cf 90       	pop	r12
    2b68:	08 95       	ret

00002b6a <MS_Device_ConfigureEndpoints>:
			break;
	}
}

bool MS_Device_ConfigureEndpoints(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    2b6a:	cf 93       	push	r28
    2b6c:	df 93       	push	r29
    2b6e:	ec 01       	movw	r28, r24
	memset(&MSInterfaceInfo->State, 0x00, sizeof(MSInterfaceInfo->State));
    2b70:	0c 96       	adiw	r24, 0x0c	; 12
    2b72:	fc 01       	movw	r30, r24
    2b74:	8d e2       	ldi	r24, 0x2D	; 45
    2b76:	df 01       	movw	r26, r30
    2b78:	1d 92       	st	X+, r1
    2b7a:	8a 95       	dec	r24
    2b7c:	e9 f7       	brne	.-6      	; 0x2b78 <MS_Device_ConfigureEndpoints+0xe>

	MSInterfaceInfo->Config.DataINEndpoint.Type  = EP_TYPE_BULK;
    2b7e:	82 e0       	ldi	r24, 0x02	; 2
    2b80:	8c 83       	std	Y+4, r24	; 0x04
	MSInterfaceInfo->Config.DataOUTEndpoint.Type = EP_TYPE_BULK;
    2b82:	89 87       	std	Y+9, r24	; 0x09

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataINEndpoint, 1)))
    2b84:	ce 01       	movw	r24, r28
    2b86:	01 96       	adiw	r24, 0x01	; 1
    2b88:	61 e0       	ldi	r22, 0x01	; 1
    2b8a:	fc d8       	rcall	.-3592   	; 0x1d84 <Endpoint_ConfigureEndpointTable>
    2b8c:	88 23       	and	r24, r24
    2b8e:	31 f0       	breq	.+12     	; 0x2b9c <MS_Device_ConfigureEndpoints+0x32>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&MSInterfaceInfo->Config.DataOUTEndpoint, 1)))
    2b90:	ce 01       	movw	r24, r28
    2b92:	06 96       	adiw	r24, 0x06	; 6
    2b94:	61 e0       	ldi	r22, 0x01	; 1
    2b96:	f6 d8       	rcall	.-3604   	; 0x1d84 <Endpoint_ConfigureEndpointTable>
    2b98:	81 11       	cpse	r24, r1
    2b9a:	81 e0       	ldi	r24, 0x01	; 1
	  return false;

	return true;
}
    2b9c:	df 91       	pop	r29
    2b9e:	cf 91       	pop	r28
    2ba0:	08 95       	ret

00002ba2 <MS_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_MS_DRIVER
#define  __INCLUDE_FROM_MASSSTORAGE_DEVICE_C
#include "MassStorageClassDevice.h"

void MS_Device_ProcessControlRequest(USB_ClassInfo_MS_Device_t* const MSInterfaceInfo)
{
    2ba2:	cf 93       	push	r28
    2ba4:	df 93       	push	r29
    2ba6:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2ba8:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
    2bac:	83 ff       	sbrs	r24, 3
    2bae:	33 c0       	rjmp	.+102    	; 0x2c16 <MS_Device_ProcessControlRequest+0x74>
	  return;

	if (USB_ControlRequest.wIndex != MSInterfaceInfo->Config.InterfaceNumber)
    2bb0:	88 81       	ld	r24, Y
    2bb2:	90 e0       	ldi	r25, 0x00	; 0
    2bb4:	20 91 7c 06 	lds	r18, 0x067C
    2bb8:	30 91 7d 06 	lds	r19, 0x067D
    2bbc:	28 17       	cp	r18, r24
    2bbe:	39 07       	cpc	r19, r25
    2bc0:	51 f5       	brne	.+84     	; 0x2c16 <MS_Device_ProcessControlRequest+0x74>
	  return;

	switch (USB_ControlRequest.bRequest)
    2bc2:	80 91 79 06 	lds	r24, 0x0679
    2bc6:	8e 3f       	cpi	r24, 0xFE	; 254
    2bc8:	79 f0       	breq	.+30     	; 0x2be8 <MS_Device_ProcessControlRequest+0x46>
    2bca:	8f 3f       	cpi	r24, 0xFF	; 255
    2bcc:	21 f5       	brne	.+72     	; 0x2c16 <MS_Device_ProcessControlRequest+0x74>
	{
		case MS_REQ_MassStorageReset:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    2bce:	80 91 78 06 	lds	r24, 0x0678
    2bd2:	81 32       	cpi	r24, 0x21	; 33
    2bd4:	01 f5       	brne	.+64     	; 0x2c16 <MS_Device_ProcessControlRequest+0x74>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2bd6:	80 91 e8 00 	lds	r24, 0x00E8
    2bda:	87 7f       	andi	r24, 0xF7	; 247
    2bdc:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    2be0:	0d d9       	rcall	.-3558   	; 0x1dfc <Endpoint_ClearStatusStage>

				MSInterfaceInfo->State.IsMassStoreReset = true;
    2be2:	81 e0       	ldi	r24, 0x01	; 1
    2be4:	88 af       	std	Y+56, r24	; 0x38
    2be6:	17 c0       	rjmp	.+46     	; 0x2c16 <MS_Device_ProcessControlRequest+0x74>
			}

			break;
		case MS_REQ_GetMaxLUN:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    2be8:	80 91 78 06 	lds	r24, 0x0678
    2bec:	81 3a       	cpi	r24, 0xA1	; 161
    2bee:	99 f4       	brne	.+38     	; 0x2c16 <MS_Device_ProcessControlRequest+0x74>
    2bf0:	80 91 e8 00 	lds	r24, 0x00E8
    2bf4:	87 7f       	andi	r24, 0xF7	; 247
    2bf6:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2bfa:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();
				while (!(Endpoint_IsINReady()));
    2bfe:	80 ff       	sbrs	r24, 0
    2c00:	fc cf       	rjmp	.-8      	; 0x2bfa <MS_Device_ProcessControlRequest+0x58>
				Endpoint_Write_8(MSInterfaceInfo->Config.TotalLUNs - 1);
    2c02:	8b 85       	ldd	r24, Y+11	; 0x0b
    2c04:	81 50       	subi	r24, 0x01	; 1
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2c06:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2c0a:	80 91 e8 00 	lds	r24, 0x00E8
    2c0e:	8e 77       	andi	r24, 0x7E	; 126
    2c10:	80 93 e8 00 	sts	0x00E8, r24
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    2c14:	f3 d8       	rcall	.-3610   	; 0x1dfc <Endpoint_ClearStatusStage>
			}

			break;
	}
}
    2c16:	df 91       	pop	r29
    2c18:	cf 91       	pop	r28
    2c1a:	08 95       	ret

00002c1c <__udivmodhi4>:
    2c1c:	aa 1b       	sub	r26, r26
    2c1e:	bb 1b       	sub	r27, r27
    2c20:	51 e1       	ldi	r21, 0x11	; 17
    2c22:	07 c0       	rjmp	.+14     	; 0x2c32 <__udivmodhi4_ep>

00002c24 <__udivmodhi4_loop>:
    2c24:	aa 1f       	adc	r26, r26
    2c26:	bb 1f       	adc	r27, r27
    2c28:	a6 17       	cp	r26, r22
    2c2a:	b7 07       	cpc	r27, r23
    2c2c:	10 f0       	brcs	.+4      	; 0x2c32 <__udivmodhi4_ep>
    2c2e:	a6 1b       	sub	r26, r22
    2c30:	b7 0b       	sbc	r27, r23

00002c32 <__udivmodhi4_ep>:
    2c32:	88 1f       	adc	r24, r24
    2c34:	99 1f       	adc	r25, r25
    2c36:	5a 95       	dec	r21
    2c38:	a9 f7       	brne	.-22     	; 0x2c24 <__udivmodhi4_loop>
    2c3a:	80 95       	com	r24
    2c3c:	90 95       	com	r25
    2c3e:	bc 01       	movw	r22, r24
    2c40:	cd 01       	movw	r24, r26
    2c42:	08 95       	ret

00002c44 <memcmp>:
    2c44:	fb 01       	movw	r30, r22
    2c46:	dc 01       	movw	r26, r24
    2c48:	04 c0       	rjmp	.+8      	; 0x2c52 <memcmp+0xe>
    2c4a:	8d 91       	ld	r24, X+
    2c4c:	01 90       	ld	r0, Z+
    2c4e:	80 19       	sub	r24, r0
    2c50:	21 f4       	brne	.+8      	; 0x2c5a <memcmp+0x16>
    2c52:	41 50       	subi	r20, 0x01	; 1
    2c54:	50 40       	sbci	r21, 0x00	; 0
    2c56:	c8 f7       	brcc	.-14     	; 0x2c4a <memcmp+0x6>
    2c58:	88 1b       	sub	r24, r24
    2c5a:	99 0b       	sbc	r25, r25
    2c5c:	08 95       	ret

00002c5e <memcpy>:
    2c5e:	fb 01       	movw	r30, r22
    2c60:	dc 01       	movw	r26, r24
    2c62:	02 c0       	rjmp	.+4      	; 0x2c68 <memcpy+0xa>
    2c64:	01 90       	ld	r0, Z+
    2c66:	0d 92       	st	X+, r0
    2c68:	41 50       	subi	r20, 0x01	; 1
    2c6a:	50 40       	sbci	r21, 0x00	; 0
    2c6c:	d8 f7       	brcc	.-10     	; 0x2c64 <memcpy+0x6>
    2c6e:	08 95       	ret

00002c70 <memset>:
    2c70:	dc 01       	movw	r26, r24
    2c72:	01 c0       	rjmp	.+2      	; 0x2c76 <memset+0x6>
    2c74:	6d 93       	st	X+, r22
    2c76:	41 50       	subi	r20, 0x01	; 1
    2c78:	50 40       	sbci	r21, 0x00	; 0
    2c7a:	e0 f7       	brcc	.-8      	; 0x2c74 <memset+0x4>
    2c7c:	08 95       	ret

00002c7e <printf_P>:
    2c7e:	df 93       	push	r29
    2c80:	cf 93       	push	r28
    2c82:	cd b7       	in	r28, 0x3d	; 61
    2c84:	de b7       	in	r29, 0x3e	; 62
    2c86:	fe 01       	movw	r30, r28
    2c88:	35 96       	adiw	r30, 0x05	; 5
    2c8a:	61 91       	ld	r22, Z+
    2c8c:	71 91       	ld	r23, Z+
    2c8e:	a0 91 82 06 	lds	r26, 0x0682
    2c92:	b0 91 83 06 	lds	r27, 0x0683
    2c96:	13 96       	adiw	r26, 0x03	; 3
    2c98:	8c 91       	ld	r24, X
    2c9a:	13 97       	sbiw	r26, 0x03	; 3
    2c9c:	88 60       	ori	r24, 0x08	; 8
    2c9e:	13 96       	adiw	r26, 0x03	; 3
    2ca0:	8c 93       	st	X, r24
    2ca2:	80 91 82 06 	lds	r24, 0x0682
    2ca6:	90 91 83 06 	lds	r25, 0x0683
    2caa:	af 01       	movw	r20, r30
    2cac:	3f d0       	rcall	.+126    	; 0x2d2c <vfprintf>
    2cae:	e0 91 82 06 	lds	r30, 0x0682
    2cb2:	f0 91 83 06 	lds	r31, 0x0683
    2cb6:	23 81       	ldd	r18, Z+3	; 0x03
    2cb8:	27 7f       	andi	r18, 0xF7	; 247
    2cba:	23 83       	std	Z+3, r18	; 0x03
    2cbc:	cf 91       	pop	r28
    2cbe:	df 91       	pop	r29
    2cc0:	08 95       	ret

00002cc2 <puts>:
    2cc2:	0f 93       	push	r16
    2cc4:	1f 93       	push	r17
    2cc6:	cf 93       	push	r28
    2cc8:	df 93       	push	r29
    2cca:	8c 01       	movw	r16, r24
    2ccc:	e0 91 82 06 	lds	r30, 0x0682
    2cd0:	f0 91 83 06 	lds	r31, 0x0683
    2cd4:	83 81       	ldd	r24, Z+3	; 0x03
    2cd6:	81 ff       	sbrs	r24, 1
    2cd8:	21 c0       	rjmp	.+66     	; 0x2d1c <puts+0x5a>
    2cda:	c0 e0       	ldi	r28, 0x00	; 0
    2cdc:	d0 e0       	ldi	r29, 0x00	; 0
    2cde:	0d c0       	rjmp	.+26     	; 0x2cfa <puts+0x38>
    2ce0:	e0 91 82 06 	lds	r30, 0x0682
    2ce4:	f0 91 83 06 	lds	r31, 0x0683
    2ce8:	20 85       	ldd	r18, Z+8	; 0x08
    2cea:	31 85       	ldd	r19, Z+9	; 0x09
    2cec:	bf 01       	movw	r22, r30
    2cee:	f9 01       	movw	r30, r18
    2cf0:	09 95       	icall
    2cf2:	89 2b       	or	r24, r25
    2cf4:	11 f0       	breq	.+4      	; 0x2cfa <puts+0x38>
    2cf6:	cf ef       	ldi	r28, 0xFF	; 255
    2cf8:	df ef       	ldi	r29, 0xFF	; 255
    2cfa:	f8 01       	movw	r30, r16
    2cfc:	81 91       	ld	r24, Z+
    2cfe:	8f 01       	movw	r16, r30
    2d00:	88 23       	and	r24, r24
    2d02:	71 f7       	brne	.-36     	; 0x2ce0 <puts+0x1e>
    2d04:	e0 91 82 06 	lds	r30, 0x0682
    2d08:	f0 91 83 06 	lds	r31, 0x0683
    2d0c:	20 85       	ldd	r18, Z+8	; 0x08
    2d0e:	31 85       	ldd	r19, Z+9	; 0x09
    2d10:	8a e0       	ldi	r24, 0x0A	; 10
    2d12:	bf 01       	movw	r22, r30
    2d14:	f9 01       	movw	r30, r18
    2d16:	09 95       	icall
    2d18:	89 2b       	or	r24, r25
    2d1a:	11 f0       	breq	.+4      	; 0x2d20 <puts+0x5e>
    2d1c:	cf ef       	ldi	r28, 0xFF	; 255
    2d1e:	df ef       	ldi	r29, 0xFF	; 255
    2d20:	ce 01       	movw	r24, r28
    2d22:	df 91       	pop	r29
    2d24:	cf 91       	pop	r28
    2d26:	1f 91       	pop	r17
    2d28:	0f 91       	pop	r16
    2d2a:	08 95       	ret

00002d2c <vfprintf>:
    2d2c:	2f 92       	push	r2
    2d2e:	3f 92       	push	r3
    2d30:	4f 92       	push	r4
    2d32:	5f 92       	push	r5
    2d34:	6f 92       	push	r6
    2d36:	7f 92       	push	r7
    2d38:	8f 92       	push	r8
    2d3a:	9f 92       	push	r9
    2d3c:	af 92       	push	r10
    2d3e:	bf 92       	push	r11
    2d40:	cf 92       	push	r12
    2d42:	df 92       	push	r13
    2d44:	ef 92       	push	r14
    2d46:	ff 92       	push	r15
    2d48:	0f 93       	push	r16
    2d4a:	1f 93       	push	r17
    2d4c:	df 93       	push	r29
    2d4e:	cf 93       	push	r28
    2d50:	cd b7       	in	r28, 0x3d	; 61
    2d52:	de b7       	in	r29, 0x3e	; 62
    2d54:	2b 97       	sbiw	r28, 0x0b	; 11
    2d56:	0f b6       	in	r0, 0x3f	; 63
    2d58:	f8 94       	cli
    2d5a:	de bf       	out	0x3e, r29	; 62
    2d5c:	0f be       	out	0x3f, r0	; 63
    2d5e:	cd bf       	out	0x3d, r28	; 61
    2d60:	3c 01       	movw	r6, r24
    2d62:	2b 01       	movw	r4, r22
    2d64:	5a 01       	movw	r10, r20
    2d66:	fc 01       	movw	r30, r24
    2d68:	17 82       	std	Z+7, r1	; 0x07
    2d6a:	16 82       	std	Z+6, r1	; 0x06
    2d6c:	83 81       	ldd	r24, Z+3	; 0x03
    2d6e:	81 fd       	sbrc	r24, 1
    2d70:	03 c0       	rjmp	.+6      	; 0x2d78 <vfprintf+0x4c>
    2d72:	6f ef       	ldi	r22, 0xFF	; 255
    2d74:	7f ef       	ldi	r23, 0xFF	; 255
    2d76:	b9 c1       	rjmp	.+882    	; 0x30ea <vfprintf+0x3be>
    2d78:	9a e0       	ldi	r25, 0x0A	; 10
    2d7a:	89 2e       	mov	r8, r25
    2d7c:	1e 01       	movw	r2, r28
    2d7e:	08 94       	sec
    2d80:	21 1c       	adc	r2, r1
    2d82:	31 1c       	adc	r3, r1
    2d84:	f3 01       	movw	r30, r6
    2d86:	23 81       	ldd	r18, Z+3	; 0x03
    2d88:	f2 01       	movw	r30, r4
    2d8a:	23 fd       	sbrc	r18, 3
    2d8c:	85 91       	lpm	r24, Z+
    2d8e:	23 ff       	sbrs	r18, 3
    2d90:	81 91       	ld	r24, Z+
    2d92:	2f 01       	movw	r4, r30
    2d94:	88 23       	and	r24, r24
    2d96:	09 f4       	brne	.+2      	; 0x2d9a <vfprintf+0x6e>
    2d98:	a5 c1       	rjmp	.+842    	; 0x30e4 <vfprintf+0x3b8>
    2d9a:	85 32       	cpi	r24, 0x25	; 37
    2d9c:	39 f4       	brne	.+14     	; 0x2dac <vfprintf+0x80>
    2d9e:	23 fd       	sbrc	r18, 3
    2da0:	85 91       	lpm	r24, Z+
    2da2:	23 ff       	sbrs	r18, 3
    2da4:	81 91       	ld	r24, Z+
    2da6:	2f 01       	movw	r4, r30
    2da8:	85 32       	cpi	r24, 0x25	; 37
    2daa:	21 f4       	brne	.+8      	; 0x2db4 <vfprintf+0x88>
    2dac:	90 e0       	ldi	r25, 0x00	; 0
    2dae:	b3 01       	movw	r22, r6
    2db0:	cc d1       	rcall	.+920    	; 0x314a <fputc>
    2db2:	e8 cf       	rjmp	.-48     	; 0x2d84 <vfprintf+0x58>
    2db4:	98 2f       	mov	r25, r24
    2db6:	ff 24       	eor	r15, r15
    2db8:	ee 24       	eor	r14, r14
    2dba:	99 24       	eor	r9, r9
    2dbc:	ff e1       	ldi	r31, 0x1F	; 31
    2dbe:	ff 15       	cp	r31, r15
    2dc0:	d0 f0       	brcs	.+52     	; 0x2df6 <vfprintf+0xca>
    2dc2:	9b 32       	cpi	r25, 0x2B	; 43
    2dc4:	69 f0       	breq	.+26     	; 0x2de0 <vfprintf+0xb4>
    2dc6:	9c 32       	cpi	r25, 0x2C	; 44
    2dc8:	28 f4       	brcc	.+10     	; 0x2dd4 <vfprintf+0xa8>
    2dca:	90 32       	cpi	r25, 0x20	; 32
    2dcc:	59 f0       	breq	.+22     	; 0x2de4 <vfprintf+0xb8>
    2dce:	93 32       	cpi	r25, 0x23	; 35
    2dd0:	91 f4       	brne	.+36     	; 0x2df6 <vfprintf+0xca>
    2dd2:	0e c0       	rjmp	.+28     	; 0x2df0 <vfprintf+0xc4>
    2dd4:	9d 32       	cpi	r25, 0x2D	; 45
    2dd6:	49 f0       	breq	.+18     	; 0x2dea <vfprintf+0xbe>
    2dd8:	90 33       	cpi	r25, 0x30	; 48
    2dda:	69 f4       	brne	.+26     	; 0x2df6 <vfprintf+0xca>
    2ddc:	41 e0       	ldi	r20, 0x01	; 1
    2dde:	24 c0       	rjmp	.+72     	; 0x2e28 <vfprintf+0xfc>
    2de0:	52 e0       	ldi	r21, 0x02	; 2
    2de2:	f5 2a       	or	r15, r21
    2de4:	84 e0       	ldi	r24, 0x04	; 4
    2de6:	f8 2a       	or	r15, r24
    2de8:	28 c0       	rjmp	.+80     	; 0x2e3a <vfprintf+0x10e>
    2dea:	98 e0       	ldi	r25, 0x08	; 8
    2dec:	f9 2a       	or	r15, r25
    2dee:	25 c0       	rjmp	.+74     	; 0x2e3a <vfprintf+0x10e>
    2df0:	e0 e1       	ldi	r30, 0x10	; 16
    2df2:	fe 2a       	or	r15, r30
    2df4:	22 c0       	rjmp	.+68     	; 0x2e3a <vfprintf+0x10e>
    2df6:	f7 fc       	sbrc	r15, 7
    2df8:	29 c0       	rjmp	.+82     	; 0x2e4c <vfprintf+0x120>
    2dfa:	89 2f       	mov	r24, r25
    2dfc:	80 53       	subi	r24, 0x30	; 48
    2dfe:	8a 30       	cpi	r24, 0x0A	; 10
    2e00:	70 f4       	brcc	.+28     	; 0x2e1e <vfprintf+0xf2>
    2e02:	f6 fe       	sbrs	r15, 6
    2e04:	05 c0       	rjmp	.+10     	; 0x2e10 <vfprintf+0xe4>
    2e06:	98 9c       	mul	r9, r8
    2e08:	90 2c       	mov	r9, r0
    2e0a:	11 24       	eor	r1, r1
    2e0c:	98 0e       	add	r9, r24
    2e0e:	15 c0       	rjmp	.+42     	; 0x2e3a <vfprintf+0x10e>
    2e10:	e8 9c       	mul	r14, r8
    2e12:	e0 2c       	mov	r14, r0
    2e14:	11 24       	eor	r1, r1
    2e16:	e8 0e       	add	r14, r24
    2e18:	f0 e2       	ldi	r31, 0x20	; 32
    2e1a:	ff 2a       	or	r15, r31
    2e1c:	0e c0       	rjmp	.+28     	; 0x2e3a <vfprintf+0x10e>
    2e1e:	9e 32       	cpi	r25, 0x2E	; 46
    2e20:	29 f4       	brne	.+10     	; 0x2e2c <vfprintf+0x100>
    2e22:	f6 fc       	sbrc	r15, 6
    2e24:	5f c1       	rjmp	.+702    	; 0x30e4 <vfprintf+0x3b8>
    2e26:	40 e4       	ldi	r20, 0x40	; 64
    2e28:	f4 2a       	or	r15, r20
    2e2a:	07 c0       	rjmp	.+14     	; 0x2e3a <vfprintf+0x10e>
    2e2c:	9c 36       	cpi	r25, 0x6C	; 108
    2e2e:	19 f4       	brne	.+6      	; 0x2e36 <vfprintf+0x10a>
    2e30:	50 e8       	ldi	r21, 0x80	; 128
    2e32:	f5 2a       	or	r15, r21
    2e34:	02 c0       	rjmp	.+4      	; 0x2e3a <vfprintf+0x10e>
    2e36:	98 36       	cpi	r25, 0x68	; 104
    2e38:	49 f4       	brne	.+18     	; 0x2e4c <vfprintf+0x120>
    2e3a:	f2 01       	movw	r30, r4
    2e3c:	23 fd       	sbrc	r18, 3
    2e3e:	95 91       	lpm	r25, Z+
    2e40:	23 ff       	sbrs	r18, 3
    2e42:	91 91       	ld	r25, Z+
    2e44:	2f 01       	movw	r4, r30
    2e46:	99 23       	and	r25, r25
    2e48:	09 f0       	breq	.+2      	; 0x2e4c <vfprintf+0x120>
    2e4a:	b8 cf       	rjmp	.-144    	; 0x2dbc <vfprintf+0x90>
    2e4c:	89 2f       	mov	r24, r25
    2e4e:	85 54       	subi	r24, 0x45	; 69
    2e50:	83 30       	cpi	r24, 0x03	; 3
    2e52:	18 f0       	brcs	.+6      	; 0x2e5a <vfprintf+0x12e>
    2e54:	80 52       	subi	r24, 0x20	; 32
    2e56:	83 30       	cpi	r24, 0x03	; 3
    2e58:	38 f4       	brcc	.+14     	; 0x2e68 <vfprintf+0x13c>
    2e5a:	44 e0       	ldi	r20, 0x04	; 4
    2e5c:	50 e0       	ldi	r21, 0x00	; 0
    2e5e:	a4 0e       	add	r10, r20
    2e60:	b5 1e       	adc	r11, r21
    2e62:	5f e3       	ldi	r21, 0x3F	; 63
    2e64:	59 83       	std	Y+1, r21	; 0x01
    2e66:	0f c0       	rjmp	.+30     	; 0x2e86 <vfprintf+0x15a>
    2e68:	93 36       	cpi	r25, 0x63	; 99
    2e6a:	31 f0       	breq	.+12     	; 0x2e78 <vfprintf+0x14c>
    2e6c:	93 37       	cpi	r25, 0x73	; 115
    2e6e:	79 f0       	breq	.+30     	; 0x2e8e <vfprintf+0x162>
    2e70:	93 35       	cpi	r25, 0x53	; 83
    2e72:	09 f0       	breq	.+2      	; 0x2e76 <vfprintf+0x14a>
    2e74:	52 c0       	rjmp	.+164    	; 0x2f1a <vfprintf+0x1ee>
    2e76:	1f c0       	rjmp	.+62     	; 0x2eb6 <vfprintf+0x18a>
    2e78:	f5 01       	movw	r30, r10
    2e7a:	80 81       	ld	r24, Z
    2e7c:	89 83       	std	Y+1, r24	; 0x01
    2e7e:	42 e0       	ldi	r20, 0x02	; 2
    2e80:	50 e0       	ldi	r21, 0x00	; 0
    2e82:	a4 0e       	add	r10, r20
    2e84:	b5 1e       	adc	r11, r21
    2e86:	61 01       	movw	r12, r2
    2e88:	01 e0       	ldi	r16, 0x01	; 1
    2e8a:	10 e0       	ldi	r17, 0x00	; 0
    2e8c:	11 c0       	rjmp	.+34     	; 0x2eb0 <vfprintf+0x184>
    2e8e:	f5 01       	movw	r30, r10
    2e90:	c0 80       	ld	r12, Z
    2e92:	d1 80       	ldd	r13, Z+1	; 0x01
    2e94:	f6 fc       	sbrc	r15, 6
    2e96:	03 c0       	rjmp	.+6      	; 0x2e9e <vfprintf+0x172>
    2e98:	6f ef       	ldi	r22, 0xFF	; 255
    2e9a:	7f ef       	ldi	r23, 0xFF	; 255
    2e9c:	02 c0       	rjmp	.+4      	; 0x2ea2 <vfprintf+0x176>
    2e9e:	69 2d       	mov	r22, r9
    2ea0:	70 e0       	ldi	r23, 0x00	; 0
    2ea2:	42 e0       	ldi	r20, 0x02	; 2
    2ea4:	50 e0       	ldi	r21, 0x00	; 0
    2ea6:	a4 0e       	add	r10, r20
    2ea8:	b5 1e       	adc	r11, r21
    2eaa:	c6 01       	movw	r24, r12
    2eac:	43 d1       	rcall	.+646    	; 0x3134 <strnlen>
    2eae:	8c 01       	movw	r16, r24
    2eb0:	5f e7       	ldi	r21, 0x7F	; 127
    2eb2:	f5 22       	and	r15, r21
    2eb4:	13 c0       	rjmp	.+38     	; 0x2edc <vfprintf+0x1b0>
    2eb6:	f5 01       	movw	r30, r10
    2eb8:	c0 80       	ld	r12, Z
    2eba:	d1 80       	ldd	r13, Z+1	; 0x01
    2ebc:	f6 fc       	sbrc	r15, 6
    2ebe:	03 c0       	rjmp	.+6      	; 0x2ec6 <vfprintf+0x19a>
    2ec0:	6f ef       	ldi	r22, 0xFF	; 255
    2ec2:	7f ef       	ldi	r23, 0xFF	; 255
    2ec4:	02 c0       	rjmp	.+4      	; 0x2eca <vfprintf+0x19e>
    2ec6:	69 2d       	mov	r22, r9
    2ec8:	70 e0       	ldi	r23, 0x00	; 0
    2eca:	42 e0       	ldi	r20, 0x02	; 2
    2ecc:	50 e0       	ldi	r21, 0x00	; 0
    2ece:	a4 0e       	add	r10, r20
    2ed0:	b5 1e       	adc	r11, r21
    2ed2:	c6 01       	movw	r24, r12
    2ed4:	24 d1       	rcall	.+584    	; 0x311e <strnlen_P>
    2ed6:	8c 01       	movw	r16, r24
    2ed8:	50 e8       	ldi	r21, 0x80	; 128
    2eda:	f5 2a       	or	r15, r21
    2edc:	f3 fe       	sbrs	r15, 3
    2ede:	06 c0       	rjmp	.+12     	; 0x2eec <vfprintf+0x1c0>
    2ee0:	18 c0       	rjmp	.+48     	; 0x2f12 <vfprintf+0x1e6>
    2ee2:	80 e2       	ldi	r24, 0x20	; 32
    2ee4:	90 e0       	ldi	r25, 0x00	; 0
    2ee6:	b3 01       	movw	r22, r6
    2ee8:	30 d1       	rcall	.+608    	; 0x314a <fputc>
    2eea:	ea 94       	dec	r14
    2eec:	8e 2d       	mov	r24, r14
    2eee:	90 e0       	ldi	r25, 0x00	; 0
    2ef0:	08 17       	cp	r16, r24
    2ef2:	19 07       	cpc	r17, r25
    2ef4:	b0 f3       	brcs	.-20     	; 0x2ee2 <vfprintf+0x1b6>
    2ef6:	0d c0       	rjmp	.+26     	; 0x2f12 <vfprintf+0x1e6>
    2ef8:	f6 01       	movw	r30, r12
    2efa:	f7 fc       	sbrc	r15, 7
    2efc:	85 91       	lpm	r24, Z+
    2efe:	f7 fe       	sbrs	r15, 7
    2f00:	81 91       	ld	r24, Z+
    2f02:	6f 01       	movw	r12, r30
    2f04:	90 e0       	ldi	r25, 0x00	; 0
    2f06:	b3 01       	movw	r22, r6
    2f08:	20 d1       	rcall	.+576    	; 0x314a <fputc>
    2f0a:	e1 10       	cpse	r14, r1
    2f0c:	ea 94       	dec	r14
    2f0e:	01 50       	subi	r16, 0x01	; 1
    2f10:	10 40       	sbci	r17, 0x00	; 0
    2f12:	01 15       	cp	r16, r1
    2f14:	11 05       	cpc	r17, r1
    2f16:	81 f7       	brne	.-32     	; 0x2ef8 <vfprintf+0x1cc>
    2f18:	e2 c0       	rjmp	.+452    	; 0x30de <vfprintf+0x3b2>
    2f1a:	94 36       	cpi	r25, 0x64	; 100
    2f1c:	11 f0       	breq	.+4      	; 0x2f22 <vfprintf+0x1f6>
    2f1e:	99 36       	cpi	r25, 0x69	; 105
    2f20:	61 f5       	brne	.+88     	; 0x2f7a <vfprintf+0x24e>
    2f22:	f7 fe       	sbrs	r15, 7
    2f24:	08 c0       	rjmp	.+16     	; 0x2f36 <vfprintf+0x20a>
    2f26:	f5 01       	movw	r30, r10
    2f28:	20 81       	ld	r18, Z
    2f2a:	31 81       	ldd	r19, Z+1	; 0x01
    2f2c:	42 81       	ldd	r20, Z+2	; 0x02
    2f2e:	53 81       	ldd	r21, Z+3	; 0x03
    2f30:	84 e0       	ldi	r24, 0x04	; 4
    2f32:	90 e0       	ldi	r25, 0x00	; 0
    2f34:	0a c0       	rjmp	.+20     	; 0x2f4a <vfprintf+0x21e>
    2f36:	f5 01       	movw	r30, r10
    2f38:	80 81       	ld	r24, Z
    2f3a:	91 81       	ldd	r25, Z+1	; 0x01
    2f3c:	9c 01       	movw	r18, r24
    2f3e:	44 27       	eor	r20, r20
    2f40:	37 fd       	sbrc	r19, 7
    2f42:	40 95       	com	r20
    2f44:	54 2f       	mov	r21, r20
    2f46:	82 e0       	ldi	r24, 0x02	; 2
    2f48:	90 e0       	ldi	r25, 0x00	; 0
    2f4a:	a8 0e       	add	r10, r24
    2f4c:	b9 1e       	adc	r11, r25
    2f4e:	9f e6       	ldi	r25, 0x6F	; 111
    2f50:	f9 22       	and	r15, r25
    2f52:	57 ff       	sbrs	r21, 7
    2f54:	09 c0       	rjmp	.+18     	; 0x2f68 <vfprintf+0x23c>
    2f56:	50 95       	com	r21
    2f58:	40 95       	com	r20
    2f5a:	30 95       	com	r19
    2f5c:	21 95       	neg	r18
    2f5e:	3f 4f       	sbci	r19, 0xFF	; 255
    2f60:	4f 4f       	sbci	r20, 0xFF	; 255
    2f62:	5f 4f       	sbci	r21, 0xFF	; 255
    2f64:	e0 e8       	ldi	r30, 0x80	; 128
    2f66:	fe 2a       	or	r15, r30
    2f68:	ca 01       	movw	r24, r20
    2f6a:	b9 01       	movw	r22, r18
    2f6c:	a1 01       	movw	r20, r2
    2f6e:	2a e0       	ldi	r18, 0x0A	; 10
    2f70:	30 e0       	ldi	r19, 0x00	; 0
    2f72:	17 d1       	rcall	.+558    	; 0x31a2 <__ultoa_invert>
    2f74:	d8 2e       	mov	r13, r24
    2f76:	d2 18       	sub	r13, r2
    2f78:	3f c0       	rjmp	.+126    	; 0x2ff8 <vfprintf+0x2cc>
    2f7a:	95 37       	cpi	r25, 0x75	; 117
    2f7c:	29 f4       	brne	.+10     	; 0x2f88 <vfprintf+0x25c>
    2f7e:	1f 2d       	mov	r17, r15
    2f80:	1f 7e       	andi	r17, 0xEF	; 239
    2f82:	2a e0       	ldi	r18, 0x0A	; 10
    2f84:	30 e0       	ldi	r19, 0x00	; 0
    2f86:	1d c0       	rjmp	.+58     	; 0x2fc2 <vfprintf+0x296>
    2f88:	1f 2d       	mov	r17, r15
    2f8a:	19 7f       	andi	r17, 0xF9	; 249
    2f8c:	9f 36       	cpi	r25, 0x6F	; 111
    2f8e:	61 f0       	breq	.+24     	; 0x2fa8 <vfprintf+0x27c>
    2f90:	90 37       	cpi	r25, 0x70	; 112
    2f92:	20 f4       	brcc	.+8      	; 0x2f9c <vfprintf+0x270>
    2f94:	98 35       	cpi	r25, 0x58	; 88
    2f96:	09 f0       	breq	.+2      	; 0x2f9a <vfprintf+0x26e>
    2f98:	a5 c0       	rjmp	.+330    	; 0x30e4 <vfprintf+0x3b8>
    2f9a:	0f c0       	rjmp	.+30     	; 0x2fba <vfprintf+0x28e>
    2f9c:	90 37       	cpi	r25, 0x70	; 112
    2f9e:	39 f0       	breq	.+14     	; 0x2fae <vfprintf+0x282>
    2fa0:	98 37       	cpi	r25, 0x78	; 120
    2fa2:	09 f0       	breq	.+2      	; 0x2fa6 <vfprintf+0x27a>
    2fa4:	9f c0       	rjmp	.+318    	; 0x30e4 <vfprintf+0x3b8>
    2fa6:	04 c0       	rjmp	.+8      	; 0x2fb0 <vfprintf+0x284>
    2fa8:	28 e0       	ldi	r18, 0x08	; 8
    2faa:	30 e0       	ldi	r19, 0x00	; 0
    2fac:	0a c0       	rjmp	.+20     	; 0x2fc2 <vfprintf+0x296>
    2fae:	10 61       	ori	r17, 0x10	; 16
    2fb0:	14 fd       	sbrc	r17, 4
    2fb2:	14 60       	ori	r17, 0x04	; 4
    2fb4:	20 e1       	ldi	r18, 0x10	; 16
    2fb6:	30 e0       	ldi	r19, 0x00	; 0
    2fb8:	04 c0       	rjmp	.+8      	; 0x2fc2 <vfprintf+0x296>
    2fba:	14 fd       	sbrc	r17, 4
    2fbc:	16 60       	ori	r17, 0x06	; 6
    2fbe:	20 e1       	ldi	r18, 0x10	; 16
    2fc0:	32 e0       	ldi	r19, 0x02	; 2
    2fc2:	17 ff       	sbrs	r17, 7
    2fc4:	08 c0       	rjmp	.+16     	; 0x2fd6 <vfprintf+0x2aa>
    2fc6:	f5 01       	movw	r30, r10
    2fc8:	60 81       	ld	r22, Z
    2fca:	71 81       	ldd	r23, Z+1	; 0x01
    2fcc:	82 81       	ldd	r24, Z+2	; 0x02
    2fce:	93 81       	ldd	r25, Z+3	; 0x03
    2fd0:	44 e0       	ldi	r20, 0x04	; 4
    2fd2:	50 e0       	ldi	r21, 0x00	; 0
    2fd4:	08 c0       	rjmp	.+16     	; 0x2fe6 <vfprintf+0x2ba>
    2fd6:	f5 01       	movw	r30, r10
    2fd8:	80 81       	ld	r24, Z
    2fda:	91 81       	ldd	r25, Z+1	; 0x01
    2fdc:	bc 01       	movw	r22, r24
    2fde:	80 e0       	ldi	r24, 0x00	; 0
    2fe0:	90 e0       	ldi	r25, 0x00	; 0
    2fe2:	42 e0       	ldi	r20, 0x02	; 2
    2fe4:	50 e0       	ldi	r21, 0x00	; 0
    2fe6:	a4 0e       	add	r10, r20
    2fe8:	b5 1e       	adc	r11, r21
    2fea:	a1 01       	movw	r20, r2
    2fec:	da d0       	rcall	.+436    	; 0x31a2 <__ultoa_invert>
    2fee:	d8 2e       	mov	r13, r24
    2ff0:	d2 18       	sub	r13, r2
    2ff2:	8f e7       	ldi	r24, 0x7F	; 127
    2ff4:	f8 2e       	mov	r15, r24
    2ff6:	f1 22       	and	r15, r17
    2ff8:	f6 fe       	sbrs	r15, 6
    2ffa:	0b c0       	rjmp	.+22     	; 0x3012 <vfprintf+0x2e6>
    2ffc:	5e ef       	ldi	r21, 0xFE	; 254
    2ffe:	f5 22       	and	r15, r21
    3000:	d9 14       	cp	r13, r9
    3002:	38 f4       	brcc	.+14     	; 0x3012 <vfprintf+0x2e6>
    3004:	f4 fe       	sbrs	r15, 4
    3006:	07 c0       	rjmp	.+14     	; 0x3016 <vfprintf+0x2ea>
    3008:	f2 fc       	sbrc	r15, 2
    300a:	05 c0       	rjmp	.+10     	; 0x3016 <vfprintf+0x2ea>
    300c:	8f ee       	ldi	r24, 0xEF	; 239
    300e:	f8 22       	and	r15, r24
    3010:	02 c0       	rjmp	.+4      	; 0x3016 <vfprintf+0x2ea>
    3012:	1d 2d       	mov	r17, r13
    3014:	01 c0       	rjmp	.+2      	; 0x3018 <vfprintf+0x2ec>
    3016:	19 2d       	mov	r17, r9
    3018:	f4 fe       	sbrs	r15, 4
    301a:	0d c0       	rjmp	.+26     	; 0x3036 <vfprintf+0x30a>
    301c:	fe 01       	movw	r30, r28
    301e:	ed 0d       	add	r30, r13
    3020:	f1 1d       	adc	r31, r1
    3022:	80 81       	ld	r24, Z
    3024:	80 33       	cpi	r24, 0x30	; 48
    3026:	19 f4       	brne	.+6      	; 0x302e <vfprintf+0x302>
    3028:	99 ee       	ldi	r25, 0xE9	; 233
    302a:	f9 22       	and	r15, r25
    302c:	08 c0       	rjmp	.+16     	; 0x303e <vfprintf+0x312>
    302e:	1f 5f       	subi	r17, 0xFF	; 255
    3030:	f2 fe       	sbrs	r15, 2
    3032:	05 c0       	rjmp	.+10     	; 0x303e <vfprintf+0x312>
    3034:	03 c0       	rjmp	.+6      	; 0x303c <vfprintf+0x310>
    3036:	8f 2d       	mov	r24, r15
    3038:	86 78       	andi	r24, 0x86	; 134
    303a:	09 f0       	breq	.+2      	; 0x303e <vfprintf+0x312>
    303c:	1f 5f       	subi	r17, 0xFF	; 255
    303e:	0f 2d       	mov	r16, r15
    3040:	f3 fc       	sbrc	r15, 3
    3042:	13 c0       	rjmp	.+38     	; 0x306a <vfprintf+0x33e>
    3044:	f0 fe       	sbrs	r15, 0
    3046:	0e c0       	rjmp	.+28     	; 0x3064 <vfprintf+0x338>
    3048:	1e 15       	cp	r17, r14
    304a:	10 f0       	brcs	.+4      	; 0x3050 <vfprintf+0x324>
    304c:	9d 2c       	mov	r9, r13
    304e:	0a c0       	rjmp	.+20     	; 0x3064 <vfprintf+0x338>
    3050:	9d 2c       	mov	r9, r13
    3052:	9e 0c       	add	r9, r14
    3054:	91 1a       	sub	r9, r17
    3056:	1e 2d       	mov	r17, r14
    3058:	05 c0       	rjmp	.+10     	; 0x3064 <vfprintf+0x338>
    305a:	80 e2       	ldi	r24, 0x20	; 32
    305c:	90 e0       	ldi	r25, 0x00	; 0
    305e:	b3 01       	movw	r22, r6
    3060:	74 d0       	rcall	.+232    	; 0x314a <fputc>
    3062:	1f 5f       	subi	r17, 0xFF	; 255
    3064:	1e 15       	cp	r17, r14
    3066:	c8 f3       	brcs	.-14     	; 0x305a <vfprintf+0x32e>
    3068:	04 c0       	rjmp	.+8      	; 0x3072 <vfprintf+0x346>
    306a:	1e 15       	cp	r17, r14
    306c:	10 f4       	brcc	.+4      	; 0x3072 <vfprintf+0x346>
    306e:	e1 1a       	sub	r14, r17
    3070:	01 c0       	rjmp	.+2      	; 0x3074 <vfprintf+0x348>
    3072:	ee 24       	eor	r14, r14
    3074:	04 ff       	sbrs	r16, 4
    3076:	0e c0       	rjmp	.+28     	; 0x3094 <vfprintf+0x368>
    3078:	80 e3       	ldi	r24, 0x30	; 48
    307a:	90 e0       	ldi	r25, 0x00	; 0
    307c:	b3 01       	movw	r22, r6
    307e:	65 d0       	rcall	.+202    	; 0x314a <fputc>
    3080:	02 ff       	sbrs	r16, 2
    3082:	1b c0       	rjmp	.+54     	; 0x30ba <vfprintf+0x38e>
    3084:	01 fd       	sbrc	r16, 1
    3086:	03 c0       	rjmp	.+6      	; 0x308e <vfprintf+0x362>
    3088:	88 e7       	ldi	r24, 0x78	; 120
    308a:	90 e0       	ldi	r25, 0x00	; 0
    308c:	0e c0       	rjmp	.+28     	; 0x30aa <vfprintf+0x37e>
    308e:	88 e5       	ldi	r24, 0x58	; 88
    3090:	90 e0       	ldi	r25, 0x00	; 0
    3092:	0b c0       	rjmp	.+22     	; 0x30aa <vfprintf+0x37e>
    3094:	80 2f       	mov	r24, r16
    3096:	86 78       	andi	r24, 0x86	; 134
    3098:	81 f0       	breq	.+32     	; 0x30ba <vfprintf+0x38e>
    309a:	01 ff       	sbrs	r16, 1
    309c:	02 c0       	rjmp	.+4      	; 0x30a2 <vfprintf+0x376>
    309e:	8b e2       	ldi	r24, 0x2B	; 43
    30a0:	01 c0       	rjmp	.+2      	; 0x30a4 <vfprintf+0x378>
    30a2:	80 e2       	ldi	r24, 0x20	; 32
    30a4:	f7 fc       	sbrc	r15, 7
    30a6:	8d e2       	ldi	r24, 0x2D	; 45
    30a8:	90 e0       	ldi	r25, 0x00	; 0
    30aa:	b3 01       	movw	r22, r6
    30ac:	4e d0       	rcall	.+156    	; 0x314a <fputc>
    30ae:	05 c0       	rjmp	.+10     	; 0x30ba <vfprintf+0x38e>
    30b0:	80 e3       	ldi	r24, 0x30	; 48
    30b2:	90 e0       	ldi	r25, 0x00	; 0
    30b4:	b3 01       	movw	r22, r6
    30b6:	49 d0       	rcall	.+146    	; 0x314a <fputc>
    30b8:	9a 94       	dec	r9
    30ba:	d9 14       	cp	r13, r9
    30bc:	c8 f3       	brcs	.-14     	; 0x30b0 <vfprintf+0x384>
    30be:	da 94       	dec	r13
    30c0:	f1 01       	movw	r30, r2
    30c2:	ed 0d       	add	r30, r13
    30c4:	f1 1d       	adc	r31, r1
    30c6:	80 81       	ld	r24, Z
    30c8:	90 e0       	ldi	r25, 0x00	; 0
    30ca:	b3 01       	movw	r22, r6
    30cc:	3e d0       	rcall	.+124    	; 0x314a <fputc>
    30ce:	dd 20       	and	r13, r13
    30d0:	b1 f7       	brne	.-20     	; 0x30be <vfprintf+0x392>
    30d2:	05 c0       	rjmp	.+10     	; 0x30de <vfprintf+0x3b2>
    30d4:	80 e2       	ldi	r24, 0x20	; 32
    30d6:	90 e0       	ldi	r25, 0x00	; 0
    30d8:	b3 01       	movw	r22, r6
    30da:	37 d0       	rcall	.+110    	; 0x314a <fputc>
    30dc:	ea 94       	dec	r14
    30de:	ee 20       	and	r14, r14
    30e0:	c9 f7       	brne	.-14     	; 0x30d4 <vfprintf+0x3a8>
    30e2:	50 ce       	rjmp	.-864    	; 0x2d84 <vfprintf+0x58>
    30e4:	f3 01       	movw	r30, r6
    30e6:	66 81       	ldd	r22, Z+6	; 0x06
    30e8:	77 81       	ldd	r23, Z+7	; 0x07
    30ea:	cb 01       	movw	r24, r22
    30ec:	2b 96       	adiw	r28, 0x0b	; 11
    30ee:	0f b6       	in	r0, 0x3f	; 63
    30f0:	f8 94       	cli
    30f2:	de bf       	out	0x3e, r29	; 62
    30f4:	0f be       	out	0x3f, r0	; 63
    30f6:	cd bf       	out	0x3d, r28	; 61
    30f8:	cf 91       	pop	r28
    30fa:	df 91       	pop	r29
    30fc:	1f 91       	pop	r17
    30fe:	0f 91       	pop	r16
    3100:	ff 90       	pop	r15
    3102:	ef 90       	pop	r14
    3104:	df 90       	pop	r13
    3106:	cf 90       	pop	r12
    3108:	bf 90       	pop	r11
    310a:	af 90       	pop	r10
    310c:	9f 90       	pop	r9
    310e:	8f 90       	pop	r8
    3110:	7f 90       	pop	r7
    3112:	6f 90       	pop	r6
    3114:	5f 90       	pop	r5
    3116:	4f 90       	pop	r4
    3118:	3f 90       	pop	r3
    311a:	2f 90       	pop	r2
    311c:	08 95       	ret

0000311e <strnlen_P>:
    311e:	fc 01       	movw	r30, r24
    3120:	05 90       	lpm	r0, Z+
    3122:	61 50       	subi	r22, 0x01	; 1
    3124:	70 40       	sbci	r23, 0x00	; 0
    3126:	01 10       	cpse	r0, r1
    3128:	d8 f7       	brcc	.-10     	; 0x3120 <strnlen_P+0x2>
    312a:	80 95       	com	r24
    312c:	90 95       	com	r25
    312e:	8e 0f       	add	r24, r30
    3130:	9f 1f       	adc	r25, r31
    3132:	08 95       	ret

00003134 <strnlen>:
    3134:	fc 01       	movw	r30, r24
    3136:	61 50       	subi	r22, 0x01	; 1
    3138:	70 40       	sbci	r23, 0x00	; 0
    313a:	01 90       	ld	r0, Z+
    313c:	01 10       	cpse	r0, r1
    313e:	d8 f7       	brcc	.-10     	; 0x3136 <strnlen+0x2>
    3140:	80 95       	com	r24
    3142:	90 95       	com	r25
    3144:	8e 0f       	add	r24, r30
    3146:	9f 1f       	adc	r25, r31
    3148:	08 95       	ret

0000314a <fputc>:
    314a:	0f 93       	push	r16
    314c:	1f 93       	push	r17
    314e:	cf 93       	push	r28
    3150:	df 93       	push	r29
    3152:	8c 01       	movw	r16, r24
    3154:	eb 01       	movw	r28, r22
    3156:	8b 81       	ldd	r24, Y+3	; 0x03
    3158:	81 ff       	sbrs	r24, 1
    315a:	1b c0       	rjmp	.+54     	; 0x3192 <fputc+0x48>
    315c:	82 ff       	sbrs	r24, 2
    315e:	0d c0       	rjmp	.+26     	; 0x317a <fputc+0x30>
    3160:	2e 81       	ldd	r18, Y+6	; 0x06
    3162:	3f 81       	ldd	r19, Y+7	; 0x07
    3164:	8c 81       	ldd	r24, Y+4	; 0x04
    3166:	9d 81       	ldd	r25, Y+5	; 0x05
    3168:	28 17       	cp	r18, r24
    316a:	39 07       	cpc	r19, r25
    316c:	64 f4       	brge	.+24     	; 0x3186 <fputc+0x3c>
    316e:	e8 81       	ld	r30, Y
    3170:	f9 81       	ldd	r31, Y+1	; 0x01
    3172:	01 93       	st	Z+, r16
    3174:	f9 83       	std	Y+1, r31	; 0x01
    3176:	e8 83       	st	Y, r30
    3178:	06 c0       	rjmp	.+12     	; 0x3186 <fputc+0x3c>
    317a:	e8 85       	ldd	r30, Y+8	; 0x08
    317c:	f9 85       	ldd	r31, Y+9	; 0x09
    317e:	80 2f       	mov	r24, r16
    3180:	09 95       	icall
    3182:	89 2b       	or	r24, r25
    3184:	31 f4       	brne	.+12     	; 0x3192 <fputc+0x48>
    3186:	8e 81       	ldd	r24, Y+6	; 0x06
    3188:	9f 81       	ldd	r25, Y+7	; 0x07
    318a:	01 96       	adiw	r24, 0x01	; 1
    318c:	9f 83       	std	Y+7, r25	; 0x07
    318e:	8e 83       	std	Y+6, r24	; 0x06
    3190:	02 c0       	rjmp	.+4      	; 0x3196 <fputc+0x4c>
    3192:	0f ef       	ldi	r16, 0xFF	; 255
    3194:	1f ef       	ldi	r17, 0xFF	; 255
    3196:	c8 01       	movw	r24, r16
    3198:	df 91       	pop	r29
    319a:	cf 91       	pop	r28
    319c:	1f 91       	pop	r17
    319e:	0f 91       	pop	r16
    31a0:	08 95       	ret

000031a2 <__ultoa_invert>:
    31a2:	fa 01       	movw	r30, r20
    31a4:	aa 27       	eor	r26, r26
    31a6:	28 30       	cpi	r18, 0x08	; 8
    31a8:	51 f1       	breq	.+84     	; 0x31fe <__ultoa_invert+0x5c>
    31aa:	20 31       	cpi	r18, 0x10	; 16
    31ac:	81 f1       	breq	.+96     	; 0x320e <__ultoa_invert+0x6c>
    31ae:	e8 94       	clt
    31b0:	6f 93       	push	r22
    31b2:	6e 7f       	andi	r22, 0xFE	; 254
    31b4:	6e 5f       	subi	r22, 0xFE	; 254
    31b6:	7f 4f       	sbci	r23, 0xFF	; 255
    31b8:	8f 4f       	sbci	r24, 0xFF	; 255
    31ba:	9f 4f       	sbci	r25, 0xFF	; 255
    31bc:	af 4f       	sbci	r26, 0xFF	; 255
    31be:	b1 e0       	ldi	r27, 0x01	; 1
    31c0:	3e d0       	rcall	.+124    	; 0x323e <__ultoa_invert+0x9c>
    31c2:	b4 e0       	ldi	r27, 0x04	; 4
    31c4:	3c d0       	rcall	.+120    	; 0x323e <__ultoa_invert+0x9c>
    31c6:	67 0f       	add	r22, r23
    31c8:	78 1f       	adc	r23, r24
    31ca:	89 1f       	adc	r24, r25
    31cc:	9a 1f       	adc	r25, r26
    31ce:	a1 1d       	adc	r26, r1
    31d0:	68 0f       	add	r22, r24
    31d2:	79 1f       	adc	r23, r25
    31d4:	8a 1f       	adc	r24, r26
    31d6:	91 1d       	adc	r25, r1
    31d8:	a1 1d       	adc	r26, r1
    31da:	6a 0f       	add	r22, r26
    31dc:	71 1d       	adc	r23, r1
    31de:	81 1d       	adc	r24, r1
    31e0:	91 1d       	adc	r25, r1
    31e2:	a1 1d       	adc	r26, r1
    31e4:	20 d0       	rcall	.+64     	; 0x3226 <__ultoa_invert+0x84>
    31e6:	09 f4       	brne	.+2      	; 0x31ea <__ultoa_invert+0x48>
    31e8:	68 94       	set
    31ea:	3f 91       	pop	r19
    31ec:	2a e0       	ldi	r18, 0x0A	; 10
    31ee:	26 9f       	mul	r18, r22
    31f0:	11 24       	eor	r1, r1
    31f2:	30 19       	sub	r19, r0
    31f4:	30 5d       	subi	r19, 0xD0	; 208
    31f6:	31 93       	st	Z+, r19
    31f8:	de f6       	brtc	.-74     	; 0x31b0 <__ultoa_invert+0xe>
    31fa:	cf 01       	movw	r24, r30
    31fc:	08 95       	ret
    31fe:	46 2f       	mov	r20, r22
    3200:	47 70       	andi	r20, 0x07	; 7
    3202:	40 5d       	subi	r20, 0xD0	; 208
    3204:	41 93       	st	Z+, r20
    3206:	b3 e0       	ldi	r27, 0x03	; 3
    3208:	0f d0       	rcall	.+30     	; 0x3228 <__ultoa_invert+0x86>
    320a:	c9 f7       	brne	.-14     	; 0x31fe <__ultoa_invert+0x5c>
    320c:	f6 cf       	rjmp	.-20     	; 0x31fa <__ultoa_invert+0x58>
    320e:	46 2f       	mov	r20, r22
    3210:	4f 70       	andi	r20, 0x0F	; 15
    3212:	40 5d       	subi	r20, 0xD0	; 208
    3214:	4a 33       	cpi	r20, 0x3A	; 58
    3216:	18 f0       	brcs	.+6      	; 0x321e <__ultoa_invert+0x7c>
    3218:	49 5d       	subi	r20, 0xD9	; 217
    321a:	31 fd       	sbrc	r19, 1
    321c:	40 52       	subi	r20, 0x20	; 32
    321e:	41 93       	st	Z+, r20
    3220:	02 d0       	rcall	.+4      	; 0x3226 <__ultoa_invert+0x84>
    3222:	a9 f7       	brne	.-22     	; 0x320e <__ultoa_invert+0x6c>
    3224:	ea cf       	rjmp	.-44     	; 0x31fa <__ultoa_invert+0x58>
    3226:	b4 e0       	ldi	r27, 0x04	; 4
    3228:	a6 95       	lsr	r26
    322a:	97 95       	ror	r25
    322c:	87 95       	ror	r24
    322e:	77 95       	ror	r23
    3230:	67 95       	ror	r22
    3232:	ba 95       	dec	r27
    3234:	c9 f7       	brne	.-14     	; 0x3228 <__ultoa_invert+0x86>
    3236:	00 97       	sbiw	r24, 0x00	; 0
    3238:	61 05       	cpc	r22, r1
    323a:	71 05       	cpc	r23, r1
    323c:	08 95       	ret
    323e:	9b 01       	movw	r18, r22
    3240:	ac 01       	movw	r20, r24
    3242:	0a 2e       	mov	r0, r26
    3244:	06 94       	lsr	r0
    3246:	57 95       	ror	r21
    3248:	47 95       	ror	r20
    324a:	37 95       	ror	r19
    324c:	27 95       	ror	r18
    324e:	ba 95       	dec	r27
    3250:	c9 f7       	brne	.-14     	; 0x3244 <__ultoa_invert+0xa2>
    3252:	62 0f       	add	r22, r18
    3254:	73 1f       	adc	r23, r19
    3256:	84 1f       	adc	r24, r20
    3258:	95 1f       	adc	r25, r21
    325a:	a0 1d       	adc	r26, r0
    325c:	08 95       	ret

0000325e <_exit>:
    325e:	f8 94       	cli

00003260 <__stop_program>:
    3260:	ff cf       	rjmp	.-2      	; 0x3260 <__stop_program>
